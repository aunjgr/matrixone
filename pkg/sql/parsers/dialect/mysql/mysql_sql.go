// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const CHAIN = 57495
const NO = 57496
const RELEASE = 57497
const PRIORITY = 57498
const QUICK = 57499
const BIT = 57500
const TINYINT = 57501
const SMALLINT = 57502
const MEDIUMINT = 57503
const INT = 57504
const INTEGER = 57505
const BIGINT = 57506
const INTNUM = 57507
const REAL = 57508
const DOUBLE = 57509
const FLOAT_TYPE = 57510
const DECIMAL = 57511
const NUMERIC = 57512
const DECIMAL_VALUE = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const DATALINK = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const UUID = 57535
const VECF32 = 57536
const VECF64 = 57537
const GEOMETRY = 57538
const POINT = 57539
const LINESTRING = 57540
const POLYGON = 57541
const GEOMETRYCOLLECTION = 57542
const MULTIPOINT = 57543
const MULTILINESTRING = 57544
const MULTIPOLYGON = 57545
const INT1 = 57546
const INT2 = 57547
const INT3 = 57548
const INT4 = 57549
const INT8 = 57550
const S3OPTION = 57551
const STAGEOPTION = 57552
const SQL_SMALL_RESULT = 57553
const SQL_BIG_RESULT = 57554
const SQL_BUFFER_RESULT = 57555
const LOW_PRIORITY = 57556
const HIGH_PRIORITY = 57557
const DELAYED = 57558
const CREATE = 57559
const ALTER = 57560
const DROP = 57561
const RENAME = 57562
const ANALYZE = 57563
const PHYPLAN = 57564
const ADD = 57565
const RETURNS = 57566
const SCHEMA = 57567
const TABLE = 57568
const SEQUENCE = 57569
const INDEX = 57570
const VIEW = 57571
const TO = 57572
const IGNORE = 57573
const IF = 57574
const PRIMARY = 57575
const COLUMN = 57576
const CONSTRAINT = 57577
const SPATIAL = 57578
const FULLTEXT = 57579
const FOREIGN = 57580
const KEY_BLOCK_SIZE = 57581
const SHOW = 57582
const DESCRIBE = 57583
const EXPLAIN = 57584
const DATE = 57585
const ESCAPE = 57586
const REPAIR = 57587
const OPTIMIZE = 57588
const TRUNCATE = 57589
const MAXVALUE = 57590
const PARTITION = 57591
const REORGANIZE = 57592
const LESS = 57593
const THAN = 57594
const PROCEDURE = 57595
const TRIGGER = 57596
const STATUS = 57597
const VARIABLES = 57598
const ROLE = 57599
const PROXY = 57600
const AVG_ROW_LENGTH = 57601
const STORAGE = 57602
const DISK = 57603
const MEMORY = 57604
const CHECKSUM = 57605
const COMPRESSION = 57606
const DATA = 57607
const DIRECTORY = 57608
const DELAY_KEY_WRITE = 57609
const ENCRYPTION = 57610
const ENGINE = 57611
const MAX_ROWS = 57612
const MIN_ROWS = 57613
const PACK_KEYS = 57614
const ROW_FORMAT = 57615
const STATS_AUTO_RECALC = 57616
const STATS_PERSISTENT = 57617
const STATS_SAMPLE_PAGES = 57618
const DYNAMIC = 57619
const COMPRESSED = 57620
const REDUNDANT = 57621
const COMPACT = 57622
const FIXED = 57623
const COLUMN_FORMAT = 57624
const AUTO_RANDOM = 57625
const ENGINE_ATTRIBUTE = 57626
const SECONDARY_ENGINE_ATTRIBUTE = 57627
const INSERT_METHOD = 57628
const RESTRICT = 57629
const CASCADE = 57630
const ACTION = 57631
const PARTIAL = 57632
const SIMPLE = 57633
const CHECK = 57634
const ENFORCED = 57635
const RANGE = 57636
const LIST = 57637
const ALGORITHM = 57638
const LINEAR = 57639
const PARTITIONS = 57640
const SUBPARTITION = 57641
const SUBPARTITIONS = 57642
const CLUSTER = 57643
const TYPE = 57644
const ANY = 57645
const SOME = 57646
const EXTERNAL = 57647
const LOCALFILE = 57648
const URL = 57649
const PREPARE = 57650
const DEALLOCATE = 57651
const RESET = 57652
const EXTENSION = 57653
const RETENTION = 57654
const PERIOD = 57655
const INCREMENT = 57656
const CYCLE = 57657
const MINVALUE = 57658
const PUBLICATION = 57659
const SUBSCRIPTIONS = 57660
const PUBLICATIONS = 57661
const PROPERTIES = 57662
const PARSER = 57663
const VISIBLE = 57664
const INVISIBLE = 57665
const BTREE = 57666
const HASH = 57667
const RTREE = 57668
const BSI = 57669
const IVFFLAT = 57670
const MASTER = 57671
const ZONEMAP = 57672
const LEADING = 57673
const BOTH = 57674
const TRAILING = 57675
const UNKNOWN = 57676
const LISTS = 57677
const OP_TYPE = 57678
const REINDEX = 57679
const EXPIRE = 57680
const ACCOUNT = 57681
const ACCOUNTS = 57682
const UNLOCK = 57683
const DAY = 57684
const NEVER = 57685
const PUMP = 57686
const MYSQL_COMPATIBILITY_MODE = 57687
const UNIQUE_CHECK_ON_AUTOINCR = 57688
const MODIFY = 57689
const CHANGE = 57690
const SECOND = 57691
const ASCII = 57692
const COALESCE = 57693
const COLLATION = 57694
const HOUR = 57695
const MICROSECOND = 57696
const MINUTE = 57697
const MONTH = 57698
const QUARTER = 57699
const REPEAT = 57700
const REVERSE = 57701
const ROW_COUNT = 57702
const WEEK = 57703
const REVOKE = 57704
const FUNCTION = 57705
const PRIVILEGES = 57706
const TABLESPACE = 57707
const EXECUTE = 57708
const SUPER = 57709
const GRANT = 57710
const OPTION = 57711
const REFERENCES = 57712
const REPLICATION = 57713
const SLAVE = 57714
const CLIENT = 57715
const USAGE = 57716
const RELOAD = 57717
const FILE = 57718
const TEMPORARY = 57719
const ROUTINE = 57720
const EVENT = 57721
const SHUTDOWN = 57722
const NULLX = 57723
const AUTO_INCREMENT = 57724
const APPROXNUM = 57725
const SIGNED = 57726
const UNSIGNED = 57727
const ZEROFILL = 57728
const ENGINES = 57729
const LOW_CARDINALITY = 57730
const AUTOEXTEND_SIZE = 57731
const ADMIN_NAME = 57732
const RANDOM = 57733
const SUSPEND = 57734
const ATTRIBUTE = 57735
const HISTORY = 57736
const REUSE = 57737
const CURRENT = 57738
const OPTIONAL = 57739
const FAILED_LOGIN_ATTEMPTS = 57740
const PASSWORD_LOCK_TIME = 57741
const UNBOUNDED = 57742
const SECONDARY = 57743
const RESTRICTED = 57744
const USER = 57745
const IDENTIFIED = 57746
const CIPHER = 57747
const ISSUER = 57748
const X509 = 57749
const SUBJECT = 57750
const SAN = 57751
const REQUIRE = 57752
const SSL = 57753
const NONE = 57754
const PASSWORD = 57755
const SHARED = 57756
const EXCLUSIVE = 57757
const MAX_QUERIES_PER_HOUR = 57758
const MAX_UPDATES_PER_HOUR = 57759
const MAX_CONNECTIONS_PER_HOUR = 57760
const MAX_USER_CONNECTIONS = 57761
const FORMAT = 57762
const VERBOSE = 57763
const CONNECTION = 57764
const TRIGGERS = 57765
const PROFILES = 57766
const LOAD = 57767
const INLINE = 57768
const INFILE = 57769
const TERMINATED = 57770
const OPTIONALLY = 57771
const ENCLOSED = 57772
const ESCAPED = 57773
const STARTING = 57774
const LINES = 57775
const ROWS = 57776
const IMPORT = 57777
const DISCARD = 57778
const JSONTYPE = 57779
const MODUMP = 57780
const OVER = 57781
const PRECEDING = 57782
const FOLLOWING = 57783
const GROUPS = 57784
const DATABASES = 57785
const TABLES = 57786
const SEQUENCES = 57787
const EXTENDED = 57788
const FULL = 57789
const PROCESSLIST = 57790
const FIELDS = 57791
const COLUMNS = 57792
const OPEN = 57793
const ERRORS = 57794
const WARNINGS = 57795
const INDEXES = 57796
const SCHEMAS = 57797
const NODE = 57798
const LOCKS = 57799
const ROLES = 57800
const TABLE_NUMBER = 57801
const COLUMN_NUMBER = 57802
const TABLE_VALUES = 57803
const TABLE_SIZE = 57804
const NAMES = 57805
const GLOBAL = 57806
const PERSIST = 57807
const SESSION = 57808
const ISOLATION = 57809
const LEVEL = 57810
const READ = 57811
const WRITE = 57812
const ONLY = 57813
const REPEATABLE = 57814
const COMMITTED = 57815
const UNCOMMITTED = 57816
const SERIALIZABLE = 57817
const LOCAL = 57818
const EVENTS = 57819
const PLUGINS = 57820
const CURRENT_TIMESTAMP = 57821
const DATABASE = 57822
const CURRENT_TIME = 57823
const LOCALTIME = 57824
const LOCALTIMESTAMP = 57825
const UTC_DATE = 57826
const UTC_TIME = 57827
const UTC_TIMESTAMP = 57828
const REPLACE = 57829
const CONVERT = 57830
const SEPARATOR = 57831
const TIMESTAMPDIFF = 57832
const CURRENT_DATE = 57833
const CURRENT_USER = 57834
const CURRENT_ROLE = 57835
const SECOND_MICROSECOND = 57836
const MINUTE_MICROSECOND = 57837
const MINUTE_SECOND = 57838
const HOUR_MICROSECOND = 57839
const HOUR_SECOND = 57840
const HOUR_MINUTE = 57841
const DAY_MICROSECOND = 57842
const DAY_SECOND = 57843
const DAY_MINUTE = 57844
const DAY_HOUR = 57845
const YEAR_MONTH = 57846
const SQL_TSI_HOUR = 57847
const SQL_TSI_DAY = 57848
const SQL_TSI_WEEK = 57849
const SQL_TSI_MONTH = 57850
const SQL_TSI_QUARTER = 57851
const SQL_TSI_YEAR = 57852
const SQL_TSI_SECOND = 57853
const SQL_TSI_MINUTE = 57854
const RECURSIVE = 57855
const CONFIG = 57856
const DRAINER = 57857
const SOURCE = 57858
const STREAM = 57859
const HEADERS = 57860
const CONNECTOR = 57861
const CONNECTORS = 57862
const DAEMON = 57863
const PAUSE = 57864
const CANCEL = 57865
const TASK = 57866
const RESUME = 57867
const MATCH = 57868
const AGAINST = 57869
const BOOLEAN = 57870
const LANGUAGE = 57871
const WITH = 57872
const QUERY = 57873
const EXPANSION = 57874
const WITHOUT = 57875
const VALIDATION = 57876
const UPGRADE = 57877
const RETRY = 57878
const ADDDATE = 57879
const BIT_AND = 57880
const BIT_OR = 57881
const BIT_XOR = 57882
const CAST = 57883
const COUNT = 57884
const APPROX_COUNT = 57885
const APPROX_COUNT_DISTINCT = 57886
const SERIAL_EXTRACT = 57887
const APPROX_PERCENTILE = 57888
const CURDATE = 57889
const CURTIME = 57890
const DATE_ADD = 57891
const DATE_SUB = 57892
const EXTRACT = 57893
const GROUP_CONCAT = 57894
const MAX = 57895
const MID = 57896
const MIN = 57897
const NOW = 57898
const POSITION = 57899
const SESSION_USER = 57900
const STD = 57901
const STDDEV = 57902
const MEDIAN = 57903
const CLUSTER_CENTERS = 57904
const KMEANS = 57905
const STDDEV_POP = 57906
const STDDEV_SAMP = 57907
const SUBDATE = 57908
const SUBSTR = 57909
const SUBSTRING = 57910
const SUM = 57911
const SYSDATE = 57912
const SYSTEM_USER = 57913
const TRANSLATE = 57914
const TRIM = 57915
const VARIANCE = 57916
const VAR_POP = 57917
const VAR_SAMP = 57918
const AVG = 57919
const RANK = 57920
const ROW_NUMBER = 57921
const DENSE_RANK = 57922
const BIT_CAST = 57923
const BITMAP_BIT_POSITION = 57924
const BITMAP_BUCKET_NUMBER = 57925
const BITMAP_COUNT = 57926
const BITMAP_CONSTRUCT_AGG = 57927
const BITMAP_OR_AGG = 57928
const NEXTVAL = 57929
const SETVAL = 57930
const CURRVAL = 57931
const LASTVAL = 57932
const ARROW = 57933
const ROW = 57934
const OUTFILE = 57935
const HEADER = 57936
const MAX_FILE_SIZE = 57937
const FORCE_QUOTE = 57938
const PARALLEL = 57939
const STRICT = 57940
const UNUSED = 57941
const BINDINGS = 57942
const DO = 57943
const DECLARE = 57944
const LOOP = 57945
const WHILE = 57946
const LEAVE = 57947
const ITERATE = 57948
const UNTIL = 57949
const CALL = 57950
const PREV = 57951
const SLIDING = 57952
const FILL = 57953
const SPBEGIN = 57954
const BACKEND = 57955
const SERVERS = 57956
const HANDLER = 57957
const PERCENT = 57958
const SAMPLE = 57959
const MO_TS = 57960
const PITR = 57961
const CDC = 57962
const GROUPING = 57963
const SETS = 57964
const CUBE = 57965
const ROLLUP = 57966
const LOGSERVICE = 57967
const REPLICAS = 57968
const STORES = 57969
const SETTINGS = 57970
const KILL = 57971
const BACKUP = 57972
const FILESYSTEM = 57973
const PARALLELISM = 57974
const RESTORE = 57975
const QUERY_RESULT = 57976

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12697

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	11, 790,
	22, 790,
	-2, 783,
	-1, 161,
	243, 1212,
	245, 1111,
	-2, 1158,
	-1, 188,
	43, 613,
	245, 613,
	272, 620,
	273, 620,
	471, 613,
	-2, 648,
	-1, 228,
	655, 1983,
	-2, 517,
	-1, 535,
	655, 2105,
	-2, 398,
	-1, 593,
	655, 2164,
	-2, 396,
	-1, 594,
	655, 2165,
	-2, 397,
	-1, 595,
	655, 2166,
	-2, 399,
	-1, 733,
	324, 176,
	443, 176,
	444, 176,
	-2, 1885,
	-1, 800,
	85, 1670,
	-2, 2041,
	-1, 801,
	85, 1689,
	-2, 2012,
	-1, 805,
	85, 1690,
	-2, 2040,
	-1, 839,
	85, 1597,
	-2, 2242,
	-1, 840,
	85, 1598,
	-2, 2241,
	-1, 841,
	85, 1599,
	-2, 2231,
	-1, 842,
	85, 2203,
	-2, 2224,
	-1, 843,
	85, 2204,
	-2, 2225,
	-1, 844,
	85, 2205,
	-2, 2233,
	-1, 845,
	85, 2206,
	-2, 2213,
	-1, 846,
	85, 2207,
	-2, 2222,
	-1, 847,
	85, 2208,
	-2, 2234,
	-1, 848,
	85, 2209,
	-2, 2235,
	-1, 849,
	85, 2210,
	-2, 2240,
	-1, 850,
	85, 2211,
	-2, 2245,
	-1, 851,
	85, 2212,
	-2, 2246,
	-1, 852,
	85, 1666,
	-2, 2079,
	-1, 853,
	85, 1667,
	-2, 1869,
	-1, 854,
	85, 1668,
	-2, 2088,
	-1, 855,
	85, 1669,
	-2, 1878,
	-1, 857,
	85, 1672,
	-2, 1886,
	-1, 859,
	85, 1674,
	-2, 2112,
	-1, 861,
	85, 1677,
	-2, 1905,
	-1, 863,
	85, 1679,
	-2, 2124,
	-1, 864,
	85, 1680,
	-2, 2123,
	-1, 865,
	85, 1681,
	-2, 1950,
	-1, 866,
	85, 1682,
	-2, 2036,
	-1, 869,
	85, 1685,
	-2, 2135,
	-1, 871,
	85, 1687,
	-2, 2138,
	-1, 872,
	85, 1688,
	-2, 2140,
	-1, 873,
	85, 1691,
	-2, 2148,
	-1, 874,
	85, 1692,
	-2, 2021,
	-1, 875,
	85, 1693,
	-2, 2066,
	-1, 876,
	85, 1694,
	-2, 2031,
	-1, 877,
	85, 1695,
	-2, 2056,
	-1, 888,
	85, 1575,
	-2, 2236,
	-1, 889,
	85, 1576,
	-2, 2237,
	-1, 890,
	85, 1577,
	-2, 2238,
	-1, 990,
	466, 648,
	467, 648,
	-2, 614,
	-1, 1041,
	127, 1869,
	138, 1869,
	158, 1869,
	-2, 1843,
	-1, 1158,
	22, 817,
	-2, 766,
	-1, 1268,
	11, 790,
	22, 790,
	-2, 1452,
	-1, 1352,
	22, 817,
	-2, 766,
	-1, 1706,
	85, 1742,
	-2, 2038,
	-1, 1707,
	85, 1743,
	-2, 2039,
	-1, 1879,
	86, 983,
	-2, 989,
	-1, 2330,
	110, 1150,
	154, 1150,
	193, 1150,
	196, 1150,
	285, 1150,
	-2, 1143,
	-1, 2490,
	11, 790,
	22, 790,
	-2, 924,
	-1, 2524,
	86, 1829,
	159, 1829,
	-2, 2023,
	-1, 2525,
	86, 1829,
	159, 1829,
	-2, 2022,
	-1, 2526,
	86, 1805,
	159, 1805,
	-2, 2009,
	-1, 2527,
	86, 1806,
	159, 1806,
	-2, 2014,
	-1, 2528,
	86, 1807,
	159, 1807,
	-2, 1938,
	-1, 2529,
	86, 1808,
	159, 1808,
	-2, 1932,
	-1, 2530,
	86, 1809,
	159, 1809,
	-2, 1859,
	-1, 2531,
	86, 1810,
	159, 1810,
	-2, 2011,
	-1, 2532,
	86, 1811,
	159, 1811,
	-2, 1936,
	-1, 2533,
	86, 1812,
	159, 1812,
	-2, 1931,
	-1, 2534,
	86, 1813,
	159, 1813,
	-2, 1919,
	-1, 2535,
	86, 1829,
	159, 1829,
	-2, 1920,
	-1, 2536,
	86, 1829,
	159, 1829,
	-2, 1921,
	-1, 2538,
	86, 1818,
	159, 1818,
	-2, 2056,
	-1, 2539,
	86, 1795,
	159, 1795,
	-2, 2041,
	-1, 2540,
	86, 1827,
	159, 1827,
	-2, 2012,
	-1, 2541,
	86, 1827,
	159, 1827,
	-2, 2040,
	-1, 2542,
	86, 1827,
	159, 1827,
	-2, 1887,
	-1, 2543,
	86, 1825,
	159, 1825,
	-2, 2031,
	-1, 2544,
	86, 1822,
	159, 1822,
	-2, 1910,
	-1, 2545,
	85, 1776,
	86, 1776,
	159, 1776,
	401, 1776,
	402, 1776,
	403, 1776,
	-2, 1858,
	-1, 2546,
	85, 1777,
	86, 1777,
	159, 1777,
	401, 1777,
	402, 1777,
	403, 1777,
	-2, 1860,
	-1, 2547,
	85, 1778,
	86, 1778,
	159, 1778,
	401, 1778,
	402, 1778,
	403, 1778,
	-2, 2084,
	-1, 2548,
	85, 1780,
	86, 1780,
	159, 1780,
	401, 1780,
	402, 1780,
	403, 1780,
	-2, 2013,
	-1, 2549,
	85, 1782,
	86, 1782,
	159, 1782,
	401, 1782,
	402, 1782,
	403, 1782,
	-2, 1993,
	-1, 2550,
	85, 1784,
	86, 1784,
	159, 1784,
	401, 1784,
	402, 1784,
	403, 1784,
	-2, 1937,
	-1, 2551,
	85, 1786,
	86, 1786,
	159, 1786,
	401, 1786,
	402, 1786,
	403, 1786,
	-2, 1915,
	-1, 2552,
	85, 1787,
	86, 1787,
	159, 1787,
	401, 1787,
	402, 1787,
	403, 1787,
	-2, 1916,
	-1, 2553,
	85, 1789,
	86, 1789,
	159, 1789,
	401, 1789,
	402, 1789,
	403, 1789,
	-2, 1857,
	-1, 2554,
	86, 1832,
	159, 1832,
	401, 1832,
	402, 1832,
	403, 1832,
	-2, 1892,
	-1, 2555,
	86, 1832,
	159, 1832,
	401, 1832,
	402, 1832,
	403, 1832,
	-2, 1906,
	-1, 2556,
	86, 1835,
	159, 1835,
	401, 1835,
	402, 1835,
	403, 1835,
	-2, 1888,
	-1, 2557,
	86, 1835,
	159, 1835,
	401, 1835,
	402, 1835,
	403, 1835,
	-2, 1953,
	-1, 2558,
	86, 1832,
	159, 1832,
	401, 1832,
	402, 1832,
	403, 1832,
	-2, 1975,
	-1, 2775,
	110, 1150,
	154, 1150,
	193, 1150,
	196, 1150,
	285, 1150,
	-2, 1144,
	-1, 2793,
	83, 710,
	159, 710,
	-2, 1328,
	-1, 3216,
	196, 1150,
	309, 1415,
	-2, 1387,
	-1, 3398,
	110, 1150,
	154, 1150,
	193, 1150,
	196, 1150,
	-2, 1268,
	-1, 3400,
	110, 1150,
	154, 1150,
	193, 1150,
	196, 1150,
	-2, 1268,
	-1, 3412,
	83, 710,
	159, 710,
	-2, 1328,
	-1, 3433,
	196, 1150,
	309, 1415,
	-2, 1388,
	-1, 3585,
	110, 1150,
	154, 1150,
	193, 1150,
	196, 1150,
	-2, 1269,
	-1, 3613,
	86, 1230,
	159, 1230,
	-2, 1150,
	-1, 3757,
	86, 1230,
	159, 1230,
	-2, 1150,
	-1, 3921,
	86, 1234,
	159, 1234,
	-2, 1150,
	-1, 3972,
	86, 1235,
	159, 1235,
	-2, 1150,
}

const yyPrivate = 57344

const yyLast = 52810

var yyAct = [...]int{
	767, 743, 4022, 769, 3994, 2823, 217, 4014, 1608, 3925,
	1964, 3418, 3517, 3931, 3924, 3932, 1686, 3823, 3757, 3881,
	3846, 3202, 3235, 752, 3804, 3308, 2817, 3641, 3447, 1682,
	3735, 3705, 745, 3795, 1304, 3756, 3309, 3573, 1746, 3824,
	2735, 3674, 1520, 3726, 797, 2820, 633, 1159, 1452, 1040,
	3521, 3380, 3805, 1458, 3807, 3385, 3512, 1912, 3211, 2377,
	651, 1733, 657, 657, 3434, 1689, 3594, 2796, 657, 675,
	684, 3582, 3173, 684, 37, 3159, 3555, 3401, 3133, 3306,
	2932, 202, 3587, 2933, 3162, 2931, 3370, 2061, 2912, 2846,
	1751, 3231, 3213, 3220, 3403, 2928, 2522, 3350, 2074, 2097,
	2172, 3001, 2648, 2130, 2520, 2023, 3294, 2960, 2484, 2380,
	696, 3144, 3273, 2764, 3140, 137, 3138, 3219, 2341, 2776,
	65, 3136, 2058, 692, 2613, 3135, 3182, 1149, 36, 1153,
	740, 2309, 1597, 3134, 3131, 735, 2410, 2286, 3048, 1924,
	1609, 2285, 3108, 681, 1513, 2155, 2139, 2168, 2592, 2138,
	2131, 1593, 1844, 2974, 2103, 2984, 2054, 2574, 2027, 2167,
	2485, 2468, 1586, 1598, 962, 1601, 2024, 2848, 2753, 2748,
	2463, 2828, 1954, 2378, 2788, 213, 8, 2330, 2340, 212,
	7, 6, 2518, 1888, 2202, 1747, 1680, 2169, 1560, 650,
	1034, 1418, 744, 633, 1097, 1529, 1498, 2321, 1492, 2373,
	1462, 1385, 2179, 734, 1740, 1720, 1671, 1175, 753, 1441,
	27, 2134, 2137, 1612, 2119, 1629, 1567, 217, 689, 217,
	1884, 1088, 1089, 1923, 2685, 2093, 1033, 1679, 657, 1497,
	2492, 1887, 961, 1551, 1461, 2464, 632, 666, 999, 892,
	1437, 1752, 16, 742, 1559, 698, 1453, 203, 1494, 1428,
	683, 1374, 15, 699, 1748, 938, 944, 1305, 195, 111,
	33, 24, 985, 17, 199, 2684, 1350, 959, 695, 2176,
	3814, 741, 10, 23, 653, 894, 736, 895, 3723, 680,
	14, 1236, 1237, 1238, 1235, 2721, 669, 2721, 2721, 1685,
	952, 1085, 953, 3415, 1236, 1237, 1238, 1235, 1084, 3018,
	1086, 2494, 3189, 3017, 2186, 1154, 3548, 3388, 1155, 3301,
	2636, 676, 1046, 1236, 1237, 1238, 1235, 1049, 1067, 1857,
	2577, 679, 2580, 687, 662, 1048, 1574, 1081, 2578, 677,
	201, 933, 2575, 1570, 652, 1080, 2284, 658, 1369, 1496,
	1421, 1422, 1423, 1343, 3782, 947, 914, 943, 1081, 678,
	912, 1424, 2290, 1858, 1081, 1621, 3118, 2294, 1372, 3101,
	3098, 3103, 3100, 4006, 200, 61, 191, 162, 1475, 1851,
	1365, 736, 1572, 3510, 1154, 2997, 1620, 8, 2995, 2108,
	3790, 7, 192, 1079, 3681, 3675, 3513, 1019, 3307, 183,
	1068, 2713, 2711, 193, 2152, 1299, 3809, 969, 2133, 1236,
	1237, 1238, 1235, 924, 893, 1236, 1237, 1238, 1235, 3077,
	2125, 2418, 136, 200, 4028, 3803, 904, 4003, 3689, 1234,
	200, 1198, 200, 1380, 3560, 2622, 2331, 122, 3742, 2173,
	200, 1616, 3960, 200, 200, 2715, 196, 3556, 1627, 2630,
	3402, 2332, 3527, 1607, 2782, 913, 3801, 3710, 3687, 911,
	3907, 2666, 200, 61, 191, 162, 3857, 1375, 1537, 1379,
	1378, 1613, 1377, 1062, 1057, 1052, 1056, 1060, 1624, 966,
	967, 1044, 3743, 1045, 914, 3075, 949, 912, 942, 200,
	1009, 3020, 3009, 1050, 1381, 1615, 694, 946, 945, 1393,
	1410, 1065, 1626, 2184, 2780, 1055, 2926, 1860, 2325, 2512,
	2737, 3712, 196, 1233, 927, 196, 196, 2071, 934, 2968,
	2969, 2513, 1672, 144, 145, 1676, 146, 147, 2038, 2039,
	200, 61, 191, 162, 196, 905, 2499, 136, 941, 2498,
	1652, 2967, 2500, 1014, 1012, 1499, 1013, 1501, 2738, 1675,
	909, 3102, 3099, 2037, 2783, 2593, 1063, 951, 1869, 1870,
	1008, 196, 940, 1938, 1471, 1066, 939, 1472, 1688, 1449,
	1459, 1460, 926, 1011, 3935, 3936, 1010, 1231, 932, 1043,
	200, 61, 191, 162, 3537, 1042, 883, 1053, 882, 884,
	885, 3812, 886, 887, 1170, 161, 189, 198, 190, 120,
	930, 3206, 196, 3204, 3812, 3895, 200, 61, 191, 162,
	1226, 1064, 2750, 3811, 995, 3811, 3894, 3810, 188, 182,
	181, 3904, 2751, 970, 2273, 67, 3959, 1573, 1571, 200,
	61, 191, 162, 1392, 1020, 1677, 3810, 3893, 950, 200,
	61, 191, 162, 1457, 3900, 3886, 3883, 1456, 1459, 1460,
	972, 1054, 196, 2716, 3310, 1474, 1016, 1786, 3883, 1674,
	3678, 200, 3998, 3999, 931, 657, 657, 3003, 3793, 3004,
	1638, 2749, 3796, 3797, 3798, 3799, 657, 1163, 196, 3002,
	3310, 1692, 2617, 161, 1661, 198, 184, 185, 186, 2739,
	1164, 2188, 2055, 1167, 3820, 3323, 684, 684, 2045, 657,
	3565, 196, 3371, 1667, 3909, 3910, 188, 3378, 2867, 136,
	2049, 196, 2180, 2453, 2320, 994, 992, 3905, 3906, 194,
	1018, 2116, 3155, 950, 3536, 3145, 2740, 3038, 1061, 1580,
	1579, 3934, 3538, 196, 1229, 1230, 2756, 991, 1091, 3459,
	132, 948, 3714, 3715, 187, 3902, 133, 3511, 3036, 965,
	3697, 2627, 3698, 1228, 187, 681, 681, 681, 2416, 2185,
	971, 1004, 1276, 1201, 1058, 2996, 730, 1059, 2714, 732,
	1368, 1447, 2069, 2070, 731, 3813, 1673, 2918, 1485, 3354,
	937, 3719, 2455, 3722, 1000, 3562, 1394, 2456, 2457, 3160,
	3326, 3474, 3042, 2720, 1178, 1181, 1156, 1017, 1155, 1046,
	1691, 1690, 3149, 134, 1049, 1173, 3700, 1155, 2461, 1163,
	1155, 2163, 1048, 1223, 1193, 2515, 60, 3668, 1473, 2174,
	1001, 1005, 649, 2174, 1224, 1225, 3153, 2174, 3234, 2291,
	1859, 1622, 3019, 3471, 3967, 3208, 3171, 3699, 3232, 3233,
	988, 1308, 986, 990, 1008, 3016, 2175, 1081, 987, 984,
	983, 907, 989, 974, 975, 973, 976, 977, 978, 979,
	1081, 1006, 3528, 1007, 2207, 62, 1081, 1069, 1051, 1081,
	3183, 1081, 1046, 1081, 1002, 1003, 2187, 1049, 2733, 1155,
	925, 923, 3150, 3151, 3741, 1048, 1178, 1181, 3747, 908,
	3839, 680, 680, 680, 1698, 1701, 1702, 1270, 3152, 3739,
	142, 197, 3161, 143, 3834, 1699, 2789, 3669, 163, 2914,
	2448, 998, 3908, 58, 2576, 686, 2734, 997, 3147, 1371,
	1575, 1373, 685, 676, 676, 676, 2924, 2327, 3688, 893,
	3464, 1162, 993, 679, 679, 679, 1015, 1390, 651, 1151,
	1158, 677, 677, 677, 3713, 3825, 1186, 1187, 1157, 1348,
	1045, 3109, 1353, 3419, 1190, 1169, 3841, 163, 1182, 682,
	3561, 678, 678, 678, 163, 2712, 163, 1166, 1168, 1171,
	3847, 962, 1192, 1277, 163, 2631, 1376, 163, 163, 135,
	45, 3426, 1459, 1460, 1459, 1460, 59, 1861, 1662, 197,
	5, 1663, 3203, 1180, 1179, 1218, 163, 1448, 1219, 693,
	2822, 1272, 1273, 1274, 1275, 1172, 3709, 139, 140, 682,
	996, 141, 3161, 1436, 3237, 3363, 968, 963, 2305, 3361,
	3122, 62, 964, 163, 2451, 657, 1221, 3819, 1487, 737,
	910, 2056, 657, 4034, 3475, 682, 633, 633, 3156, 1213,
	3146, 3632, 1214, 1455, 3039, 3621, 633, 633, 2396, 3748,
	1524, 1524, 2755, 657, 2376, 2399, 2428, 4017, 682, 3716,
	3740, 3901, 3693, 1309, 163, 3209, 3806, 2427, 682, 3524,
	1216, 62, 2515, 3566, 684, 1552, 651, 1320, 1321, 1522,
	1522, 1563, 1563, 3362, 1184, 1180, 1179, 2762, 2191, 2193,
	2194, 1206, 217, 1526, 1208, 2046, 2868, 62, 2869, 2870,
	1668, 633, 1531, 3627, 2449, 2450, 2896, 2048, 1217, 2759,
	2760, 1509, 2398, 1508, 163, 2818, 2819, 1191, 2822, 1434,
	62, 3148, 1209, 2383, 2758, 1451, 1450, 1391, 1433, 1432,
	62, 3232, 3233, 3848, 3727, 3761, 1387, 1388, 3212, 1700,
	163, 1150, 1397, 1398, 1399, 1400, 1401, 1222, 1403, 3923,
	3097, 2419, 1211, 1605, 1409, 3404, 2376, 2397, 1610, 3508,
	2383, 2386, 952, 163, 953, 1619, 1386, 1486, 1267, 2393,
	1354, 1352, 1220, 163, 3642, 3643, 3644, 3648, 3646, 3647,
	3645, 2768, 2771, 2772, 2773, 2769, 2770, 1438, 1442, 1442,
	1442, 3313, 1518, 1519, 1650, 163, 1396, 4018, 1443, 1444,
	694, 2962, 2964, 3697, 1202, 3698, 3880, 3236, 1524, 1495,
	1524, 1163, 1438, 1438, 3228, 1628, 1212, 2979, 2980, 3113,
	2623, 3692, 2504, 2414, 2177, 1420, 1503, 1505, 1430, 1198,
	1204, 2383, 2386, 2044, 1614, 2021, 1516, 1517, 1417, 1581,
	1402, 1625, 1207, 1210, 1082, 1083, 3264, 2386, 2726, 1087,
	3041, 1863, 1476, 1477, 681, 3634, 1408, 681, 681, 3700,
	1463, 1407, 2382, 1466, 1406, 1553, 3760, 2384, 1203, 3364,
	1660, 1584, 1405, 1587, 1588, 2203, 1021, 688, 1524, 3229,
	1049, 1595, 1596, 2189, 2190, 1589, 1590, 1049, 2865, 1618,
	3699, 1576, 1507, 1215, 2387, 1163, 1750, 954, 3623, 2382,
	2376, 2381, 3622, 2379, 2384, 2304, 3351, 1734, 1781, 1782,
	1799, 1785, 1600, 1538, 1009, 1604, 1603, 1197, 662, 1800,
	1532, 2385, 1415, 1544, 1550, 2730, 1564, 2298, 1427, 3922,
	4015, 4016, 1807, 2192, 1809, 1435, 1810, 1811, 1812, 1565,
	3628, 3629, 1445, 3050, 3049, 1205, 1384, 1072, 1077, 1078,
	1464, 1465, 1395, 1467, 1468, 1872, 1469, 1684, 2385, 2897,
	2899, 2900, 2901, 2898, 1873, 2387, 3546, 956, 957, 958,
	2382, 2376, 2381, 2963, 2379, 2384, 3115, 1163, 2887, 2888,
	2387, 2392, 1703, 1862, 2297, 2390, 2371, 1865, 1871, 1867,
	680, 1665, 1784, 680, 680, 915, 1874, 1011, 1876, 1877,
	1010, 1645, 1646, 1552, 2300, 2299, 1658, 1842, 1885, 1524,
	1890, 1891, 3595, 1893, 1487, 657, 1631, 1382, 1383, 951,
	657, 2440, 676, 1524, 3314, 676, 676, 962, 1009, 2385,
	1913, 916, 679, 4036, 3890, 679, 679, 3188, 1655, 4030,
	677, 1429, 1524, 677, 677, 1789, 1790, 1791, 1487, 1845,
	1429, 1636, 1678, 675, 1639, 1659, 1798, 1657, 1805, 1656,
	678, 1806, 1683, 678, 678, 1687, 1637, 1160, 1653, 1640,
	1641, 2794, 3169, 1937, 2727, 1234, 1654, 1864, 1819, 1820,
	1722, 2096, 1944, 1944, 3230, 1487, 2312, 1487, 1487, 1022,
	1670, 657, 657, 1649, 2011, 1885, 2015, 1681, 1841, 1524,
	2018, 2019, 1648, 2241, 2886, 2034, 2240, 633, 1669, 2313,
	2314, 1011, 2182, 2795, 1010, 3693, 3270, 1729, 1730, 3694,
	1160, 633, 1892, 1524, 2515, 4024, 1009, 4012, 3266, 1198,
	1941, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1074, 1075, 1076, 919, 1731, 1732, 3974,
	657, 1885, 1524, 1894, 2079, 2356, 657, 657, 657, 692,
	692, 3946, 1236, 1237, 1238, 1235, 2089, 2090, 2091, 2092,
	2413, 2482, 2595, 2098, 1813, 1966, 3943, 3937, 1848, 1234,
	217, 2013, 2483, 217, 217, 1196, 217, 3367, 3325, 3919,
	2072, 3270, 897, 898, 899, 900, 1808, 918, 4025, 1843,
	3975, 921, 920, 3170, 2323, 1881, 1882, 1883, 3073, 1011,
	1849, 2278, 1010, 2795, 2622, 1234, 3241, 1896, 1897, 1898,
	1899, 3239, 3975, 2094, 1947, 3107, 1799, 1799, 2141, 3105,
	2050, 1853, 1198, 3874, 3947, 3873, 1880, 1799, 1799, 897,
	898, 899, 900, 1438, 2157, 1236, 1237, 1238, 1235, 3944,
	2217, 2064, 2065, 3867, 2081, 2082, 2083, 1442, 2041, 1910,
	2043, 2107, 3920, 2078, 2110, 2111, 1930, 2113, 1349, 1442,
	2057, 2062, 2063, 1909, 2483, 3842, 2982, 1913, 1935, 1915,
	1916, 1524, 2171, 1920, 1914, 1946, 1925, 2151, 1927, 1928,
	1926, 2355, 1195, 1236, 1237, 1238, 1235, 2035, 1889, 2483,
	3830, 3780, 1934, 1614, 2742, 1929, 1234, 3779, 1234, 3774,
	1948, 1949, 1905, 3773, 3772, 2012, 3771, 1943, 1945, 1535,
	2717, 1936, 2322, 2612, 1939, 1940, 2217, 681, 3751, 3750,
	2017, 1918, 2600, 2173, 2165, 2022, 3725, 3480, 2147, 2213,
	2036, 1046, 2040, 902, 2042, 3428, 1049, 2051, 2182, 1049,
	2369, 3394, 1046, 3343, 1048, 2283, 2277, 1049, 3339, 2143,
	3249, 2957, 2703, 2691, 2683, 1048, 2638, 2620, 1239, 1196,
	2608, 2076, 2136, 3831, 3781, 2216, 1269, 2084, 2085, 2077,
	2345, 2276, 2217, 2136, 2248, 1279, 2217, 2217, 1889, 2217,
	902, 2656, 2602, 2104, 2164, 1921, 1922, 2067, 2597, 2020,
	2102, 2182, 2182, 2589, 1416, 1236, 1237, 1238, 1235, 2217,
	2515, 1288, 1931, 1932, 2587, 2585, 1737, 2121, 3429, 1141,
	1137, 1138, 1139, 1140, 3395, 2661, 3344, 2660, 2659, 2657,
	2583, 3340, 1942, 3250, 2483, 2345, 1234, 1234, 2344, 1234,
	2345, 1681, 2142, 2598, 2279, 2255, 2254, 1913, 2148, 1046,
	2150, 2215, 1510, 2239, 1049, 2230, 2229, 2153, 4043, 4026,
	3415, 2161, 1048, 680, 2228, 2603, 2986, 770, 780, 2288,
	2289, 2598, 2292, 2218, 2196, 2295, 2590, 771, 2181, 772,
	776, 779, 775, 773, 774, 1642, 2166, 2588, 2584, 735,
	2797, 2219, 657, 657, 657, 676, 2658, 2625, 2624, 2616,
	2363, 2236, 3377, 2584, 2271, 679, 2221, 657, 657, 657,
	657, 2345, 2162, 677, 2101, 2087, 3658, 2278, 1234, 1234,
	2342, 1633, 2159, 2195, 1285, 2204, 1234, 3478, 1234, 1234,
	2348, 1487, 777, 678, 917, 1183, 1267, 1234, 1147, 2160,
	2197, 1142, 2066, 1722, 1251, 1425, 2217, 3193, 3033, 1426,
	1514, 2182, 4037, 4002, 2209, 2411, 3184, 1487, 1643, 3815,
	3724, 1515, 1788, 1787, 778, 2249, 2250, 3835, 2252, 3685,
	1788, 1787, 3625, 3596, 2405, 2259, 3624, 3407, 3405, 2198,
	2199, 1814, 1815, 1816, 1817, 3610, 3569, 1821, 1822, 1823,
	1824, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1254, 1255, 1256, 1257, 1258, 1251, 1470, 2200,
	2201, 3836, 1480, 1481, 1512, 1483, 1484, 3597, 1488, 1489,
	1490, 3408, 3406, 3387, 3271, 3262, 2412, 3299, 3256, 3251,
	1439, 657, 1944, 3164, 2921, 2920, 3185, 2662, 2663, 2575,
	2487, 2487, 2034, 2487, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1251, 1539, 1540, 1541, 1542, 1543, 2645, 1545, 1546,
	1547, 1548, 1549, 633, 633, 2569, 1555, 1556, 1557, 1558,
	1728, 1163, 2272, 2274, 2275, 2280, 1825, 1524, 657, 2360,
	3186, 2766, 922, 2362, 1818, 2364, 1725, 1727, 1724, 2375,
	1726, 657, 2306, 2374, 2722, 2635, 2365, 1163, 2559, 651,
	1562, 1562, 2324, 1308, 1772, 1563, 2510, 2034, 2601, 2506,
	2564, 1425, 2566, 2146, 2145, 1426, 217, 1511, 2417, 2144,
	1412, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 1411, 1165,
	2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438,
	2439, 2105, 2441, 2442, 2443, 2444, 2445, 2491, 2446, 2489,
	1440, 2493, 1442, 2368, 2349, 1741, 2605, 1046, 1741, 2988,
	2210, 2361, 1049, 1236, 1237, 1238, 1235, 3892, 2388, 2389,
	1048, 2394, 3300, 2618, 2501, 2352, 2502, 2171, 1238, 1235,
	2358, 2350, 2351, 2359, 1524, 1568, 1524, 2105, 1524, 2517,
	2495, 2353, 2354, 1163, 1875, 2507, 2508, 2570, 2614, 2615,
	1235, 2637, 1259, 1260, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1251, 2563, 3637, 3636, 2628, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1240, 3005, 2458, 2857, 1524, 1163, 2462,
	3928, 2855, 2669, 1236, 1237, 1238, 1235, 1236, 1237, 1238,
	1235, 2834, 2832, 2496, 3302, 3570, 3571, 2676, 2579, 3616,
	1287, 4008, 1524, 1503, 1505, 4007, 1522, 1236, 1237, 1238,
	1235, 3950, 2765, 1286, 1693, 1694, 1695, 1696, 1697, 2664,
	4033, 1768, 3918, 2511, 1236, 1237, 1238, 1235, 1765, 3917,
	3563, 1522, 1767, 1764, 1766, 1770, 1771, 2705, 2560, 2706,
	1769, 3837, 2736, 2562, 2677, 3375, 2357, 3776, 2514, 3764,
	3754, 2724, 2725, 3744, 3676, 2728, 1738, 2680, 2681, 2908,
	1742, 1743, 1744, 1745, 1236, 1237, 1238, 1235, 2906, 2649,
	1783, 2649, 1163, 2647, 3599, 1309, 1163, 2653, 1793, 1236,
	1237, 1238, 1235, 1524, 1803, 4032, 1487, 2904, 2571, 2634,
	3564, 3598, 2015, 2893, 3420, 3381, 2643, 2629, 3409, 1804,
	2793, 2523, 2232, 2561, 2667, 3376, 2799, 1236, 1237, 1238,
	1235, 3374, 2568, 3066, 2621, 3252, 1569, 2619, 3154, 2907,
	2626, 3029, 3000, 2999, 2809, 3386, 2709, 2610, 2905, 2891,
	2890, 1846, 2889, 2881, 1163, 2875, 2874, 1236, 1237, 1238,
	1235, 2873, 2831, 2639, 2640, 1568, 2872, 2903, 2718, 1163,
	1163, 1163, 1944, 2892, 2591, 1163, 2503, 2841, 2842, 2843,
	2844, 1163, 2851, 2665, 2852, 2853, 2282, 2854, 2781, 2856,
	2655, 2231, 2124, 2777, 2123, 3065, 2122, 2778, 2118, 2117,
	2851, 2073, 1868, 1866, 1775, 1776, 1777, 1778, 1779, 1780,
	1773, 1774, 2487, 1634, 1367, 2790, 3139, 2632, 1236, 1237,
	1238, 1235, 1236, 1237, 1238, 1235, 2909, 2642, 3542, 1917,
	3717, 3718, 1966, 1506, 1049, 1145, 633, 2752, 2800, 4029,
	4027, 3518, 2015, 1681, 2812, 2763, 1163, 2034, 2034, 2034,
	2034, 2034, 2034, 4000, 1933, 1236, 1237, 1238, 1235, 1236,
	1237, 1238, 1235, 1163, 2034, 3966, 3965, 2487, 730, 2829,
	3962, 732, 2915, 2829, 3898, 2810, 731, 3897, 2744, 3706,
	3530, 3878, 3822, 2965, 3574, 1524, 2761, 2825, 2745, 3800,
	2747, 2784, 2675, 2032, 1144, 2678, 657, 657, 2792, 8,
	2686, 2687, 2836, 7, 3791, 2798, 2692, 1236, 1237, 1238,
	1235, 3529, 3768, 1846, 2080, 3052, 4035, 3763, 1846, 1846,
	3762, 2811, 2814, 3721, 3708, 3707, 3677, 3618, 3578, 2863,
	2864, 2827, 3567, 3549, 3547, 2833, 3468, 3544, 1236, 1237,
	1238, 1235, 2839, 2953, 2879, 2880, 2743, 3541, 3540, 3516,
	2523, 3514, 217, 3488, 3485, 656, 656, 217, 3482, 2913,
	3373, 664, 2830, 1236, 1237, 1238, 1235, 2871, 2106, 3372,
	2917, 2109, 2883, 3369, 2112, 3359, 2808, 2114, 3352, 1799,
	3336, 1799, 2802, 3334, 3015, 3329, 3259, 2805, 1236, 1237,
	1238, 1235, 1889, 1236, 1237, 1238, 1235, 3028, 2966, 3258,
	2983, 3253, 2916, 1524, 3247, 3246, 3035, 2922, 2826, 3165,
	3126, 3125, 3331, 2935, 2936, 2937, 2938, 2939, 2940, 3069,
	3121, 2950, 2954, 2826, 2837, 2838, 2919, 2956, 3119, 2840,
	3068, 3117, 2156, 2989, 3114, 2847, 3112, 2287, 2993, 1236,
	1237, 1238, 1235, 2973, 2970, 3043, 1236, 1237, 1238, 1235,
	3040, 2998, 3010, 2972, 2902, 2894, 2955, 1236, 1237, 1238,
	1235, 2884, 2882, 3021, 1845, 2878, 2877, 3067, 1588, 3014,
	2876, 2731, 2824, 1595, 1596, 2214, 2723, 2719, 1589, 1590,
	2611, 2801, 2301, 3012, 838, 837, 3988, 2296, 2293, 2127,
	2806, 2807, 2120, 3022, 1236, 1237, 1238, 1235, 1049, 1600,
	2934, 1856, 1604, 1603, 2987, 2224, 1855, 2990, 3116, 1049,
	3037, 2991, 1635, 1316, 3032, 3120, 1312, 2934, 1311, 3123,
	3124, 664, 1148, 906, 3854, 3011, 3006, 1163, 3850, 3008,
	3013, 3702, 3701, 3142, 3690, 3686, 3543, 2206, 3025, 3525,
	3024, 2211, 3400, 3158, 3023, 3399, 3398, 3366, 657, 2220,
	3031, 3348, 3045, 1236, 1237, 1238, 1235, 3346, 3044, 3345,
	3174, 1163, 3342, 3341, 657, 3335, 1163, 1163, 3333, 3315,
	3051, 3305, 3057, 3064, 3059, 2034, 2342, 200, 3192, 191,
	162, 3060, 3061, 3304, 3290, 3289, 2227, 3194, 3106, 3129,
	3104, 2212, 3058, 3071, 2234, 3062, 3054, 2405, 3053, 3055,
	3056, 1236, 1237, 1238, 1235, 3047, 2981, 3168, 2741, 3218,
	2586, 3221, 2582, 3221, 3221, 2581, 2251, 2260, 1163, 2253,
	3128, 2256, 2257, 2258, 2247, 2246, 2261, 2262, 2263, 2264,
	2265, 2266, 2267, 2268, 2269, 2270, 3242, 3177, 2777, 3111,
	2245, 2244, 3181, 3110, 1524, 1524, 2242, 3238, 2238, 196,
	200, 2237, 3205, 3207, 3127, 2235, 2226, 2223, 782, 138,
	2222, 2126, 1839, 1838, 138, 1837, 1802, 1801, 3201, 1236,
	1237, 1238, 1235, 1522, 1522, 3167, 1046, 1792, 1536, 1534,
	3190, 1049, 3987, 1049, 3949, 3872, 3243, 3244, 1049, 1048,
	1306, 657, 3849, 3786, 3191, 3176, 3783, 3770, 3142, 3187,
	3179, 3180, 3217, 3216, 3765, 3671, 3670, 1487, 3652, 3226,
	2015, 2015, 3635, 3631, 1049, 3196, 3609, 2375, 3200, 3593,
	3498, 2374, 196, 3496, 663, 3866, 2702, 138, 3078, 3079,
	3222, 3223, 2701, 3466, 3080, 3081, 3082, 3083, 3465, 3084,
	3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094,
	2700, 3227, 3240, 1236, 1237, 1238, 1235, 2699, 3462, 1236,
	1237, 1238, 1235, 1163, 3461, 3427, 3424, 2669, 3422, 3389,
	3063, 1583, 1594, 1585, 1599, 1602, 3303, 1236, 1237, 1238,
	1235, 2826, 1591, 1419, 1236, 1237, 1238, 1235, 2910, 3248,
	1250, 1249, 1259, 1260, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1251, 2835, 2786, 2785, 3267, 3268, 2779, 2746, 2243,
	2704, 2596, 3255, 3254, 3260, 2826, 3224, 3261, 2505, 2447,
	2826, 2826, 657, 2952, 3755, 2343, 2315, 2281, 3864, 2698,
	3278, 3195, 3279, 1723, 196, 2086, 3197, 3198, 1879, 1852,
	1666, 1846, 1617, 1846, 3257, 1592, 3265, 3283, 1366, 1351,
	1347, 1346, 3286, 3287, 3288, 1047, 1236, 1237, 1238, 1235,
	138, 1345, 1846, 1846, 1344, 1343, 1342, 3292, 1341, 1340,
	1339, 1338, 2826, 2697, 3298, 138, 1337, 138, 1250, 1249,
	1259, 1260, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251,
	2696, 1336, 1335, 3316, 1562, 2098, 3356, 2695, 1334, 3358,
	1236, 1237, 1238, 1235, 3317, 1333, 3318, 1332, 3281, 2694,
	1331, 1330, 1329, 3322, 1328, 1327, 1326, 1236, 1237, 1238,
	1235, 3321, 1325, 3337, 1236, 1237, 1238, 1235, 2693, 2649,
	1324, 1323, 1322, 1484, 1319, 3327, 1236, 1237, 1238, 1235,
	3199, 657, 2015, 3360, 2604, 2690, 2607, 1318, 656, 1152,
	1317, 1315, 3393, 1314, 1313, 1236, 1237, 1238, 1235, 1161,
	1310, 1303, 3269, 1302, 1300, 1299, 1298, 1297, 2487, 2034,
	3412, 2689, 1236, 1237, 1238, 1235, 1296, 1295, 3349, 1294,
	1293, 1292, 1189, 3282, 1291, 3365, 1290, 1289, 3353, 1284,
	1283, 1282, 3368, 3430, 3355, 1281, 1163, 1280, 1236, 1237,
	1238, 1235, 1200, 1146, 3862, 3218, 3274, 3275, 3860, 1163,
	2646, 3280, 3463, 2652, 2688, 2347, 2329, 2523, 1188, 3980,
	1163, 3978, 3477, 3933, 2670, 2671, 1524, 3277, 2767, 2516,
	2129, 1049, 2673, 2674, 1199, 2943, 2951, 3384, 1049, 3382,
	3414, 1236, 1237, 1238, 1235, 657, 2942, 2015, 2679, 2947,
	2949, 1163, 2477, 2478, 2948, 1522, 3460, 1249, 1259, 1260,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251, 3479, 2944,
	3891, 2941, 3500, 3802, 3411, 3417, 3410, 1693, 1846, 3453,
	3501, 217, 3614, 2682, 2945, 3390, 3391, 3392, 2672, 2946,
	2609, 3396, 3397, 121, 1163, 3489, 2599, 3492, 3467, 1413,
	3469, 3472, 64, 63, 1907, 1908, 3502, 3163, 3027, 3476,
	1236, 1237, 1238, 1235, 3473, 1236, 1237, 1238, 1235, 3481,
	3319, 3320, 3484, 3483, 3293, 3214, 3487, 3215, 2415, 3499,
	2004, 1577, 3491, 2594, 3493, 3545, 2668, 2633, 2859, 3494,
	1902, 1903, 1904, 3490, 3552, 2860, 2861, 2862, 1163, 2614,
	2615, 2302, 1630, 1611, 3523, 2803, 2804, 2644, 2088, 659,
	3486, 1194, 3509, 1236, 1237, 1238, 1235, 1736, 660, 661,
	1163, 1524, 1524, 3137, 3519, 3130, 3174, 2813, 3520, 2787,
	2367, 2338, 3550, 3551, 1236, 1237, 1238, 1235, 1911, 3586,
	1878, 3586, 1788, 1787, 1236, 1237, 1238, 1235, 1362, 1363,
	1522, 1734, 3991, 1163, 3603, 1163, 1360, 1361, 3575, 3580,
	3581, 1358, 1359, 3576, 1356, 1357, 3767, 3504, 3245, 3606,
	3413, 3608, 1524, 2459, 3557, 3559, 3558, 2454, 2016, 3416,
	1479, 1478, 1227, 3577, 3285, 2975, 2303, 2158, 3568, 1431,
	657, 3554, 1163, 1163, 1404, 3590, 1163, 1163, 3579, 1454,
	3431, 1734, 3591, 3583, 3956, 3954, 3421, 3911, 3423, 3539,
	3414, 3888, 3887, 3470, 3602, 3885, 3826, 3787, 3612, 3666,
	3665, 3654, 3649, 3460, 2847, 3604, 3515, 1913, 3615, 3663,
	3639, 3640, 3338, 3619, 3650, 3651, 3312, 3311, 3296, 2400,
	2370, 3672, 3673, 1632, 3295, 1846, 3453, 2985, 1429, 1049,
	3982, 3981, 3982, 3357, 1524, 2934, 3030, 2729, 1482, 2331,
	2225, 1370, 1185, 3981, 3633, 1493, 3291, 1160, 204, 3,
	1446, 3660, 2143, 3659, 72, 2, 4004, 3703, 4005, 138,
	138, 138, 1047, 1522, 3661, 1, 1530, 2710, 1850, 3696,
	1364, 901, 896, 1500, 2497, 2465, 3684, 2068, 2934, 897,
	898, 899, 900, 1528, 1160, 1854, 3683, 3679, 903, 2958,
	2959, 3284, 2961, 2732, 2178, 2923, 2452, 2319, 3691, 962,
	3695, 3157, 1414, 955, 3736, 2992, 3730, 2994, 1794, 3531,
	1647, 3532, 2472, 2476, 2477, 2478, 2473, 2481, 2474, 2479,
	1163, 3656, 2475, 1071, 2480, 3657, 1846, 1177, 1644, 1176,
	3720, 1846, 2826, 1174, 3759, 1268, 3753, 1739, 784, 2132,
	2911, 2885, 2156, 3662, 3990, 3733, 4021, 3731, 3948, 3993,
	3523, 3732, 1664, 768, 3879, 3792, 3952, 3794, 3745, 3682,
	3749, 2183, 1232, 1163, 3007, 981, 825, 795, 1524, 3728,
	3600, 3601, 1301, 1623, 3076, 3074, 1073, 3046, 794, 3379,
	2757, 3667, 2978, 3738, 1070, 982, 2115, 1687, 3766, 1687,
	3789, 3680, 1578, 1582, 2366, 3746, 3845, 1522, 3613, 3210,
	2821, 3775, 1606, 3840, 3425, 3070, 3535, 3533, 3534, 3611,
	3777, 700, 2047, 631, 1262, 1049, 1266, 1031, 3653, 3617,
	2128, 3818, 701, 2346, 3903, 3769, 3808, 935, 2328, 936,
	928, 3788, 1263, 1265, 1261, 2775, 1264, 1250, 1249, 1259,
	1260, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251, 2774,
	3827, 1704, 1241, 3655, 1721, 3095, 3096, 1278, 739, 2208,
	3816, 2754, 2472, 2476, 2477, 2478, 2473, 2481, 2474, 2479,
	3448, 3821, 2475, 2971, 2480, 71, 70, 69, 3844, 68,
	225, 1163, 786, 3829, 1355, 224, 3704, 3572, 3875, 1524,
	3607, 3995, 3869, 765, 764, 763, 762, 3876, 761, 3859,
	3861, 3863, 3865, 3843, 3838, 3778, 760, 2470, 2471, 2469,
	3877, 3852, 2467, 2466, 2029, 2028, 2095, 3172, 1522, 3858,
	2850, 3784, 3785, 2845, 1955, 1953, 1491, 2395, 2402, 1952,
	3930, 3868, 3328, 3526, 3855, 3856, 3630, 2895, 3884, 1524,
	3882, 3522, 3736, 1901, 1250, 1249, 1259, 1260, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1251, 3896, 2391, 3921, 1972,
	2866, 1969, 1968, 3912, 3929, 3225, 2858, 3626, 1522, 3620,
	2000, 3734, 3914, 3585, 1687, 3915, 3916, 3432, 3828, 3433,
	3439, 3913, 2337, 3832, 3833, 1096, 1092, 1094, 1095, 1093,
	2654, 3945, 3263, 2372, 3132, 2311, 2310, 2308, 3938, 2307,
	3939, 1389, 3940, 3817, 3941, 3899, 3942, 3553, 3955, 2521,
	3957, 3958, 3953, 2519, 3853, 1143, 3276, 3951, 3272, 2140,
	2154, 3026, 1163, 2030, 2026, 2025, 3808, 3961, 1895, 2925,
	2460, 3711, 1906, 1900, 1533, 929, 2326, 41, 663, 118,
	105, 179, 3759, 56, 3970, 178, 55, 116, 3973, 176,
	3972, 3971, 54, 3605, 100, 99, 3979, 3977, 3989, 115,
	3997, 3976, 174, 3996, 53, 209, 3983, 3984, 3985, 3986,
	138, 208, 200, 61, 191, 162, 211, 210, 4009, 4001,
	1163, 207, 2572, 2573, 206, 1566, 205, 3889, 3589, 3871,
	192, 891, 4011, 3844, 44, 4013, 4010, 183, 43, 180,
	4019, 193, 42, 4023, 1950, 1951, 4020, 1250, 1249, 1259,
	1260, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251, 106,
	136, 57, 40, 39, 38, 34, 13, 4031, 12, 35,
	3072, 22, 21, 1651, 20, 122, 3997, 4039, 138, 3996,
	4038, 26, 32, 31, 196, 138, 131, 130, 4023, 4040,
	30, 3963, 3964, 129, 4044, 128, 127, 126, 138, 125,
	124, 138, 138, 2075, 123, 29, 19, 48, 47, 2075,
	2075, 2075, 3437, 46, 138, 9, 119, 114, 112, 28,
	113, 110, 109, 1115, 1250, 1249, 1259, 1260, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1251, 3330, 108, 107, 103,
	101, 83, 82, 3332, 81, 96, 95, 94, 93, 92,
	91, 89, 90, 3449, 980, 80, 79, 78, 77, 76,
	98, 144, 145, 104, 146, 147, 3440, 102, 87, 97,
	88, 86, 85, 84, 75, 3347, 74, 3435, 73, 160,
	159, 158, 3457, 3458, 157, 156, 154, 155, 3436, 153,
	152, 151, 150, 149, 148, 49, 50, 51, 712, 711,
	718, 708, 52, 170, 169, 171, 173, 175, 172, 177,
	715, 716, 167, 717, 721, 165, 3968, 702, 168, 166,
	164, 66, 11, 117, 18, 3441, 25, 726, 4, 0,
	0, 0, 0, 161, 189, 198, 190, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 182, 181, 0,
	0, 0, 0, 67, 0, 0, 0, 1123, 1127, 1129,
	1131, 1133, 1134, 1136, 1687, 1141, 1137, 1138, 1139, 1140,
	0, 1118, 1119, 1120, 1121, 1098, 1099, 1124, 0, 1101,
	0, 1103, 1104, 1105, 1106, 1102, 1107, 1108, 1109, 1110,
	1111, 1114, 1116, 1112, 1113, 1122, 0, 0, 0, 0,
	0, 0, 0, 1126, 1128, 1130, 1132, 1135, 0, 0,
	0, 3456, 0, 2381, 184, 185, 186, 1846, 1250, 1249,
	1259, 1260, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251,
	0, 1846, 0, 0, 3495, 0, 0, 3497, 3445, 0,
	0, 0, 1117, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 2641, 0, 0, 3503, 0, 0, 0, 0,
	3442, 3446, 3444, 3443, 2205, 0, 0, 0, 132, 0,
	2001, 0, 187, 0, 133, 1962, 1250, 1249, 1259, 1260,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251, 1250, 1249,
	1259, 1260, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1251,
	3451, 3452, 0, 0, 0, 2004, 1971, 0, 0, 703,
	705, 704, 0, 2033, 0, 2005, 2006, 0, 0, 0,
	710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 714, 0, 0, 2316, 2317, 2318, 0, 729,
	0, 1970, 0, 0, 60, 0, 707, 0, 3459, 0,
	2333, 2334, 2335, 2336, 0, 0, 0, 0, 0, 1978,
	3438, 0, 0, 0, 0, 0, 3450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2650, 2651, 0, 0, 0, 138, 0,
	0, 138, 138, 62, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 711, 718, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 716, 0, 717, 721,
	0, 0, 702, 0, 0, 0, 0, 1994, 142, 197,
	0, 143, 726, 0, 1047, 0, 163, 138, 0, 0,
	0, 58, 0, 0, 0, 1047, 0, 0, 2001, 0,
	0, 0, 0, 1962, 0, 0, 0, 0, 709, 713,
	719, 138, 720, 722, 0, 0, 723, 724, 725, 0,
	0, 727, 728, 0, 1493, 0, 0, 0, 730, 0,
	0, 732, 0, 2004, 1971, 0, 731, 0, 0, 0,
	0, 0, 0, 2005, 2006, 0, 3455, 0, 0, 1961,
	1963, 1960, 0, 0, 1957, 0, 0, 135, 45, 1982,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 1970,
	1988, 1530, 0, 0, 0, 0, 0, 1125, 1973, 0,
	1956, 0, 0, 0, 2075, 139, 140, 1978, 0, 141,
	1976, 2010, 1268, 0, 1977, 1979, 1981, 0, 1983, 1984,
	1985, 1989, 1990, 1991, 1993, 1996, 1997, 1998, 0, 0,
	0, 0, 0, 0, 0, 1986, 1995, 1987, 0, 0,
	0, 0, 3454, 0, 0, 0, 0, 1965, 0, 0,
	0, 712, 711, 718, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 715, 716, 0, 717, 721, 0, 0,
	702, 2002, 0, 0, 0, 1994, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 705, 704, 706, 1958, 1959,
	0, 0, 0, 0, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1999, 714, 0, 0,
	0, 0, 0, 0, 729, 0, 730, 0, 0, 732,
	1288, 707, 0, 1975, 731, 697, 0, 0, 0, 0,
	1974, 0, 0, 0, 0, 0, 0, 1961, 2816, 1960,
	0, 0, 2815, 0, 0, 0, 0, 1982, 0, 0,
	0, 0, 0, 0, 1992, 0, 0, 0, 1988, 0,
	0, 0, 0, 1980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 2007, 1976, 2010,
	0, 0, 1977, 1979, 1981, 3851, 1983, 1984, 1985, 1989,
	1990, 1991, 1993, 1996, 1997, 1998, 0, 0, 0, 0,
	0, 0, 0, 1986, 1995, 1987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1967,
	0, 0, 0, 709, 713, 719, 0, 720, 722, 2002,
	0, 723, 724, 725, 0, 0, 727, 728, 0, 0,
	0, 0, 0, 2791, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 705, 704, 0, 1958, 1959, 0, 3926,
	0, 2003, 0, 710, 2009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1999, 714, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 0, 0, 0, 0, 707,
	0, 1975, 0, 0, 0, 0, 0, 0, 1974, 0,
	2490, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	0, 1980, 0, 3926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2008, 2007, 0, 0, 2001, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2033, 1115, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 3584, 0, 0,
	0, 0, 0, 2004, 0, 3926, 0, 0, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 1967, 0, 0,
	0, 709, 713, 719, 0, 720, 722, 0, 0, 723,
	724, 725, 0, 0, 727, 728, 0, 0, 0, 2976,
	2977, 0, 0, 0, 0, 0, 0, 196, 1100, 0,
	0, 0, 1090, 0, 0, 0, 0, 1978, 0, 2003,
	0, 0, 2009, 0, 0, 0, 0, 4042, 1123, 1127,
	1129, 1131, 1133, 1134, 1136, 0, 1141, 1137, 1138, 1139,
	1140, 0, 1118, 1119, 1120, 1121, 1098, 1099, 1124, 0,
	1101, 0, 1103, 1104, 1105, 1106, 1102, 1107, 1108, 1109,
	1110, 1111, 1114, 1116, 1112, 1113, 1122, 0, 0, 0,
	1100, 0, 0, 0, 1126, 1128, 1130, 1132, 1135, 0,
	0, 0, 0, 0, 0, 1994, 0, 0, 0, 0,
	1123, 1127, 1129, 1131, 1133, 1134, 1136, 0, 1141, 1137,
	1138, 1139, 1140, 0, 1118, 1119, 1120, 1121, 1098, 1099,
	1124, 0, 1101, 1117, 1103, 1104, 1105, 1106, 1102, 1107,
	1108, 1109, 1110, 1111, 1114, 1116, 1112, 1113, 1122, 0,
	0, 0, 0, 0, 0, 0, 1126, 1128, 1130, 1132,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 2001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1982, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 1988, 0,
	0, 0, 138, 0, 0, 0, 0, 2004, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 1976, 2010,
	0, 0, 1977, 1979, 1981, 0, 1983, 1984, 1985, 1989,
	1990, 1991, 1993, 1996, 1997, 1998, 0, 2001, 0, 0,
	0, 0, 0, 1986, 1995, 1987, 0, 0, 0, 0,
	0, 3758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3166, 2004, 0, 0, 0, 0, 0, 0, 2002,
	0, 0, 0, 0, 0, 0, 0, 3178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1999, 0, 1978, 0, 0, 1994,
	0, 0, 0, 0, 0, 2033, 2033, 2033, 2033, 2033,
	2033, 1975, 2004, 0, 0, 0, 0, 0, 1974, 0,
	0, 0, 2033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	0, 1980, 1236, 1237, 1238, 1235, 0, 0, 0, 0,
	3729, 0, 0, 0, 1994, 0, 1978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1982, 0, 0, 2075, 0, 0, 0, 1125, 0,
	0, 0, 1988, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 1976, 2010, 0, 138, 1977, 1979, 1981, 0,
	1983, 1984, 1985, 1989, 1990, 1991, 1993, 1996, 1997, 1998,
	0, 1772, 0, 0, 1994, 0, 138, 1986, 1995, 1987,
	0, 0, 0, 0, 0, 0, 1982, 138, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 1988, 0, 3588,
	0, 0, 0, 0, 0, 1772, 0, 0, 0, 0,
	0, 0, 0, 2002, 0, 0, 0, 1976, 2010, 0,
	0, 1977, 1979, 1981, 0, 1983, 1984, 1985, 1989, 1990,
	1991, 1993, 1996, 1997, 1998, 0, 0, 0, 0, 0,
	0, 0, 1986, 1995, 1987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3324, 1982, 0, 1999, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 0, 0,
	0, 0, 0, 0, 0, 1975, 0, 0, 2002, 0,
	0, 0, 1974, 0, 0, 0, 0, 1976, 2010, 0,
	0, 1977, 1979, 1981, 0, 1983, 1984, 1985, 1989, 1990,
	1991, 1993, 1996, 1997, 1998, 0, 1992, 0, 0, 0,
	0, 0, 1986, 1995, 1987, 1980, 0, 0, 0, 0,
	0, 0, 0, 1999, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1768, 0,
	1975, 0, 0, 0, 0, 1765, 0, 1974, 2002, 1767,
	1764, 1766, 1770, 1771, 0, 0, 0, 1769, 0, 1047,
	0, 138, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 1992, 1768, 2033, 2075, 0, 0, 0, 0, 1765,
	1980, 0, 0, 1767, 1764, 1766, 1770, 1771, 0, 0,
	0, 1769, 138, 1999, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1975, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 3592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1992, 0, 0, 0, 0, 0, 0, 0, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3592, 0,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1775, 1776, 1777, 1778, 1779, 1780, 1773, 1774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1775, 1776, 1777, 1778, 1779,
	1780, 1773, 1774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 138,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 793, 555, 506, 423, 375, 573, 572, 0, 0,
	862, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 746, 0, 0, 783, 838,
	837, 770, 780, 0, 0, 303, 223, 501, 621, 503,
	502, 771, 0, 772, 776, 779, 775, 773, 774, 0,
	853, 0, 0, 0, 0, 0, 0, 738, 750, 0,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 747, 748, 0, 0, 0, 0,
	803, 0, 749, 0, 0, 798, 777, 781, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 778, 801,
	805, 324, 876, 799, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	877, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 796, 0, 618, 0, 457, 0, 0, 860,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	800, 0, 412, 393, 873, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 138, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 1796, 1795,
	1797, 469, 358, 359, 0, 337, 285, 286, 640, 857,
	389, 583, 616, 617, 508, 0, 872, 852, 854, 855,
	859, 863, 864, 865, 866, 867, 869, 871, 875, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	874, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	804, 558, 559, 379, 380, 381, 382, 861, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 883, 856, 882, 884,
	885, 881, 886, 887, 868, 759, 0, 811, 879, 878,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 766, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 845, 818, 819, 820, 756, 821,
	815, 816, 757, 817, 846, 809, 842, 843, 785, 812,
	822, 841, 823, 844, 847, 848, 888, 889, 829, 813,
	251, 890, 826, 849, 840, 839, 824, 810, 850, 851,
	792, 787, 827, 828, 814, 833, 834, 835, 758, 806,
	807, 808, 830, 831, 788, 789, 790, 791, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 836, 626, 427, 0, 832, 629,
	630, 627, 365, 414, 432, 421, 802, 641, 504, 505,
	642, 615, 0, 751, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 330, 1847, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 793, 555, 506, 423, 375, 573, 572,
	0, 0, 862, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 2059, 0, 0, 746, 0, 0,
	783, 838, 837, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 853, 0, 0, 0, 0, 0, 0, 738,
	750, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 803, 0, 749, 0, 0, 2060, 777, 781,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 801, 805, 324, 876, 799, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 877, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 796, 0, 618, 0, 457, 0,
	0, 860, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 800, 0, 412, 393, 873, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 857, 389, 583, 616, 617, 508, 0, 872, 852,
	854, 855, 859, 863, 864, 865, 866, 867, 869, 871,
	875, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 874, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 804, 558, 559, 379, 380, 381, 382, 861,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 883, 856,
	882, 884, 885, 881, 886, 887, 868, 759, 0, 811,
	879, 878, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 766, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 845, 818, 819, 820,
	756, 821, 815, 816, 757, 817, 846, 809, 842, 843,
	785, 812, 822, 841, 823, 844, 847, 848, 888, 889,
	829, 813, 251, 890, 826, 849, 840, 839, 824, 810,
	850, 851, 792, 787, 827, 828, 814, 833, 834, 835,
	758, 806, 807, 808, 830, 831, 788, 789, 790, 791,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 836, 626, 427, 0,
	832, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 0, 751, 200, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 1271, 555, 506, 423, 375, 573,
	572, 0, 0, 862, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 876, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 877, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 860, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 873, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 872,
	852, 854, 855, 859, 863, 864, 865, 866, 867, 869,
	871, 875, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 874, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	861, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 883,
	856, 882, 884, 885, 881, 886, 887, 868, 759, 0,
	811, 879, 878, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	163, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 888,
	889, 829, 813, 251, 890, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 802,
	641, 504, 505, 642, 615, 0, 751, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 330, 4041, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 793, 555, 506, 423,
	375, 573, 572, 0, 0, 862, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	746, 0, 0, 783, 838, 837, 770, 780, 0, 0,
	303, 223, 501, 621, 503, 502, 771, 0, 772, 776,
	779, 775, 773, 774, 0, 853, 0, 0, 0, 0,
	0, 0, 738, 750, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 803, 0, 749, 0, 0,
	798, 777, 781, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 778, 801, 805, 324, 876, 799, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 877, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 796, 0, 618,
	0, 457, 0, 0, 860, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 800, 0, 412, 393, 873,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 857, 389, 583, 616, 617, 508,
	0, 872, 852, 854, 855, 859, 863, 864, 865, 866,
	867, 869, 871, 875, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 874, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 804, 558, 559, 379, 380,
	381, 382, 861, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 883, 856, 882, 884, 885, 881, 886, 887, 868,
	759, 0, 811, 879, 878, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 766, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 845,
	818, 819, 820, 756, 821, 815, 816, 757, 817, 846,
	809, 842, 843, 785, 812, 822, 841, 823, 844, 847,
	848, 888, 889, 829, 813, 251, 890, 826, 849, 840,
	839, 824, 810, 850, 851, 792, 787, 827, 828, 814,
	833, 834, 835, 758, 806, 807, 808, 830, 831, 788,
	789, 790, 791, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 836,
	626, 427, 0, 832, 629, 630, 627, 365, 414, 432,
	421, 802, 641, 504, 505, 642, 615, 0, 751, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 793, 555,
	506, 423, 375, 573, 572, 0, 0, 862, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 746, 0, 0, 783, 838, 837, 770, 780,
	0, 0, 303, 223, 501, 621, 503, 502, 771, 0,
	772, 776, 779, 775, 773, 774, 0, 853, 0, 0,
	0, 0, 0, 0, 738, 750, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 748, 0, 0, 0, 0, 803, 0, 749,
	0, 0, 798, 777, 781, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 778, 801, 805, 324, 876,
	799, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 877, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 796,
	0, 618, 0, 457, 0, 0, 860, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 800, 0, 412,
	393, 873, 3927, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 857, 389, 583, 616,
	617, 508, 0, 872, 852, 854, 855, 859, 863, 864,
	865, 866, 867, 869, 871, 875, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 874, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 804, 558, 559,
	379, 380, 381, 382, 861, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 883, 856, 882, 884, 885, 881, 886,
	887, 868, 759, 0, 811, 879, 878, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	766, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 845, 818, 819, 820, 756, 821, 815, 816, 757,
	817, 846, 809, 842, 843, 785, 812, 822, 841, 823,
	844, 847, 848, 888, 889, 829, 813, 251, 890, 826,
	849, 840, 839, 824, 810, 850, 851, 792, 787, 827,
	828, 814, 833, 834, 835, 758, 806, 807, 808, 830,
	831, 788, 789, 790, 791, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 836, 626, 427, 0, 832, 629, 630, 627, 365,
	414, 432, 421, 802, 641, 504, 505, 642, 615, 0,
	751, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 0, 330,
	1847, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	793, 555, 506, 423, 375, 573, 572, 0, 0, 862,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 738, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 798, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 876, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 877,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 860, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 873, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 872, 852, 854, 855, 859,
	863, 864, 865, 866, 867, 869, 871, 875, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 874,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 861, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 883, 856, 882, 884, 885,
	881, 886, 887, 868, 759, 0, 811, 879, 878, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 888, 889, 829, 813, 251,
	890, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 802, 641, 504, 505, 642,
	615, 0, 751, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 862, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 738, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 1561, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 876, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 877, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	860, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 873, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 872, 852, 854,
	855, 859, 863, 864, 865, 866, 867, 869, 871, 875,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 874, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 861, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 883, 856, 882,
	884, 885, 881, 886, 887, 868, 759, 0, 811, 879,
	878, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 888, 889, 829,
	813, 251, 890, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 802, 751, 0, 2233, 0, 0, 0,
	0, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	793, 555, 506, 423, 375, 573, 572, 0, 0, 862,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 738, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 798, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 876, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 877,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 860, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 873, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 872, 852, 854, 855, 859,
	863, 864, 865, 866, 867, 869, 871, 875, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 874,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 861, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 883, 856, 882, 884, 885,
	881, 886, 887, 868, 759, 0, 811, 879, 878, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 888, 889, 829, 813, 251,
	890, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 802, 641, 504, 505, 642,
	615, 0, 751, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 862, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 738, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 1840, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 876, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 877, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	860, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 873, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 872, 852, 854,
	855, 859, 863, 864, 865, 866, 867, 869, 871, 875,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 874, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 861, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 883, 856, 882,
	884, 885, 881, 886, 887, 868, 759, 0, 811, 879,
	878, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 888, 889, 829,
	813, 251, 890, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 802, 641, 504,
	505, 642, 615, 0, 751, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 793, 555, 506, 423, 375, 573,
	572, 0, 0, 862, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 876, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 877, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 860, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 873, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 872,
	852, 854, 855, 859, 863, 864, 865, 866, 867, 869,
	871, 875, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 874, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	861, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 883,
	856, 882, 884, 885, 881, 886, 887, 868, 759, 0,
	811, 879, 878, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 888,
	889, 829, 813, 251, 890, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 802,
	641, 504, 505, 642, 615, 0, 751, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 793, 555, 506, 423,
	375, 573, 572, 0, 0, 862, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	746, 0, 0, 783, 838, 837, 770, 780, 0, 0,
	303, 223, 501, 621, 503, 502, 771, 0, 772, 776,
	779, 775, 773, 774, 0, 853, 0, 0, 0, 0,
	0, 0, 738, 750, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 803, 0, 749, 0, 0,
	798, 777, 781, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 778, 801, 805, 324, 876, 799, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 877, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 796, 0, 618,
	0, 457, 0, 0, 860, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 800, 0, 412, 393, 873,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 857, 389, 583, 616, 617, 508,
	0, 872, 852, 854, 855, 859, 863, 864, 865, 866,
	867, 869, 871, 875, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 874, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 804, 558, 559, 379, 380,
	381, 382, 861, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 883, 856, 882, 884, 885, 881, 886, 887, 868,
	759, 0, 811, 879, 878, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 766, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 845,
	818, 819, 820, 756, 821, 815, 816, 757, 817, 846,
	809, 842, 843, 785, 812, 822, 841, 823, 844, 847,
	848, 888, 889, 829, 813, 251, 890, 826, 849, 840,
	839, 824, 810, 850, 851, 792, 787, 827, 828, 814,
	833, 834, 835, 758, 806, 807, 808, 830, 831, 788,
	789, 790, 791, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 836,
	626, 427, 0, 3505, 629, 3506, 3507, 365, 414, 432,
	421, 802, 641, 504, 505, 642, 615, 0, 751, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 793, 555,
	506, 423, 375, 573, 572, 0, 0, 862, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 746, 0, 0, 783, 838, 837, 770, 780,
	0, 0, 303, 223, 501, 621, 503, 502, 2707, 0,
	2708, 776, 779, 775, 773, 774, 0, 853, 0, 0,
	0, 0, 0, 0, 738, 750, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 748, 0, 0, 0, 0, 803, 0, 749,
	0, 0, 798, 777, 781, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 778, 801, 805, 324, 876,
	799, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 877, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 796,
	0, 618, 0, 457, 0, 0, 860, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 800, 0, 412,
	393, 873, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 857, 389, 583, 616,
	617, 508, 0, 872, 852, 854, 855, 859, 863, 864,
	865, 866, 867, 869, 871, 875, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 874, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 804, 558, 559,
	379, 380, 381, 382, 861, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 883, 856, 882, 884, 885, 881, 886,
	887, 868, 759, 0, 811, 879, 878, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	766, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 845, 818, 819, 820, 756, 821, 815, 816, 757,
	817, 846, 809, 842, 843, 785, 812, 822, 841, 823,
	844, 847, 848, 888, 889, 829, 813, 251, 890, 826,
	849, 840, 839, 824, 810, 850, 851, 792, 787, 827,
	828, 814, 833, 834, 835, 758, 806, 807, 808, 830,
	831, 788, 789, 790, 791, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 836, 626, 427, 0, 832, 629, 630, 627, 365,
	414, 432, 421, 802, 641, 504, 505, 642, 615, 0,
	751, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 1705, 0, 0, 0, 754, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	793, 555, 506, 423, 375, 573, 572, 0, 0, 862,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 798, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 876, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 877,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 860, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 873, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 1706,
	1707, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 872, 852, 854, 855, 859,
	863, 864, 865, 866, 867, 869, 871, 875, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 874,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 861, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 883, 856, 882, 884, 885,
	881, 886, 887, 868, 759, 0, 811, 879, 878, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 888, 889, 829, 813, 251,
	890, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 802, 641, 504, 505, 642,
	615, 0, 751, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 862, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 0, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 876, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 877, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	860, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 873, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 872, 852, 854,
	855, 859, 863, 864, 865, 866, 867, 869, 871, 875,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 874, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 861, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 883, 856, 882,
	884, 885, 881, 886, 887, 868, 759, 0, 811, 879,
	878, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 888, 889, 829,
	813, 251, 890, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 802, 641, 504,
	505, 642, 615, 0, 751, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 793, 555, 506, 423, 375, 573,
	572, 0, 0, 862, 870, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 876, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 877, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 860, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 873, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 872,
	852, 854, 855, 859, 863, 864, 865, 866, 867, 869,
	871, 875, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 874, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	861, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 883,
	856, 882, 884, 885, 881, 886, 887, 868, 759, 0,
	811, 879, 878, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 888,
	889, 829, 813, 251, 890, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 0, 751, 200, 61, 191,
	162, 0, 0, 0, 0, 0, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 192, 0, 0, 0, 0,
	0, 0, 183, 0, 330, 0, 193, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 136, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 161, 189,
	198, 190, 120, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 215, 0, 0, 0, 428, 0, 0,
	357, 188, 182, 181, 473, 0, 412, 393, 227, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 593,
	594, 595, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 452, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 218,
	565, 568, 498, 228, 0, 562, 577, 535, 576, 229,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 134, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 226,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 233, 298, 440, 234, 0, 287, 514,
	361, 163, 404, 335, 579, 580, 58, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 230, 45, 216, 219, 221, 220, 0, 59,
	563, 575, 609, 5, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	139, 231, 504, 505, 232, 615, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 136, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 2383, 2386, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 2387, 457,
	0, 0, 0, 2382, 0, 2381, 428, 2379, 2384, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 2385, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	163, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1307, 0, 0,
	222, 0, 0, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 777, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 200, 61, 191, 162, 0, 0,
	0, 0, 0, 0, 391, 667, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 668, 670,
	308, 480, 405, 682, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 163, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 1115, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 2545, 2548, 2549, 2550, 2551,
	2552, 2553, 0, 2558, 2554, 2555, 2556, 2557, 0, 2540,
	2541, 2542, 2543, 1098, 2524, 2546, 0, 2525, 387, 2526,
	2527, 2528, 2529, 1102, 2530, 2531, 2532, 2533, 2534, 2537,
	2538, 2535, 2536, 2544, 399, 364, 400, 347, 377, 376,
	378, 1126, 1128, 1130, 1132, 1135, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	2539, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 2547, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	2383, 2386, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 2387, 457, 0, 0, 0, 2382,
	0, 2381, 428, 2379, 2384, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 2385, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	2404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 2403, 457, 0, 0, 0, 2409, 2406,
	2408, 428, 0, 2407, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 2401, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 2404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 2403, 457, 0, 0, 0, 2409, 2406, 2408,
	428, 0, 2407, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 2099, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 2100, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 1236,
	1237, 1238, 1235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 200, 641, 504, 505, 642, 615, 0, 0,
	0, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	136, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 2149, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 163, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 200, 641, 504, 505, 642,
	615, 0, 0, 0, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 136, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 2135, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 163,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 1030, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	1037, 1038, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 1024, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 1011, 455, 297, 1010, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 1028, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 1029,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 1032, 558, 559, 379, 380, 381, 382, 341, 584,
	1027, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 1039, 1025, 1035, 1026, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 1036, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 1023, 414, 432, 421, 200, 641, 504,
	505, 642, 615, 0, 0, 0, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 136, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2031,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 163, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 1037, 1038, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 1011, 455, 297, 1010,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 1039, 2052, 1035, 2053, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 1036, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 2927, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 2930, 0,
	0, 0, 2929, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 1527, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 1525, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 1521, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 1525, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1523, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3992, 0, 222, 838, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 1525,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1523, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 2448, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 960, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 1525, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1735, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	2486, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 2488, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 2099,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 2100, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 3141, 3143, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 2509, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1525, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 654,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 838,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3969, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 3737,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 3870, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1749, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3752, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 3664, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 3175, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2031, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 3383, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3034, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1525, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 2488, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 2849, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 2606, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 2565, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 2339, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 1886, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 2014,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1525, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 1919, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 1554, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 665, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 960, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 1504, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 1502, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 733, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 690, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 691, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
}

var yyPact = [...]int{
	351, -1000, -1000, -1000, -322, 15644, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49642, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 456, 49642,
	-317, 31401, 47755, -1000, -1000, 2784, -1000, 48384, 17551, 49642,
	587, 580, 49642, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1024, -1000, 52158, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 941, 4450, 51529, 11843, -205, -1000, 1576, -23,
	2652, 523, -188, -192, 1218, 1257, 1420, 1420, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 234, 1126, 49013, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 370, 290,
	1023, 1126, 22591, 114, 108, 1576, 466, -55, 221, -1000,
	1305, 3949, 211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11843, 11843, 15644, -364, 15644, 11843,
	49642, 49642, -1000, -1000, -1000, -1000, -317, 48384, 941, 4450,
	11843, 2652, 523, -188, -192, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -55, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 108, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4883, -1000, 1773, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2423,
	3138, 1770, 2651, 865, 47755, 49642, -1000, 147, 865, -1000,
	-1000, -1000, 1576, 3563, -1000, 49642, 49642, 241, 1992, -1000,
	606, 507, 557, 638, 361, 1767, -1000, -1000, -1000, -1000,
	-1000, -1000, 792, 3515, -1000, 49642, 49642, 3155, 49642, -1000,
	2400, 833, -1000, 4628, 3345, 1600, 1060, 3172, -1000, -1000,
	3137, -1000, 372, 838, 786, 742, 447, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 354, -1000, 3425, -1000, -1000, 357,
	-1000, -1000, 335, -1000, -1000, -1000, 106, -1000, -1000, -1000,
	-1000, -1000, -1000, 10, -1000, -1000, 1306, 2366, 11843, 2079,
	-1000, 3587, 1772, -1000, -1000, -1000, 7413, 14371, 14371, 14371,
	14371, 49642, -1000, -1000, 2969, 11843, 3132, 3130, 3126, 3125,
	-1000, -1000, -1000, -1000, -1000, -1000, 3124, 1756, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2149, -1000, -1000,
	-1000, 15003, -1000, 3122, 3121, 3119, 3116, 3115, 3114, 3112,
	3111, 3102, 3101, 3100, 3099, 3098, 3096, 2825, 16912, 3095,
	2647, 2645, 3089, 3088, 3086, 2642, 3085, 3082, 3069, 2825,
	2825, 3067, 3066, 3065, 3057, 3051, 3050, 3049, 3047, 3046,
	3045, 3042, 3040, 3033, 3027, 3026, 3011, 3006, 3005, 3004,
	3003, 3001, 3000, 2999, 2996, 2986, 2985, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1499, -1000, 2984, 3526, 2857, -1000, 3402, 3399, 3394,
	3386, -257, 2983, 2333, -1000, -1000, 112, 3514, 49642, -278,
	49642, 425, -79, -81, -82, -1000, -63, -1000, -1000, 1237,
	-1000, 1164, -1000, 907, 907, 907, 49642, 49642, 243, 1096,
	907, 907, 907, 907, 907, 985, 907, 3440, 1019, 1011,
	1008, 1003, 907, -14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1991, 1983, 3260, 1138, -1000, -1000, -1000, -1000, 1635,
	49642, -1000, 2918, 425, -303, 1800, 1800, 3500, 3500, 3435,
	847, 846, 837, 1800, 691, -1000, 2003, 2003, 2003, 2003,
	1800, 516, 843, 3447, 3447, 172, 2003, 86, 1800, 1800,
	86, 1800, 1800, -1000, 1966, 311, -263, -1000, -1000, -1000,
	-1000, 2003, 2003, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3420, 3419, 941, 941, 49642, 941, 237, 49642, 941, 941,
	941, 49642, 951, -306, 51, 50900, 50271, 2365, 2400, 829,
	827, 1683, 1980, -1000, 1813, 49642, 49642, 1813, 1813, 25740,
	25111, -1000, 49642, -1000, 3526, 2857, 2813, 1623, 2812, 2857,
	-83, 425, 941, 941, 941, 941, 941, 319, 941, 941,
	941, 941, 941, 49642, 49642, 47126, 941, 941, 941, 941,
	9941, 9941, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15644, 2264, 2234, 209, -3, -298, 292, -1000, -1000,
	49642, 3310, 318, -1000, -1000, -1000, 2906, -1000, 2908, 2908,
	2908, 2908, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2908, 2908, 2917, 2980, -1000, -1000, 2907, 2907,
	2907, 2906, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2909, 2909, 2910,
	2910, 2909, 49642, -104, -1000, -1000, 11843, 49642, 3334, 400,
	2977, 865, -1000, -1000, 49642, 186, 407, 3526, 3333, 3447,
	3492, -1000, -1000, 1753, 2332, 2641, -1000, 361, -1000, 583,
	361, -1000, 616, 616, 1789, -1000, 1284, -1000, -1000, -1000,
	-1000, -1000, -1000, 49642, 10, 439, -1000, -1000, 2615, 2975,
	-1000, 661, 1416, 1463, -1000, 269, 4135, 40207, 2400, 40207,
	49642, -1000, -1000, -1000, -1000, -1000, -1000, 97, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 347, -1000, 11843, 11843, 11843, 11843, 11843, -1000,
	778, 13739, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14371,
	14371, 14371, 14371, 14371, 14371, 14371, 14371, 14371, 14371, 14371,
	14371, 2968, 1941, 14371, 14371, 14371, 14371, 28256, 1623, 3301,
	1647, 310, 1772, 1772, 1772, 1772, 11843, -1000, 2024, 2366,
	11843, 11843, 11843, 11843, 34546, 49642, -1000, -1000, 5279, 11843,
	11843, 5313, 11843, 3380, 11843, 11843, 11843, 2811, 6140, 49642,
	11843, -1000, 2801, 2800, -1000, -1000, 2238, 11843, -1000, -1000,
	11843, -1000, -1000, 11843, 14371, 11843, -1000, 11843, 11843, 11843,
	-1000, -1000, 1902, 3380, 3380, 3380, 1928, 11843, 11843, 3380,
	3380, 3380, 1920, 3380, 3380, 3380, 3380, 3380, 3380, 3380,
	3380, 3380, 3380, 3380, 2799, 2797, 2796, 11211, 3447, -205,
	-1000, 9309, 3333, 3447, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -259, 2974, 49642, 2635, 2630, -334,
	184, 480, 49642, 1224, -1000, -1000, 49642, 2322, 49642, 2321,
	61, 1210, 1174, 1184, -1000, 49642, 2067, 49642, 49642, 3375,
	-1000, 2973, 49642, 907, 907, 907, -1000, 45239, 40207, 49642,
	49642, 2400, 49642, 49642, 49642, 907, 907, 907, 907, 49642,
	-1000, 3307, 40207, 3268, 951, -1000, 49642, 1635, 3373, 49642,
	-1000, -1000, -1000, -1000, 3500, 14371, 14371, -1000, -1000, 11843,
	-1000, 46497, 2003, 1800, 1800, -1000, -1000, 49642, -1000, -1000,
	-1000, 2003, 49642, 2003, 2003, 3500, 2003, -1000, -1000, -1000,
	1800, 1800, -1000, -1000, 11843, -1000, -1000, 2003, 2003, -1000,
	-1000, 3500, 49642, 92, 3500, 3500, 94, -1000, -1000, -1000,
	1800, 49642, 49642, 907, 49642, -1000, 49642, 49642, -1000, -1000,
	49642, 49642, 4324, 49642, 45239, 45868, 3417, -1000, 40207, 49642,
	49642, 1630, -1000, 978, 37691, -1000, 49642, 1571, -1000, 58,
	-1000, 31, 51, 1813, 51, 1813, 976, -1000, 656, 668,
	23853, 591, 40207, 6772, -1000, -1000, 1813, 1813, 6772, 6772,
	1778, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1628, -1000,
	276, 3447, -1000, -1000, -1000, -1000, -1000, 2320, -1000, 49642,
	45239, 40207, 2400, 49642, 941, 49642, 49642, 49642, 49642, 49642,
	-1000, 2970, 1747, -1000, 3342, 49642, 49642, 49642, 49642, 1454,
	-1000, -1000, 20696, 1746, 1454, -1000, 2054, -1000, 11843, 15644,
	-241, 11843, 15644, 15644, 11843, 15644, -1000, 11843, 308, -1000,
	-1000, -1000, -1000, 2318, -1000, 2317, -1000, -1000, -1000, -1000,
	-1000, 2621, 2621, -1000, 2315, -1000, -1000, -1000, -1000, 2313,
	-1000, -1000, 2311, -1000, -1000, -1000, -1000, -143, 2795, 1306,
	-1000, 2618, 3168, -211, -1000, 21962, 49642, 49642, 400, -345,
	1982, 1977, 1976, -1000, -211, -1000, 21329, 49642, 3447, -1000,
	-216, 3333, 11843, 49642, -1000, 3433, -1000, -1000, 361, -1000,
	-1000, -1000, 616, 546, -1000, -1000, -1000, -1000, -1000, -1000,
	1744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 445, -61, -64, 1625, -1000, 49642, -1000, -1000, 269,
	40207, 42094, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 270,
	-1000, -1000, 180, -1000, 967, 281, 1782, -1000, -1000, 245,
	213, 244, 1047, 2366, -1000, 2053, 2053, 2074, -1000, 972,
	-1000, -1000, -1000, -1000, 2969, -1000, -1000, -1000, 2050, 3136,
	-1000, 1846, 1846, 1783, 1783, 1783, 1783, 1783, 1890, 1890,
	-1000, -1000, -1000, 7413, 2968, 14371, 14371, 14371, 14371, 1004,
	1004, 4138, 4208, -1000, -1000, -1000, -1000, 11843, 200, 2027,
	-1000, 11843, 2776, 1570, 2660, 1682, 1777, -1000, 2906, 11843,
	1738, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2794, 2791, 2708, 3513, 2790, 11843, -1000, -1000, 1768,
	1760, 1759, -1000, 2325, 10579, -1000, -1000, -1000, 2789, 1733,
	2785, -1000, -1000, -1000, 2782, 1757, 1410, 2780, 2870, 2775,
	2774, 2759, 2758, 1615, 11843, 11843, 11843, 11843, 2753, 1750,
	1749, 11843, 11843, 11843, 11843, 2751, 11843, 11843, 11843, 11843,
	11843, 11843, 11843, 11843, 11843, 11843, 49642, 158, 158, 158,
	1612, 1587, -1000, -1000, 1748, -1000, 2366, -1000, -1000, 3333,
	-1000, 2962, 2305, 1586, -1000, -1000, -313, 2566, 49642, 49642,
	183, 49642, 2617, -279, 49642, -1000, -1000, 2616, -1000, -1000,
	-1000, 1205, 1145, 1223, 2611, 3335, 3432, 984, 49642, 1339,
	2961, 49642, 49642, 49642, 297, -1000, -1000, 1553, -1000, 281,
	1, 593, 1360, 3153, 3512, -106, 49642, 49642, 49642, 49642,
	3366, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44610,
	-1000, 2960, 1742, -1000, -1000, 1772, 1772, 2366, 3152, 49642,
	49642, 3500, 3500, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2003, 3500, 3500, 1522, 1800, 2003, -1000, -1000, 2003, -345,
	-1000, 2003, -1000, -345, 1732, -345, 49642, -1000, -1000, -1000,
	3365, 2918, 1581, -1000, -1000, -1000, 3489, 1110, 895, 895,
	1124, 793, 3488, 19438, -1000, 1818, 1406, 966, 3305, 366,
	-1000, 1818, -140, 875, 1818, 1818, 1818, 1818, 1818, 1818,
	1818, 774, 763, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
	1818, 1818, 1818, 1818, 1247, 1818, 1818, 1818, 1818, 1818,
	-1000, 1818, 2954, 571, -1000, -1000, -1000, -1000, -1000, -1000,
	816, 703, 296, 3416, 410, -1000, 415, 1553, 3412, 442,
	49642, 49642, 3534, 1530, -1000, -1000, -1000, -1000, -1000, 28885,
	28885, 23224, 28885, -1000, 216, 1813, 51, 40, -1000, -1000,
	1571, 6772, 1571, 6772, 2295, -1000, -1000, 965, -1000, -1000,
	1360, -1000, 49642, 49642, -1000, -1000, 2953, 1972, -1000, -1000,
	16912, -1000, 6772, 6772, -1000, -1000, 30772, 49642, -1000, 6,
	-1000, 24, 3333, -1000, 1355, -1000, -1000, 1564, 1360, 3167,
	49642, 1355, 1355, 1355, -1000, -1000, 18180, 49642, 49642, -1000,
	-1000, -1000, -1000, 3500, 9941, -1000, 37691, -1000, -1000, 43981,
	-1000, 43352, 3500, 1931, -1000, 15644, 2206, 207, -1000, 286,
	-304, 204, 2114, 198, 2366, -1000, -1000, 2749, 2746, 1734,
	-1000, 1719, 2744, 1718, 1707, 2293, -1000, 79, -1000, 3313,
	1403, -1000, 2946, -1000, 1702, 3255, -1000, 1563, -1000, 1971,
	1696, -1000, -1000, -1000, 11843, 42723, 11843, 1403, 1674, 3249,
	1563, 3333, 2609, -1000, 1554, -1000, 2151, 1731, 233, -1000,
	-1000, -1000, 49642, 941, 2615, 1671, 42094, 1445, -1000, 963,
	1730, 1729, -1000, 40207, 356, 40207, -1000, 40207, -1000, -1000,
	418, -1000, 49642, 3318, -1000, -1000, -1000, 2566, 1958, -343,
	49642, -1000, -1000, -1000, -1000, -1000, 1670, -1000, 1004, 1004,
	4138, 4196, -1000, 14371, -1000, 14371, 3291, -1000, 1923, -1000,
	11843, 2191, 4042, 11843, 4042, 1626, 26998, 34546, -93, 3332,
	3270, 49642, -1000, -1000, 11843, 11843, -1000, 3222, -1000, -1000,
	-1000, -1000, 11843, 11843, 2495, -1000, 49642, -1000, -1000, -1000,
	-1000, 26998, -1000, 14371, -1000, -1000, -1000, -1000, 11843, 1446,
	1446, 3217, 1668, 158, 158, 158, 3148, 3105, 3079, 1667,
	158, 3062, 3043, 3031, 3024, 3007, 2963, 2891, 2884, 2866,
	2860, 1666, -1000, 2945, -1000, -1000, 2176, 13107, 9309, -1000,
	-1000, 329, 1551, 2287, 2606, 129, -1000, 1957, -1000, 2605,
	49642, 49642, 1221, -1000, 49642, 3510, -1000, -1000, -1000, -1000,
	1143, 2600, -1000, 550, 2181, 182, 323, 2742, 1535, -1000,
	-1000, 49642, -1000, -1000, -1000, 18180, 2918, 2943, 2918, 193,
	1818, 684, 40207, 803, -1000, 49642, 2154, 1944, 3166, 830,
	3309, 49642, 2942, 409, 2939, 2938, 3364, 565, 4945, 49642,
	1444, -1000, 1722, 3949, -1000, 49642, -1000, 2400, -1000, 1800,
	-1000, -1000, 3500, -1000, -1000, 11843, 11843, 3500, 1800, 1800,
	-1000, 2003, -1000, 49642, -1000, -345, 565, 4945, 3362, 4502,
	794, 2607, -1000, 49642, -1000, -1000, -1000, 1002, -1000, 1125,
	907, 49642, 2120, 1125, 2119, 2937, -1000, -1000, 49642, 49642,
	49642, 49642, -1000, -1000, 49642, -1000, 49642, 49642, 49642, 49642,
	49642, 41465, -1000, 49642, 49642, -1000, 49642, 2109, 49642, 2104,
	3317, -1000, 1818, 1818, 1082, -1000, -1000, 657, -1000, 41465,
	2285, 2280, 2275, 2274, 2599, 2595, 2594, 1818, 1818, 2272,
	2591, 40836, 2590, 1323, 2271, 2269, 2268, 2292, 2584, 1055,
	-1000, 2583, 2286, 2267, 2258, 49642, 2923, 2488, 569, -1000,
	-1000, 2181, 193, 1818, 405, 49642, 1898, 1897, 684, 592,
	-1, 24482, -1000, -1000, -1000, 49642, 37691, 37691, 37691, 37691,
	37691, 37691, -1000, 3223, 3187, 3221, -1000, 3236, 3201, 3202,
	3188, 2964, 49642, 37691, 2918, -1000, 40836, -1000, -1000, -1000,
	1623, 1665, 3684, 1115, 11843, 6772, -1000, -1000, 45, 19,
	-1000, -1000, -1000, -1000, 40207, 2582, 591, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3431, 49642, 49642, 903, 2740, 1507,
	-1000, -1000, -1000, 4945, 2908, 2908, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2908, 2908, 2917, -1000, -1000,
	2907, 2907, 2907, 2906, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2909, 2909, 2910, 2910, 2909, -1000,
	-1000, 3498, -1000, 1505, -1000, -1000, 1698, -1000, 3498, 2029,
	-325, 15644, 2008, 1904, -1000, 11843, 15644, 11843, -242, 380,
	-246, -1000, -1000, -1000, 2580, -1000, -1000, -1000, 2262, -1000,
	2261, -1000, 219, 212, 2102, -211, 9309, 421, 49642, -211,
	49642, 9309, -1000, 49642, 181, -351, -355, 168, 420, -211,
	3431, 79, 11843, 3284, -1000, -1000, 49642, 2260, -1000, -1000,
	-1000, 3509, 40207, 2400, 1792, 39578, -1000, 352, -1000, 266,
	626, 2579, -1000, 997, 128, 2574, 2566, -1000, -1000, -1000,
	-1000, 14371, 1772, -1000, -1000, -1000, 2366, 11843, 2739, -1000,
	1154, 1154, 2500, 2732, 2730, -1000, 2908, 2908, -1000, 2906,
	2907, 2906, 1154, 1154, 2729, -1000, 2905, -1000, 3332, -1000,
	2329, 2601, -1000, 2564, 2553, 11843, -1000, 2727, 3934, 1439,
	-31, -171, 158, 158, -1000, -1000, -1000, -1000, 158, 158,
	158, 158, -1000, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 874, -91, -271, -92, -272, -1000,
	2724, 1460, -1000, -1000, -1000, -1000, -1000, 5313, 1456, 622,
	622, 2566, 2565, -1000, 962, 2563, 1197, 49642, 2560, -280,
	-1000, 2557, -1000, -1000, 49642, 2549, -1000, 699, 49642, 49642,
	2540, 2539, 1339, 4945, 2723, 3360, 18809, 3358, 2341, -1000,
	-1000, -1000, 30143, 620, -1000, -1000, -1000, 751, 461, 2257,
	611, -1000, 49642, 536, 3275, 1896, 2538, 49642, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3309, -1000, 1308, 492, 36433,
	16283, -1000, 417, 49642, -1000, 18809, 18809, 417, 527, 1925,
	-1000, 865, 1344, 144, 37691, 49642, -1000, 37062, 2721, -1000,
	1360, 3500, -1000, 2366, 2366, -345, 3500, 3500, 1800, -1000,
	-1000, 527, -1000, 417, -1000, 1039, 20067, 667, 508, 506,
	-1000, 713, -1000, -1000, 862, 3300, 4945, -1000, 49642, -1000,
	49642, -1000, 49642, 49642, 907, 11843, 3300, 49642, 957, -1000,
	1238, 489, 473, 887, 887, 1452, -1000, 3332, -1000, -1000,
	1447, -1000, -1000, -1000, -1000, 49642, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 26998, 26998, 3407, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2534,
	2533, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49642, 1664, -1000, 1892, 2254, 2530, 2341, 30143, 1891, 1813,
	2528, 2515, 620, 2154, 1888, 993, 49642, -1000, 1359, 49642,
	49642, -1000, 1422, -1000, 1887, 3144, 3165, 3144, -1000, 3144,
	-1000, -1000, -1000, -1000, -1000, -1000, 3163, -1000, 3060, -1000,
	-1000, -1000, -1000, 1422, -1000, -1000, -1000, -1000, -1000, 1115,
	-1000, 3430, 1125, 1125, 1125, 2719, -1000, -1000, -1000, -1000,
	1445, 2718, -1000, -1000, -1000, 3521, -1000, -1000, -1000, -1000,
	-1000, -1000, 18180, 3303, 3494, 3487, 38949, 3494, -1000, -325,
	1893, -1000, 2040, 185, 2110, 49642, -1000, -1000, -1000, 2717,
	2705, -223, 225, 3486, 3485, 1166, -1000, 2703, 1442, -211,
	-1000, -1000, 1403, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-211, -1000, 1403, -1000, 219, -1000, -1000, 3295, -1000, -1000,
	2400, -1000, 262, -1000, -1000, -1000, -1000, -1000, -1000, 255,
	-1000, 49642, -1000, 1419, 126, -1000, 2366, -1000, -1000, -1000,
	-1000, -1000, 4042, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2514, -1000, -1000, 11843, -1000, -1000, -1000,
	2546, -1000, -1000, 11843, 2702, 2512, 2699, 2509, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3526, -1000, 3481, 1662, 2697,
	2696, 1657, 2693, 2691, -1000, 11843, 2685, 5313, 1106, 2507,
	1106, -1000, -1000, 413, 29514, 49642, 3506, -1000, 49642, 2504,
	-1000, -1000, 2181, 698, 762, -1000, -1000, -1000, -1000, 1018,
	417, 2681, 1418, -1000, -1000, -1000, -1000, 417, -1000, 2502,
	271, -1000, -1000, -1000, -1000, 2498, 2489, 2250, -1000, -1000,
	2244, 1735, 284, -1000, -1000, -1000, -1000, -1000, -1000, 2240,
	49642, 38320, 2270, 1886, -346, -1000, 2904, -1000, 1818, 1818,
	1818, 49642, 1655, -1000, 1818, 1818, 2680, -1000, -1000, 2679,
	2676, -107, 880, 1867, 1866, -1000, 2237, 28885, 37691, 37062,
	1413, -1000, 1692, -1000, -1000, -1000, -1000, -1000, -1000, 3500,
	880, -1000, 627, 2233, 14371, 2903, 14371, 2901, 658, 2900,
	1649, -1000, 49642, -1000, -1000, 49642, 4021, 2899, -1000, 2893,
	3149, 601, 2873, 2868, 49642, 2470, -1000, 3300, 49642, 782,
	3293, -1000, -1000, -1000, 429, -1000, -1000, 714, -1000, 49642,
	-1000, 49642, -1000, 1763, -1000, 26998, -1000, -1000, 1641, -1000,
	2488, 2487, 5313, -1000, -1000, 271, 2483, 6772, -1000, -1000,
	-1000, 3275, 2482, 2240, 49642, -1000, 49642, 1359, 1359, 3526,
	49642, 9309, -1000, -1000, 11843, 2858, -1000, 11843, -1000, -1000,
	-1000, -1000, -1000, -1000, 2855, 3281, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1766, -1000, 11843, 12475, -1000, -1000, 900,
	15644, -248, 362, -1000, -1000, -1000, -226, 2480, -1000, -1000,
	3475, 2478, 2370, 49642, -1000, -1000, 1403, 1403, -223, -1000,
	-1000, 1360, -1000, -1000, 1194, 777, -1000, 2673, 305, -1000,
	2445, -1000, 2414, 158, -1000, 158, -1000, 263, 11843, -1000,
	2477, -1000, -1000, -1000, 2476, -1000, -1000, 2362, -1000, 2670,
	-1000, 2466, -1000, -1000, 49642, -1000, -1000, 1187, 2463, -347,
	2462, 2181, 2181, 49642, 4945, -110, -107, 18809, -110, -1000,
	-1000, 403, -1000, -1000, 416, -1000, -1000, 2229, 649, -1000,
	-1000, 2461, 646, -1000, 1359, -1000, 1849, 2128, 2413, 34546,
	26998, 28256, 2457, -1000, -1000, 36433, 1766, 1766, 4952, 347,
	5311, -1000, 2854, 1239, 1862, -1000, 2230, -1000, 2213, -1000,
	3500, 1413, 135, -1000, -1000, 1791, -1000, 1239, 2607, 3474,
	-1000, 3857, 49642, 3694, 49642, 2851, 1848, 14371, -1000, 862,
	3241, -1000, -1000, 4021, -1000, -1000, 2133, 14371, -1000, -1000,
	2456, 28256, 994, 1839, 1835, 1052, 2848, -1000, 722, 3519,
	-1000, -1000, -1000, 1049, 2847, -1000, 2092, 2091, -1000, 49642,
	-1000, 34546, 34546, 823, 823, 34546, 34546, 2843, 887, -1000,
	-1000, 14371, -1000, -1000, 1818, -1000, -1000, -1000, 1818, 1752,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2270, -1000, -1000,
	1355, -1000, 3447, -1000, -1000, 2366, 49642, 2366, 35804, -1000,
	3469, 3468, -1000, 2366, 260, 258, 2841, 2840, -1000, -325,
	49642, 49642, -228, 2193, -1000, 2455, 203, -1000, -1000, 1347,
	-226, -230, 94, 26998, 1832, -1000, 2669, 373, -130, -1000,
	-1000, -1000, -1000, 2668, -1000, 1092, -1000, -1000, -1000, 1306,
	2666, 2665, -1000, -1000, -1000, -1000, 49642, -1000, 2408, -1000,
	2454, 2453, 685, -99, -1000, -1000, 441, -1000, -1000, -1000,
	641, 2359, -1000, -1000, 412, -1000, -1000, -1000, 2240, 2452,
	-1000, -1000, 119, -1000, 1823, 1640, -1000, -1000, -1000, -1000,
	-1000, -1000, 858, -1000, 417, 5241, -1000, 1406, 27627, -1000,
	1194, 858, 571, 33288, 718, 327, -1000, 2192, -1000, -1000,
	3526, -1000, 707, -1000, 676, -1000, 1633, -1000, 1632, 35175,
	2189, 2958, -1000, 5176, 988, -1000, -1000, 4138, -1000, -1000,
	-1000, -1000, -1000, -1000, 2449, 2446, -1000, -1000, -1000, -1000,
	-1000, 2188, 2839, 80, 3405, 2441, -1000, -1000, 2832, 1620,
	1618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1617, 1613, 34546, -1000, -1000, 4138, 2186, 26998, 1818, -1000,
	-1000, 1611, 1605, -1000, -1000, -1000, -1000, -1000, -297, 2831,
	11843, 11843, -1000, -1000, -1000, 2828, -1000, -1000, 3466, -228,
	-235, 2433, 208, 217, -1000, 2418, -1000, -100, 3228, -134,
	-1000, -1000, 639, -213, 150, 146, 124, -1000, -1000, -1000,
	11843, -1000, -1000, -1000, 111, -1000, 1822, -1000, -1000, 2181,
	49642, 708, -1000, -1000, -1000, -1000, 254, -1000, -1000, -1000,
	-1000, -1000, -1000, 2413, 2411, -1000, 617, 3465, -1000, 5311,
	-1000, 1818, -1000, 617, 1604, -1000, 1818, 1818, -1000, 562,
	-1000, 1856, -1000, 2180, -1000, 3447, -1000, 548, -1000, 629,
	-1000, -1000, -1000, 1579, -1000, -1000, -1000, 5176, 644, -1000,
	854, 2827, -1000, -1000, 2662, 11843, 2825, 1818, 2658, -87,
	34546, 3145, 3141, 2965, 2862, 1557, -1000, -1000, 26998, -1000,
	-1000, 33917, -1000, 2820, 1539, 1537, 49642, 2370, -1000, -1000,
	2410, -1000, 948, 199, 217, -1000, 3464, 188, 3461, 3460,
	1265, 3225, -1000, -1000, 2041, -1000, 169, 148, 137, -1000,
	-1000, -1000, -1000, -1000, 2408, 2406, 2403, 599, -1000, 349,
	-1000, -1000, -1000, 355, -1000, 3456, 794, -1000, 26998, -1000,
	-1000, 33288, 1766, 1766, -1000, -1000, 2168, -1000, -1000, -1000,
	-1000, 2161, -1000, -1000, -1000, 1493, -1000, 49642, 1054, 8677,
	-1000, 2134, -1000, 49642, -1000, 3161, -1000, 257, 1481, 355,
	823, 355, 823, 355, 823, 355, 823, 342, -1000, -1000,
	-1000, 1480, 11843, -1000, -1000, 1465, -1000, -1000, -1000, 2819,
	2150, 225, 187, 3454, -1000, 2370, 3453, 2370, 2370, -1000,
	162, -115, 639, -1000, -1000, -1000, -1000, -1000, -1000, 2399,
	-1000, -1000, -1000, -1000, 1818, 1818, 2395, 2394, 486, -1000,
	-1000, 32659, 667, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	644, 5311, -1000, 8677, 1453, -1000, 2366, -1000, 887, -1000,
	-1000, 3159, 3157, 3505, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2817, 2620, -1000, 49642, 3391, 26369,
	202, -1000, -1000, -1000, 2382, -1000, 2370, -1000, -1000, 1816,
	-131, -1000, -269, 2144, 2140, -1000, -1000, 49642, -1000, 49642,
	627, -1000, 5311, 1431, -1000, 8677, -1000, -1000, 3507, -1000,
	3517, 1016, 1016, 355, 355, 355, 355, 11843, -1000, -1000,
	-1000, 49642, -1000, 1429, -1000, -1000, -1000, 1691, -1000, -1000,
	-1000, -1000, 2369, -135, -1000, -1000, 2368, -1000, -1000, -1000,
	1343, 2607, -1000, -1000, -1000, -1000, -1000, 2219, 717, -1000,
	2450, 1264, -1000, 1815, -1000, 32030, 49642, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49642, 8045, -1000, 1690,
	-1000, -1000, 2366, 49642, -1000,
}

var yyPgo = [...]int{
	0, 181, 3538, 247, 179, 4178, 81, 272, 280, 242,
	263, 4176, 4174, 4173, 4172, 3323, 3322, 4171, 4170, 4169,
	4168, 4165, 4162, 4159, 4158, 4157, 4156, 4155, 4154, 4153,
	4152, 4147, 4146, 4145, 4144, 4143, 4142, 4141, 4140, 4139,
	4137, 4136, 4135, 4134, 4131, 4130, 4129, 261, 4128, 4126,
	4124, 4123, 4122, 4121, 4120, 4119, 4118, 4117, 4113, 4110,
	4109, 4108, 4107, 4106, 4105, 4104, 4102, 4101, 4100, 4099,
	4098, 4097, 4096, 4095, 4094, 4092, 4091, 4090, 4089, 4088,
	4087, 4072, 259, 4071, 4070, 210, 4069, 3313, 4068, 4067,
	4066, 4065, 4063, 4058, 4057, 4056, 286, 4055, 4054, 4050,
	4049, 4047, 4046, 4045, 4043, 4040, 4037, 4036, 4033, 4032,
	260, 4031, 4024, 4023, 4022, 273, 4021, 252, 4019, 175,
	128, 4018, 4016, 4015, 4014, 4013, 4012, 4011, 4009, 3992,
	3989, 3988, 3984, 3981, 3979, 239, 215, 65, 3978, 50,
	3977, 3976, 216, 3975, 154, 3974, 157, 3973, 3972, 3971,
	3967, 3966, 3961, 3955, 3954, 3952, 3949, 3945, 3944, 3942,
	3939, 3937, 3936, 3935, 3933, 3931, 3930, 3929, 3927, 3926,
	51, 3925, 256, 3922, 76, 3921, 177, 3920, 75, 3919,
	74, 115, 258, 2878, 264, 244, 188, 178, 3915, 3914,
	274, 3913, 166, 230, 158, 105, 124, 3911, 145, 3910,
	266, 47, 48, 246, 146, 57, 191, 127, 3909, 211,
	95, 112, 3908, 3906, 153, 3905, 233, 182, 3903, 104,
	3899, 3897, 3895, 3893, 3891, 203, 189, 3889, 3887, 131,
	3886, 3885, 129, 134, 3884, 78, 125, 173, 121, 3883,
	2513, 118, 98, 3882, 133, 102, 3880, 96, 3879, 3878,
	3877, 3876, 194, 3875, 3872, 138, 64, 3870, 3869, 3867,
	71, 3863, 77, 3861, 42, 3860, 61, 3859, 3857, 3856,
	3852, 3851, 3850, 3849, 3847, 3833, 3831, 3827, 3826, 56,
	3825, 3824, 3823, 3822, 7, 13, 15, 3820, 28, 3819,
	172, 3818, 3817, 170, 3816, 198, 3815, 3814, 92, 89,
	3813, 91, 167, 3810, 10, 30, 72, 3807, 3806, 225,
	249, 106, 155, 3805, 277, 3804, 3803, 3802, 161, 3799,
	3798, 3797, 647, 3796, 3788, 3786, 3785, 3784, 3783, 254,
	3781, 1, 214, 41, 3778, 137, 141, 3777, 37, 31,
	3776, 49, 139, 223, 142, 97, 3775, 3772, 3770, 136,
	199, 108, 29, 0, 99, 218, 160, 3769, 3767, 3766,
	250, 3765, 237, 209, 235, 351, 262, 234, 3763, 3760,
	59, 3751, 168, 32, 54, 130, 271, 23, 243, 3749,
	1019, 9, 184, 3748, 205, 3747, 8, 14, 140, 150,
	3746, 3745, 34, 257, 3744, 3742, 3741, 119, 3739, 3725,
	201, 82, 3720, 3719, 3718, 3717, 38, 3715, 185, 17,
	3714, 110, 3713, 253, 3712, 289, 147, 186, 183, 159,
	227, 231, 83, 80, 3710, 1924, 156, 100, 22, 3708,
	226, 3707, 190, 144, 3703, 122, 3702, 245, 268, 206,
	3701, 187, 16, 43, 39, 26, 45, 11, 265, 224,
	3698, 3697, 24, 52, 3696, 53, 3694, 21, 3693, 3692,
	40, 3690, 58, 5, 3689, 3688, 18, 20, 3686, 35,
	208, 174, 126, 94, 66, 3685, 3684, 132, 162, 3683,
	151, 163, 165, 3682, 79, 3681, 3680, 3676, 3675, 989,
	3674, 255, 3673, 3672, 3671, 3670, 3669, 3668, 3666, 3665,
	3664, 213, 3663, 103, 44, 3662, 3657, 3656, 3655, 87,
	152, 3654, 3652, 3651, 3649, 33, 148, 3647, 12, 3646,
	25, 19, 36, 3645, 101, 3644, 3, 192, 3643, 3642,
	4, 3639, 3638, 2, 3636, 3634, 117, 3633, 93, 27,
	171, 109, 3631, 3630, 88, 212, 149, 3629, 3628, 90,
	241, 204, 3627, 120, 232, 267, 3623, 207, 3619, 3618,
	3617, 3613, 3600, 3598, 1287, 3593, 3592, 248, 67, 85,
	3591, 220, 114, 3587, 3586, 86, 169, 116, 111, 55,
	84, 3585, 113, 202, 3584, 197, 3583, 251, 3582, 3581,
	107, 3580, 3579, 3578, 3575, 195, 3573, 3567, 196, 229,
	3564, 3563, 275, 3562, 3561, 3560, 3558, 3557, 3555, 3548,
	3546, 3545, 3544, 240, 200, 3540,
}

//line mysql_sql.y:12697
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 608, 611, 611, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 125,
	125, 344, 344, 345, 345, 127, 340, 340, 339, 339,
	128, 129, 130, 587, 587, 131, 132, 162, 586, 586,
	164, 164, 164, 164, 164, 460, 126, 126, 126, 126,
	126, 168, 168, 168, 168, 168, 124, 593, 593, 593,
	594, 594, 121, 151, 150, 153, 153, 152, 152, 149,
	149, 145, 148, 148, 147, 147, 146, 141, 143, 143,
	142, 144, 144, 122, 110, 123, 535, 535, 534, 534,
	533, 533, 485, 485, 486, 486, 331, 331, 331, 532,
	532, 532, 531, 531, 530, 530, 529, 529, 527, 527,
	528, 526, 525, 525, 525, 523, 523, 523, 519, 519,
	521, 520, 520, 522, 514, 514, 517, 517, 515, 515,
	515, 515, 518, 513, 513, 513, 512, 512, 109, 109,
	109, 427, 427, 108, 108, 441, 441, 441, 441, 441,
	439, 439, 439, 439, 439, 439, 438, 438, 437, 437,
	442, 442, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 97, 97, 97, 97, 97, 97, 97,
	104, 102, 102, 102, 103, 599, 599, 598, 598, 600,
	600, 600, 600, 601, 601, 100, 100, 100, 101, 436,
	436, 436, 98, 99, 99, 426, 426, 431, 431, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 435, 435, 435, 433, 433, 432, 432, 434,
	434, 91, 91, 91, 94, 93, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 92, 92, 92, 92, 92,
	92, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	423, 423, 422, 105, 105, 106, 596, 596, 595, 597,
	597, 597, 597, 107, 113, 113, 113, 113, 113, 113,
	113, 113, 112, 112, 115, 115, 114, 116, 96, 96,
	96, 96, 96, 96, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	560, 560, 560, 560, 562, 562, 358, 359, 612, 361,
	357, 357, 357, 556, 556, 557, 558, 559, 559, 559,
	111, 14, 215, 215, 459, 459, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 84, 89, 89,
	90, 294, 294, 295, 289, 289, 296, 296, 167, 297,
	297, 297, 302, 302, 303, 303, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 274, 274,
	274, 269, 269, 269, 269, 270, 270, 271, 271, 272,
	272, 272, 272, 273, 273, 350, 350, 298, 298, 298,
	300, 300, 299, 293, 291, 291, 291, 291, 291, 291,
	291, 292, 292, 292, 292, 301, 301, 82, 88, 88,
	88, 88, 574, 574, 83, 585, 585, 489, 489, 372,
	372, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 495, 496, 368,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 166, 53, 53, 53, 412, 412, 52,
	613, 613, 343, 343, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 508, 508, 615, 615, 615, 74, 75,
	488, 488, 488, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 157, 59, 158, 158, 365, 365,
	365, 367, 367, 363, 614, 614, 455, 455, 366, 366,
	48, 48, 48, 48, 77, 364, 364, 342, 362, 362,
	362, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 420, 420, 417, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 187, 187, 241, 241,
	568, 568, 564, 564, 565, 565, 565, 566, 566, 567,
	567, 117, 502, 502, 502, 502, 502, 502, 8, 8,
	210, 210, 501, 501, 501, 501, 501, 501, 424, 424,
	424, 545, 545, 545, 546, 209, 209, 204, 204, 503,
	503, 389, 547, 547, 511, 511, 510, 510, 509, 509,
	207, 207, 208, 208, 190, 190, 136, 136, 516, 516,
	516, 516, 524, 524, 484, 484, 279, 279, 333, 333,
	334, 334, 180, 180, 181, 181, 181, 181, 181, 181,
	602, 602, 603, 604, 605, 605, 606, 606, 606, 607,
	607, 607, 607, 607, 553, 553, 555, 555, 554, 206,
	206, 202, 202, 203, 203, 203, 201, 201, 200, 199,
	199, 198, 196, 196, 196, 197, 197, 197, 214, 214,
	183, 183, 183, 182, 182, 182, 182, 182, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	184, 184, 561, 561, 561, 490, 490, 490, 498, 498,
	311, 311, 312, 312, 312, 312, 312, 134, 134, 494,
	494, 310, 310, 185, 185, 186, 186, 186, 186, 309,
	309, 308, 195, 195, 194, 193, 193, 193, 188, 188,
	188, 188, 188, 189, 320, 320, 319, 319, 318, 318,
	318, 318, 321, 120, 133, 133, 135, 213, 213, 317,
	316, 316, 316, 316, 212, 212, 211, 211, 205, 205,
	192, 192, 192, 192, 315, 191, 313, 592, 592, 591,
	591, 590, 588, 588, 588, 589, 589, 589, 589, 537,
	537, 537, 537, 537, 351, 351, 351, 356, 356, 354,
	354, 354, 354, 354, 360, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 224, 225,
	40, 226, 226, 227, 227, 228, 228, 229, 230, 231,
	231, 231, 231, 38, 216, 216, 217, 217, 218, 218,
	219, 220, 220, 220, 223, 221, 222, 222, 610, 610,
	609, 37, 37, 30, 171, 171, 172, 172, 172, 174,
	174, 275, 275, 275, 173, 173, 175, 175, 175, 569,
	571, 571, 573, 572, 572, 572, 575, 575, 575, 575,
	575, 576, 576, 576, 576, 577, 577, 31, 154, 154,
	178, 178, 159, 580, 580, 580, 579, 579, 581, 581,
	582, 582, 337, 337, 338, 338, 169, 170, 170, 161,
	156, 177, 177, 177, 177, 177, 179, 179, 243, 243,
	155, 160, 163, 165, 570, 578, 578, 578, 421, 421,
	418, 419, 419, 416, 415, 415, 415, 584, 584, 583,
	583, 583, 352, 352, 32, 411, 411, 413, 414, 414,
	414, 405, 405, 405, 405, 36, 409, 409, 410, 410,
	410, 410, 410, 410, 410, 406, 406, 408, 408, 404,
	404, 404, 404, 404, 404, 404, 35, 176, 176, 403,
	403, 400, 400, 398, 398, 399, 399, 397, 397, 397,
	401, 401, 43, 78, 44, 45, 46, 42, 402, 402,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	138, 137, 137, 137, 137, 137, 140, 140, 336, 336,
	335, 335, 139, 276, 276, 41, 254, 254, 476, 476,
	471, 471, 471, 471, 471, 492, 492, 492, 472, 472,
	472, 473, 473, 473, 475, 475, 475, 474, 474, 474,
	474, 474, 491, 491, 493, 493, 493, 443, 443, 444,
	444, 444, 447, 447, 463, 463, 464, 464, 462, 462,
	469, 469, 468, 468, 467, 467, 466, 466, 465, 465,
	465, 465, 458, 458, 457, 457, 445, 445, 445, 445,
	445, 446, 446, 446, 456, 456, 461, 461, 307, 307,
	306, 306, 262, 262, 263, 263, 305, 305, 260, 260,
	261, 261, 261, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 543,
	543, 544, 265, 265, 277, 277, 277, 277, 277, 277,
	264, 264, 266, 266, 242, 242, 240, 240, 232, 232,
	232, 232, 232, 233, 233, 234, 234, 235, 235, 235,
	239, 239, 238, 238, 238, 238, 236, 236, 237, 237,
	237, 237, 237, 237, 429, 429, 540, 540, 541, 541,
	536, 536, 536, 539, 539, 539, 539, 539, 539, 539,
	542, 542, 542, 538, 538, 244, 330, 330, 330, 353,
	353, 353, 353, 355, 329, 329, 329, 259, 259, 258,
	258, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 428, 428, 369, 369, 370, 370, 288,
	287, 287, 287, 287, 287, 285, 286, 284, 284, 284,
	284, 284, 281, 281, 280, 280, 280, 282, 282, 282,
	282, 282, 407, 407, 278, 278, 268, 268, 268, 267,
	267, 267, 470, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 283, 327, 327, 327, 328, 328, 328,
	328, 328, 328, 328, 328, 379, 379, 385, 385, 552,
	552, 551, 245, 245, 245, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 255, 255, 255, 452, 452, 452,
	452, 453, 453, 453, 453, 454, 454, 454, 450, 450,
	451, 451, 390, 391, 391, 499, 499, 500, 500, 448,
	448, 449, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 507, 507, 507, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 563, 563, 563, 548, 548, 548,
	549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
	549, 549, 550, 550, 550, 550, 550, 550, 550, 550,
	550, 550, 550, 550, 550, 550, 550, 550, 550, 325,
	325, 325, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	392, 392, 393, 393, 504, 504, 504, 504, 504, 504,
	505, 505, 506, 506, 506, 506, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 377, 322, 322, 322,
	394, 386, 386, 387, 387, 388, 388, 380, 380, 380,
	380, 380, 380, 381, 381, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 382, 382, 384,
	384, 396, 396, 396, 395, 395, 395, 395, 395, 395,
	395, 257, 257, 257, 257, 374, 374, 374, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	247, 247, 247, 247, 251, 251, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	252, 252, 252, 252, 252, 250, 250, 250, 250, 250,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 118,
	119, 119, 249, 332, 332, 477, 477, 480, 480, 478,
	478, 479, 481, 481, 481, 482, 482, 482, 483, 483,
	483, 487, 487, 341, 341, 341, 349, 349, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 4, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	3, 1, 3, 3, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 4, 7, 6, 6, 3, 5, 0,
	2, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 1, 4, 4,
	4, 3, 4, 3, 2, 2, 2, 2, 2, 3,
	2, 3, 2, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 5, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 4, 7,
	3, 3, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 9, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -608, -611, -2, -5, 629, -1, -4, -119, -91,
	-7, -14, -121, -122, -8, -117, -9, -10, -12, -95,
	-112, -114, -116, -115, -47, -11, -111, -85, -86, -97,
	-105, -108, -109, -110, -123, -118, -120, -180, -124, -125,
	-126, -168, -129, -131, -132, 619, -92, -93, -94, -33,
	-32, -31, -30, -154, -159, -162, -164, -127, 552, 625,
	455, 14, 504, -15, -16, -553, -17, 264, -357, -358,
	-359, -361, -612, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -157,
	-158, -77, -57, -78, -58, -166, -128, -79, -80, -81,
	-83, -82, -88, -84, -89, -156, -161, -13, -167, -90,
	238, -87, 76, -98, -99, -100, -101, -102, -103, -104,
	-106, -107, 379, 385, 442, 618, 61, -181, -183, 646,
	647, 650, 539, 542, 162, 163, 165, 166, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 234, 16, 547, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -155, -25, -160, -23, -163, -165,
	-130, 259, 258, 38, 325, 326, 327, 383, 257, 235,
	237, 15, 31, 42, 358, -182, 85, 540, 236, -184,
	13, 652, -6, -3, -2, -141, -145, -149, -152, -153,
	-150, -151, -4, -119, 120, 249, 620, -353, 375, 621,
	623, 622, 88, 96, -346, -348, 455, 264, 379, 385,
	618, 647, 650, 539, 542, 554, 555, 556, 557, 558,
	559, 560, 561, 563, 564, 565, 566, 567, 568, 569,
	579, 580, 570, 571, 572, 573, 574, 575, 576, 577,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 507, 604, 605, 606, 607, 535,
	562, 598, 599, 600, 601, 356, 357, 544, 276, 300,
	410, 306, 313, 162, 181, 175, 204, 195, 540, 170,
	280, 318, 281, 95, 165, 490, 110, 467, 439, 168,
	295, 297, 299, 536, 537, 369, 302, 534, 301, 303,
	305, 538, 282, 359, 191, 186, 294, 278, 184, 283,
	40, 284, 209, 285, 286, 549, 463, 355, 469, 310,
	52, 437, 185, 464, 298, 466, 213, 217, 481, 482,
	179, 180, 471, 484, 208, 211, 212, 256, 352, 353,
	43, 546, 268, 485, 215, 642, 207, 202, 493, 314,
	312, 206, 178, 201, 279, 65, 219, 218, 220, 433,
	434, 435, 436, 287, 288, 373, 480, 198, 187, 360,
	171, 23, 488, 263, 468, 386, 289, 307, 315, 214,
	216, 270, 275, 330, 548, 441, 274, 311, 486, 183,
	267, 296, 262, 489, 643, 172, 388, 290, 166, 304,
	483, 645, 492, 64, 401, 177, 169, 636, 253, 163,
	272, 277, 644, 291, 292, 293, 533, 317, 316, 308,
	541, 199, 269, 205, 189, 176, 200, 164, 271, 491,
	402, 616, 358, 420, 197, 194, 273, 246, 487, 470,
	167, 424, 403, 192, 319, 611, 612, 613, 374, 351,
	320, 321, 190, 260, 461, 462, 324, 430, 342, 404,
	440, 411, 405, 226, 227, 328, 473, 475, 210, 614,
	331, 332, 333, 465, 334, 335, 336, 337, 378, 56,
	58, 97, 100, 99, 648, 649, 63, 29, 364, 367,
	399, 406, 344, 617, 545, 341, 345, 346, 368, 25,
	422, 390, 426, 425, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 532, 383, 396, 494, 45, 47,
	393, 27, 370, 421, 443, 340, 423, 454, 46, 452,
	453, 474, 26, 372, 371, 62, 44, 429, 431, 432,
	322, 338, 381, 626, 495, 376, 392, 395, 377, 343,
	366, 397, 67, 66, 389, 627, 384, 382, 339, 550,
	551, 347, 578, 361, 438, 529, 528, 527, 526, 525,
	524, 523, 522, 325, 326, 327, 407, 408, 409, 419,
	412, 413, 414, 415, 416, 417, 418, 457, 458, 628,
	476, 478, 479, 477, 241, 651, 362, 363, 244, 630,
	631, 98, 632, 634, 633, 28, 635, 641, 638, 639,
	640, -434, -432, -353, 540, 618, 385, 539, 542, 379,
	358, 647, 650, 383, 264, 325, 326, 327, 455, 356,
	-226, -353, 651, -190, 248, 39, -240, -353, -190, -87,
	-16, -15, -182, -183, -240, 243, -362, 24, 437, -96,
	438, 238, 239, 85, 77, -353, -9, -110, -8, -117,
	-85, -180, 442, -360, -353, 325, 325, -360, 243, -355,
	274, 418, -353, -489, 249, -438, -411, 275, -437, -413,
	-440, -414, 32, 234, 236, 235, 552, 271, 16, 383,
	245, 14, 13, 384, 257, 25, 26, 28, 15, 385,
	387, 29, 388, 391, 392, 393, 42, 396, 397, 264,
	88, 96, 91, 282, -225, -353, -388, -380, 117, -383,
	-375, -376, -378, -331, -527, -373, 85, 144, 145, 152,
	118, 653, -377, -470, 36, 120, 558, 562, 598, 505,
	-323, -324, -325, -326, -327, -328, 543, -353, -528, -526,
	91, 101, 103, 107, 108, 106, 104, 156, 188, 105,
	92, 157, -183, 88, -548, 568, -347, 591, 604, 605,
	606, 607, 590, 61, -497, -506, 242, -504, 155, 193,
	260, 189, 14, 150, 430, 190, 599, 600, 601, 565,
	587, 507, 569, 579, 594, 560, 561, 563, 555, 556,
	557, 559, 570, 572, 586, -507, 582, 592, 593, 578,
	602, 603, 638, 595, 596, 597, 634, 90, 89, 585,
	584, 571, 566, 567, 573, 554, 564, 574, 575, 583,
	588, 589, 367, 110, 368, 369, 497, 359, 80, 370,
	249, 437, 70, 371, 372, 373, 374, 375, 504, 376,
	71, 377, 366, 264, 420, 378, 192, 210, 509, 508,
	510, 501, 498, 496, 499, 500, 502, 503, 576, 577,
	581, -133, -135, 609, -602, -314, -603, 6, 7, 8,
	9, -604, 157, -593, 439, 548, 91, 318, 356, 17,
	497, 637, 538, 637, 538, 167, 164, -425, 167, 116,
	172, 171, -425, 637, 169, 636, 328, 270, -402, -171,
	356, 420, 334, 97, 274, -405, -403, 536, -491, 322,
	318, 294, 244, 113, -172, 254, 253, 111, 497, 242,
	394, 313, 56, 58, -564, -565, 231, 232, 233, -555,
	530, -554, -353, 637, 642, 369, 99, 100, 636, 27,
	243, 380, 270, 475, 473, 474, 476, 477, 478, 479,
	-65, -508, -488, 470, 469, -366, 462, 468, 460, 472,
	463, 357, 336, 552, 335, 234, 630, 537, 531, -341,
	404, 440, 494, 495, 381, 441, 481, 483, 464, 110,
	196, 193, 244, 246, 243, 636, 356, 497, 420, 97,
	334, 243, -564, 642, 164, 481, 483, 439, 274, 418,
	41, -431, 430, -430, -432, 482, 493, 89, 90, 480,
	-341, 110, 461, 461, -602, -314, -181, -183, -120, -553,
	538, 637, 244, 356, 420, 274, 245, 243, 533, 536,
	246, 497, 242, 325, 380, 270, 334, 97, 169, 636,
	-490, -561, 32, -498, 228, 229, 230, 33, 34, -1,
	124, 652, -380, -380, -6, 655, -6, -380, -353, -353,
	159, -247, -251, -248, -250, -249, -253, -252, 193, 194,
	155, 197, 203, 199, 200, 201, 202, 204, 205, 206,
	207, 208, 211, 212, 209, 31, 210, 260, 189, 190,
	191, 192, 213, 175, 195, 545, 221, 176, 222, 177,
	223, 178, 224, 179, 180, 225, 181, 184, 185, 186,
	187, 183, 158, -215, 91, 32, 85, 158, 91, -207,
	266, -190, -240, -232, 158, 653, -207, -602, -200, -201,
	11, -240, -329, -353, 439, 127, -96, 77, -96, 438,
	77, -96, 438, 238, -556, -557, -558, -560, 238, 438,
	437, 239, -115, 158, 282, 17, -360, -360, 83, -240,
	-413, 274, -438, -411, 36, 82, 159, 247, 159, 82,
	85, 381, 356, 420, 382, 497, 243, 394, 246, 274,
	395, 356, 420, 243, 246, 497, 274, 356, 243, 246,
	420, 274, 395, 356, 460, 461, 246, 27, 386, 389,
	390, 461, -512, 493, 159, 116, 113, 114, 115, -380,
	134, -395, 127, 128, 129, 130, 131, 132, 133, 141,
	140, 151, 144, 145, 146, 147, 148, 149, 150, 142,
	143, 137, 117, 135, 139, 136, 119, 154, -183, -380,
	-388, 61, -378, -378, -378, -378, -353, -470, -385, -380,
	85, 85, 85, 85, 85, 158, 104, 91, -380, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, -505, 85, 85, -392, -393, 85, 85, -373, -329,
	85, 91, 91, 85, 85, 85, 91, 85, 85, 85,
	-393, -393, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, -201, 159,
	-200, 85, -200, -201, -184, -183, 32, 33, 32, 33,
	32, 33, 32, 33, -605, 627, 85, 101, 648, 226,
	17, -353, 636, -353, -587, 32, 541, 541, 541, 541,
	486, 547, 170, 171, 172, -400, 249, -400, -400, -224,
	-353, -226, 380, 246, 533, 246, -172, -400, -400, -400,
	-400, -400, 245, -400, 24, 243, 243, 243, 243, -400,
	504, 127, 127, 59, -566, 174, 159, -555, -206, 85,
	-587, 643, 644, 645, -365, 135, 139, -365, -310, 18,
	-310, 24, 272, 272, 272, -365, 312, -613, -614, 17,
	137, -363, -614, -363, -363, -365, -615, 245, 471, 43,
	273, 272, -202, -203, 22, -202, 465, 461, -455, 466,
	467, -367, -614, -366, -365, -365, -366, -365, -365, -365,
	32, 243, 246, 497, 334, 631, -613, -613, 31, 31,
	-489, -489, -240, -489, -489, 531, -342, -353, -489, -489,
	-489, -294, -295, -240, -567, 248, 645, -599, -598, 484,
	-601, 486, 164, -432, 164, -432, 88, -413, 274, 274,
	159, 127, 24, -433, 127, 138, -432, -432, -433, -433,
	-264, 41, -352, 155, -353, 91, -264, 41, -596, -595,
	-240, -201, -184, -183, 86, 86, 86, 541, -587, -489,
	-489, -489, -489, -489, -491, -489, -489, -489, -489, -489,
	-360, -216, -353, -226, 249, -489, -489, -489, -489, -185,
	-186, 146, -380, -353, -185, -3, -143, -142, 121, 122,
	124, 621, 375, 620, 624, 618, -432, 41, -483, 402,
	401, -477, -479, 85, -478, 85, -478, -478, -478, -478,
	-478, 85, 85, -480, 85, -480, -480, -477, -481, 85,
	-481, -482, 85, -482, -481, -353, -459, 547, -386, -388,
	-353, 39, -501, 61, -180, 85, 31, 85, -207, -353,
	190, 169, 635, -502, 61, -180, 85, 31, -201, -136,
	39, -203, 21, 158, 101, 91, -115, -96, 77, -115,
	-96, -96, 86, 159, -559, 107, 108, -562, 208, 199,
	-353, -113, 91, -7, -8, -9, -10, -47, -85, -82,
	-180, 235, 539, 542, -529, -527, 85, 32, 429, 82,
	17, -439, 243, 497, 380, 270, 246, 356, -437, -420,
	-417, -415, -352, -413, -416, -415, -442, -329, 461, -137,
	444, 443, 324, -380, -380, -380, -380, -380, 106, 117,
	351, 107, 108, -375, -396, 32, 320, 321, -376, -376,
	-376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
	-384, -394, -470, 85, 137, 135, 139, 136, 119, -378,
	-378, -376, -376, -266, -352, 155, 86, 159, -380, -552,
	-551, 121, -380, -380, -380, -380, -406, -408, -329, 85,
	-353, -549, -550, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 371, 366, 372, 370, 359, 378,
	373, 374, 192, 528, 529, 522, 523, 524, 525, 526,
	527, -386, -386, -380, -549, -386, -322, 33, 32, -388,
	-388, -388, 86, -380, -563, 349, 348, 350, -204, -353,
	-386, 86, 86, 86, 101, -388, -388, -386, -376, -386,
	-386, -386, -386, -550, -322, -322, -322, -322, 146, -388,
	-388, -322, -322, -322, -322, 146, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, 86, 86, 86,
	146, -388, -202, -135, -510, -509, -380, 41, -136, -203,
	-606, 628, 85, -329, -594, 91, 91, 653, 169, 636,
	17, 497, -353, 17, 243, -353, 101, -353, 101, 487,
	488, 168, 171, 170, -353, 117, -353, -353, 35, 85,
	-216, -400, -400, -400, -571, -353, 92, -421, -418, -415,
	-353, -353, -411, -353, -342, -240, -400, -400, -400, -400,
	-240, -275, 53, 54, 55, -415, -173, 56, 57, -567,
	-554, 35, -205, -353, -310, -378, -378, -380, -415, 274,
	-613, -365, -365, -343, -342, -367, -362, -367, -367, -310,
	-363, -365, -365, -380, -367, -363, -310, -353, 461, -310,
	-310, -455, -365, -364, -353, -364, -400, -342, -343, -343,
	-240, -240, -289, -296, -290, -297, 266, 240, 364, 365,
	237, 235, 11, 236, -304, 313, -401, 505, -270, -271,
	77, 42, -273, 264, 406, 399, 276, 280, 95, 281,
	439, 282, 245, 284, 285, 286, 301, 303, 256, 287,
	288, 289, 430, 290, 163, 302, 291, 292, 293, 382,
	-265, 6, 337, 547, 41, 51, 52, 453, 452, 550,
	277, -353, -571, -569, 31, -353, 31, -421, -353, -353,
	159, 247, -193, -195, -192, -188, -189, -194, -313, -315,
	-191, 85, -240, -183, -353, -432, 159, 485, 487, 488,
	-599, -433, -599, -433, 247, 32, 429, -436, 429, 32,
	-411, -430, 481, 483, -426, 91, 430, -416, -435, 82,
	155, -509, -433, -433, -435, -435, 154, 159, -597, 486,
	487, 231, -202, 101, -242, -240, -571, -420, -411, -353,
	-489, -242, -242, -242, -355, -355, 85, 158, 36, -353,
	-353, -353, -353, -309, 159, -308, 17, -354, -353, 35,
	91, 158, -309, -144, -142, 123, -380, -6, 620, -380,
	-6, -6, -380, -6, -380, -487, 403, 101, 101, -332,
	91, -332, 101, 101, 101, 553, 86, 91, -424, 82,
	-503, -389, -547, 609, -209, 86, -204, -545, -546, -204,
	-208, -353, -501, -232, 127, 127, 127, -503, -209, 86,
	-545, -202, 610, -136, -199, -198, -380, -353, 24, -115,
	-96, -557, 158, 356, 159, -205, -439, -419, -416, -441,
	146, -353, -427, 159, 547, 656, 89, 247, -584, -583,
	421, 86, 159, -513, 248, 504, 91, 653, 437, 226,
	227, 106, 351, 107, 108, -470, -388, -384, -378, -378,
	-376, -376, -382, 261, -382, 116, -380, 654, -379, -551,
	123, -380, 35, 159, 35, 159, 83, 159, 86, -477,
	-380, 158, 86, 86, 17, 17, 86, -380, 86, 86,
	86, 86, 17, 17, -380, 86, 158, 86, 86, 86,
	86, 83, 86, 159, 86, 86, 86, 86, 159, -388,
	-388, -380, -388, 86, 86, 86, -380, -380, -380, -388,
	86, -380, -380, -380, -380, -380, -380, -380, -380, -380,
	-380, -205, -449, 456, -449, -449, 159, 159, 159, 86,
	-136, 85, 101, 159, 649, -336, -335, 91, -353, -353,
	169, 636, -353, 91, 636, -353, 91, 169, 172, 172,
	171, 91, 36, 24, 311, 24, -225, -227, -228, -229,
	-230, -231, 137, 160, 161, 85, -240, -240, -240, -573,
	407, -585, 159, 41, -583, 497, -169, 324, -404, 83,
	-176, 17, 547, -240, -240, -240, -240, -254, 35, 17,
	-187, -241, -353, 85, 86, 159, -412, 83, -353, -343,
	-310, -310, -367, -310, -310, 159, 23, -365, -367, -367,
	-232, -363, -232, 158, -232, -342, -476, 35, -206, 159,
	21, 266, -239, -350, -236, -238, 251, -370, -237, 254,
	-541, 252, 250, 111, 255, 309, 112, 245, -350, -350,
	251, -274, 247, 35, -350, -292, 245, 354, 309, 252,
	21, 266, -291, 245, 112, -353, 251, 255, 252, 250,
	-349, 127, -341, 154, 247, 43, 382, -349, 551, 266,
	-349, -349, -349, -349, -349, -349, -349, 283, 283, -349,
	-349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
	164, -349, -349, -349, -349, -349, -349, 85, 329, 278,
	279, 311, -574, 407, 31, 362, 362, 363, -585, 31,
	-177, 356, -295, -293, -364, 31, -316, -317, -318, -319,
	-321, -320, 68, 72, 74, 78, 69, 70, 71, 75,
	80, 73, 31, 159, -351, -356, 35, -353, 91, -351,
	-183, -195, -193, -351, 85, -433, -598, -600, 489, 486,
	492, -435, -435, 101, 247, 85, 127, -435, -435, 41,
	-352, -595, 493, 487, -136, 159, 82, -242, -217, -218,
	-219, -220, -247, -329, 194, 197, 199, 200, 201, 202,
	204, 205, 206, 207, 208, 211, 212, 209, 210, 260,
	189, 190, 191, 192, 213, 175, 195, 545, 176, 177,
	178, 179, 180, 181, 184, 185, 186, 187, 183, -353,
	-226, -310, -186, -195, -353, 91, -353, 146, -310, 124,
	-6, 122, -148, -147, -146, 125, 618, 624, 124, 124,
	124, 86, 86, 86, 159, 86, 86, 86, 159, 86,
	159, 101, -516, 466, 40, 159, 85, 86, 159, 61,
	159, 127, 86, 159, -380, -353, 91, -380, 86, 61,
	-136, 91, 159, -196, 37, 38, 158, 439, -353, -527,
	86, -441, 159, 247, 158, 158, -417, 385, -352, -419,
	21, 547, -329, 39, -336, 127, 653, -353, 86, -382,
	-382, 116, -378, -375, 86, 124, -380, 122, -245, -247,
	401, 402, -380, -245, -246, -252, 155, 193, 260, 192,
	191, 189, 401, 402, -264, -408, 544, -196, 86, -353,
	-380, -380, 86, -380, -380, 17, -353, -264, -376, -380,
	-201, -201, 86, 86, -448, -449, -448, -448, 86, 86,
	86, 86, -448, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 85, 101, 103, 101, 103, -509,
	-607, 63, 626, 62, 429, 106, 314, 159, 101, 91,
	654, 159, 127, 91, -353, -353, 17, 243, -353, 17,
	172, 91, -586, 318, 356, -460, 101, 318, 356, 497,
	393, 86, 159, -329, -217, -206, 85, -206, -576, 468,
	409, 419, -349, -372, -371, 358, 42, -495, 430, 415,
	416, -418, 274, -342, -582, 98, 127, 82, 341, 345,
	346, 342, 343, 344, -398, -399, -397, -401, -569, 85,
	85, -180, 35, 135, -176, 85, 85, 35, -471, 331,
	-247, -240, -187, -353, 17, 159, -568, 158, -1, -353,
	-411, -365, -310, -380, -380, -310, -365, -365, -367, -353,
	-232, -471, -247, 35, -290, 240, 236, -445, 311, 312,
	-446, -461, 314, -463, 85, -244, -329, -237, -540, -541,
	-400, -353, 112, -540, 112, 85, -244, -329, -329, -293,
	-329, -353, -353, -353, -353, -300, -299, -329, -302, 32,
	-303, -353, -353, -353, -353, 112, -353, 112, -269, 41,
	48, 49, 50, -349, -349, 196, -272, 41, 429, 431,
	432, -302, 101, 101, 101, 101, 91, 91, 91, -349,
	-349, 101, 91, -356, 91, -542, 171, 45, 46, 101,
	101, 101, 101, 41, 91, -277, 41, 294, 298, 295,
	296, 297, 91, 101, 41, 101, 41, 101, 41, -353,
	85, -543, -544, 91, 330, -460, -576, -349, 362, -432,
	127, 127, -372, -581, 324, -179, 497, 32, -210, 240,
	236, -569, -423, -422, -329, -192, -192, -192, -192, -192,
	-192, 68, 79, 68, 68, 68, 73, 68, 73, 68,
	-318, 68, 79, -423, -194, -206, -356, 86, -592, -591,
	-590, -588, 76, 248, 77, -386, -435, 486, 490, 491,
	-419, -368, 91, -426, -214, 24, -240, -240, -493, 304,
	305, 86, 159, -247, -312, 19, 158, -312, 120, -6,
	-144, -146, -380, -6, -380, 620, 375, 621, 91, 101,
	101, -524, 450, 445, 447, 112, -389, -511, -510, 61,
	-180, -204, -503, -546, -509, -353, 654, 654, 654, 654,
	61, -180, -503, -214, -516, -198, -197, 44, -353, 101,
	17, -416, -411, 146, 146, -353, 386, -427, 91, 408,
	91, 243, 654, 91, -336, -375, -380, 86, -255, 180,
	179, -255, 35, 86, 86, -478, -478, -477, -480, -477,
	-255, -255, 86, 85, -196, 86, 24, 86, 86, 86,
	-380, 86, 86, 159, -499, 506, -500, 580, -448, -448,
	-448, -448, -448, -448, -448, -448, -448, -448, -448, -448,
	-448, -448, -448, -448, -448, -391, -390, 266, 451, 633,
	633, 451, 633, 633, 86, 159, -549, 159, -344, 319,
	-344, -335, 91, 247, 91, 169, -353, 91, 636, 91,
	-353, 91, 311, -353, -353, 91, 91, -229, -247, 86,
	35, -233, -234, -235, -244, -236, -238, 35, -577, 95,
	-572, 91, -353, 92, -578, 95, 410, 157, 360, 41,
	411, 412, 427, 355, 101, 101, 417, -570, -353, -178,
	243, 356, -580, 52, 127, 91, -240, -397, -341, 154,
	285, 334, -307, -306, -353, 91, -233, -180, -240, -233,
	-233, -180, -472, 333, 21, 101, 145, -207, 83, 158,
	-195, -241, -353, 146, 86, -310, -232, -310, -310, -365,
	-472, -180, -457, 315, 85, -455, 85, -455, 112, 342,
	-464, -462, 266, -298, 45, 47, -247, -538, -353, -536,
	-538, -353, -536, -536, -400, -380, -298, -244, 247, 31,
	236, -301, 339, 340, 345, -428, 310, 117, -428, 159,
	-196, 159, -353, -264, -264, 31, 91, 91, -242, 86,
	159, 127, 101, 91, -577, -572, 127, -433, 91, 91,
	-578, -582, 127, -243, 243, -342, 159, -210, -210, -310,
	159, 127, -212, -211, 82, 83, -213, 82, -211, -211,
	68, 68, -310, -590, -589, 24, -541, -541, -541, 86,
	86, 15, -219, 41, -311, 20, 21, 146, -311, 124,
	122, 124, 124, -353, 86, 86, -484, 611, -520, -522,
	445, 21, 21, 15, 248, 86, -503, -503, -524, 45,
	46, -411, -427, 430, -240, 159, 654, -245, -283, 91,
	-380, 86, -380, 86, 91, 86, 91, -201, 21, 86,
	159, 86, 86, 86, 159, 86, 86, -380, 86, -549,
	-345, 190, 91, -345, 356, -354, -353, 17, -353, 91,
	-460, 311, 311, 243, 241, -180, 86, 159, -180, 91,
	-575, 421, 91, 91, 101, 41, 101, 157, 413, -496,
	-170, 95, -242, 32, -210, -579, 95, 127, 653, 85,
	-349, -349, -349, -353, 86, 159, -349, -349, 86, 86,
	86, -262, 547, -473, 265, 101, 145, 101, 145, 101,
	-351, -195, -353, -310, -568, 158, -310, -473, -447, 316,
	101, -376, 85, -376, 85, -456, 313, 85, 86, 159,
	-353, -329, -259, -258, -256, 106, 117, 41, 399, -257,
	95, 154, 299, 302, 301, 277, 300, -288, -369, 82,
	405, 339, 340, -401, 611, 535, 250, 111, 112, 387,
	-370, 85, 85, 83, 319, 85, 85, -538, 86, -298,
	-329, 41, -301, 41, 352, 310, -299, -353, 154, -264,
	86, -544, 91, -549, -575, 91, -435, -580, 91, -170,
	-242, -569, -201, -422, -509, -380, 85, -380, 85, 68,
	11, 19, -373, -380, -388, 638, 640, 641, 249, -6,
	621, 375, -279, 612, 91, 21, 91, -518, 91, -423,
	-484, -139, -276, -341, 282, 86, -282, 137, 547, 86,
	86, -448, -448, -451, -450, -454, 451, 311, 459, -388,
	91, 91, 86, 86, 91, -353, 169, 91, 653, 91,
	-460, -460, -353, -221, -247, -174, 547, -262, -235, -174,
	21, 547, 359, 41, 101, 41, 414, 91, -178, 127,
	107, 108, -337, -338, 91, -406, -264, -266, 91, -306,
	-373, -373, -260, -180, 35, -261, -304, -401, 547, -138,
	-137, -260, 547, 85, -474, 163, 101, 145, 101, 101,
	-310, -310, -474, -463, 21, 86, -442, 86, -442, 85,
	127, -376, -462, -465, 61, -256, 106, -376, 91, -266,
	-267, 41, 298, 294, 127, 127, -268, 41, 278, 279,
	-278, 85, 309, 15, 196, 85, 112, 112, -240, -406,
	-406, -539, 341, 342, 343, 347, 345, 346, 344, -539,
	-406, -406, 85, -429, -428, -376, -349, -349, 154, -579,
	-202, -205, -537, -353, 250, 21, 21, -494, 547, 639,
	85, 85, -353, -353, -333, 613, 101, 91, 447, -279,
	-485, 614, -514, -455, -264, 127, 86, 75, 545, 548,
	86, -453, 119, 413, 417, -374, -377, 101, 103, 188,
	157, 86, 86, -353, -340, -339, 91, 91, 91, 311,
	546, -175, 60, 493, 91, 92, 408, 91, 92, 359,
	-170, 91, 654, 159, 127, 86, -443, 266, -180, 159,
	-304, -341, -139, -443, -263, -305, -353, 91, -492, 171,
	332, 547, 101, 145, 101, -201, -475, 171, 332, -446,
	86, 86, 86, -442, 101, 86, -469, -466, 85, -304,
	268, 137, 91, 91, 101, 85, -504, 31, 91, -407,
	85, 86, 86, 86, 86, -406, 101, -264, -349, 86,
	86, 159, 641, 85, -388, -388, 85, 21, -333, -486,
	615, 91, -523, 450, -517, -515, 445, 446, 447, 448,
	91, 546, 65, 549, -452, -453, 417, -374, -377, 609,
	457, 457, 457, 654, 159, 127, -460, -223, -353, 309,
	430, -338, 91, -409, -444, 318, 21, -304, -349, -444,
	86, 159, -349, -349, 332, 101, 145, 101, -202, 332,
	-458, 317, 86, -469, -304, -468, -467, 316, 269, 85,
	86, -380, -392, -349, 86, -281, -280, 543, -406, -409,
	83, -409, 83, -409, 83, -409, 83, 86, -264, -353,
	250, -134, 85, 86, 86, -334, -353, -518, 91, -525,
	248, -521, -522, 449, -515, 21, 447, 21, 21, -140,
	159, 65, 116, 458, 458, 458, -339, 91, 91, -222,
	35, 452, 386, -410, 256, 352, 353, 95, 547, 339,
	340, 21, -445, -264, -305, -373, -373, 101, 101, 86,
	159, -353, 265, 85, -387, -381, -380, 265, 86, -353,
	-287, -285, -286, 82, 464, 307, 308, 86, -539, -539,
	-539, -539, -288, 86, 159, -386, 86, 159, -532, 85,
	101, -520, -519, -521, 21, -518, 21, -518, -518, 454,
	547, -452, 91, -349, -349, 91, 91, 338, -329, 85,
	-457, -467, -466, -387, 86, 159, -428, -286, 82, -285,
	82, 16, 15, -409, -409, -409, -409, 85, 86, -353,
	-535, 31, 86, -531, -530, -330, -526, -353, 450, 451,
	91, -518, 127, 548, -610, -609, 632, 101, 101, -353,
	-442, -447, 86, -381, -284, 304, 305, 31, 171, -284,
	-386, -534, -533, -331, 86, 159, 158, 91, 549, 91,
	86, -463, 106, 41, 306, 86, 159, 127, -530, -353,
	-533, 41, -380, 158, -353,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 0, 0,
	0, 0, 0, 699, 700, 0, 663, 0, 0, 0,
	0, 0, 0, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	0, 336, 332, 253, 254, 255, 256, 257, 258, 259,
	343, 344, 517, 0, 0, 0, 0, 782, -2, 97,
	0, 0, 0, 0, 325, 0, 316, 316, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, -2, 712, 0, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 400, 401, 402, 396, 397, 399, 398, -2, 0,
	0, 712, 0, 0, 0, 790, 0, 0, 0, 833,
	855, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1379, 1380, 1381, 1382, 2178, 2148, -2, 1914,
	1891, 2072, 2073, 1970, 1982, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
	2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257,
	2258, 2259, 2260, 2261, 2262, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, -2, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, -2, -2, -2, 2167, 2168, 2169, 2170,
	2171, 2172, 2173, 2174, 2175, 2176, 2177, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 0, 309, 307, 1861, 1891, 1914, 1970, 1982, 1983,
	2020, 2072, 2073, 2105, 2148, 2164, 2165, 2166, 2178, 0,
	0, 981, 0, 760, 0, 0, 765, 1328, 760, 337,
	701, 702, 790, 816, 661, 0, 374, 0, 1905, 378,
	2155, 0, 0, 0, 0, 658, 368, 369, 370, 371,
	372, 373, 0, 0, 954, 0, 0, 364, 0, 331,
	1972, 2177, 1383, 0, 0, 0, 0, 0, 196, 1105,
	198, 1107, 202, 210, 0, 0, 0, 215, 216, 219,
	220, 221, 222, 223, 0, 227, 0, 229, 232, 0,
	234, 235, 0, 238, 239, 240, 0, 250, 251, 252,
	1108, 1109, 1110, -2, 125, 979, 1819, 1705, 0, 1712,
	1725, 1736, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 1507, 2217, 2258, 2259, 0,
	1485, 1486, 1487, 1488, 1489, 1490, 0, 136, 148, 149,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 0, 1766, 1767,
	1768, 1676, 1452, 1379, 0, 2226, 0, 2248, 2253, 2254,
	2255, 2256, 2247, 0, 0, 1660, 0, 1650, 0, 0,
	-2, -2, 0, 0, 2045, -2, 2260, 2261, 2262, 2223,
	2244, 2252, 2227, 2228, 2251, 2219, 2220, 2221, 2214, 2215,
	2216, 2218, 2230, 2232, 2243, 0, 2239, 2249, 2250, 2153,
	0, 0, 2200, 0, 0, 0, 2195, 150, 151, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1671, -2, 1673, -2,
	1675, -2, 1678, -2, -2, -2, -2, 1683, 1684, -2,
	1686, -2, -2, -2, -2, -2, -2, -2, 1662, 1663,
	1664, 1665, 1654, 1655, 1656, 1657, 1658, 1659, -2, -2,
	-2, 816, 904, 0, 816, 0, 791, 838, 841, 844,
	847, 794, 0, 0, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 327, 315, 317, 0,
	321, 0, 314, 1141, 1141, 1141, 0, 0, 0, 0,
	1141, 1141, 1141, 1141, 1141, 0, 1141, 0, 0, 0,
	0, 0, 1141, 0, 1014, 1112, 1113, 1114, 1139, 1140,
	1213, 0, 0, 0, 717, 713, 714, 715, 716, 804,
	0, 806, 809, 0, 0, 638, 638, 871, 871, 584,
	0, 0, 0, 638, 0, 598, 590, 0, 0, 0,
	638, 0, 0, 811, 811, 0, 641, 648, 638, 638,
	-2, 638, 638, 635, 638, 0, 0, 1153, 604, 605,
	606, 590, 590, 609, 610, 611, 621, 622, 649, 1843,
	0, 0, 517, 517, 0, 517, 517, 0, 517, 517,
	517, 0, 719, 1930, 2015, 1912, 1988, 1871, 1972, 2177,
	0, 282, 2045, 287, 0, 1913, 1933, 0, 0, 1951,
	0, -2, 0, 353, 816, 0, 0, 790, 0, 0,
	0, 0, 517, 517, 517, 517, 517, 1212, 517, 517,
	517, 517, 517, 0, 0, 0, 517, 517, 517, 517,
	0, 0, 856, 857, 852, 853, 854, 858, 859, 5,
	6, 19, 0, 0, 0, 0, 0, 0, 104, 103,
	0, 1820, 1838, 1771, 1772, 1773, 1825, 1775, 1829, 1829,
	1829, 1829, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1829, 1829, 0, 0, 1818, 1795, 1827, 1827,
	1827, 1825, 1822, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1832, 1832, 1835,
	1835, 1832, 0, 414, 412, 413, 1701, 0, 0, 0,
	0, 760, 764, 1326, 0, 0, 0, 816, -2, 0,
	0, 662, 375, 1384, 0, 0, 379, 0, 380, 0,
	0, 382, 0, 0, 0, 403, 0, 406, 390, 391,
	392, 393, 386, 0, 176, 0, 366, 367, 0, 0,
	333, 0, 0, 0, 518, 0, 0, 0, 0, 0,
	0, 207, 203, 211, 214, 224, 231, 0, 243, 245,
	248, 204, 212, 217, 218, 225, 246, 205, 208, 209,
	213, 247, 249, 206, 226, 230, 244, 228, 233, 236,
	237, 242, 0, 177, 0, 0, 0, 0, 0, 1711,
	0, 0, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 1705,
	0, 0, 1471, 1472, 1473, 1474, 0, 1478, 0, 1508,
	0, 0, 0, 0, 0, 0, 1765, 1769, 0, 1701,
	1701, 0, 1701, 1697, 0, 0, 0, 0, 0, 0,
	1701, 1633, 0, 0, 1635, 1651, 0, 0, 1637, 1638,
	0, 1641, 1642, 1701, 0, 1701, 1646, 1701, 1701, 1701,
	1629, 1630, 0, 1697, 1697, 1697, 1697, 0, 0, 1697,
	1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
	1697, 1697, 1697, 1697, 0, 0, 0, 0, 811, 0,
	817, 0, -2, 0, 835, 837, 839, 840, 842, 843,
	845, 846, 848, 849, 796, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 71, 73, 0, 0, 0, 0,
	0, 0, 319, 0, 324, 0, 0, 0, 0, 0,
	978, 0, 0, 1141, 1141, 1141, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 1141, 1141, 1141, 0,
	1159, 0, 0, 0, 719, 718, 0, 805, 0, 0,
	70, 577, 578, 579, 871, 0, 0, 581, 582, 0,
	583, 0, 590, 638, 638, 596, 597, 592, 591, 644,
	645, 641, 0, 641, 641, 871, 0, 615, 616, 617,
	638, 638, 623, 812, 0, 624, 625, 641, 0, 646,
	647, 871, 0, 0, 871, 871, 0, 633, 634, 636,
	638, 0, 0, 1141, 0, 654, 592, 592, 1844, 1845,
	0, 0, 1150, 0, 0, 0, 0, 657, 0, 0,
	0, 430, 431, 0, 0, 720, 0, 261, 265, 0,
	268, 0, 2015, 0, 2015, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	296, 299, 1320, 1321, 1102, 1103, 300, 301, 345, 346,
	0, 811, 834, 836, 830, 831, 832, 0, 72, 0,
	0, 0, 0, 0, 517, 0, 0, 0, 0, 0,
	695, 0, 994, 697, 0, 0, 0, 0, 0, 879,
	873, 875, 949, 136, 879, 8, 121, 118, 0, 19,
	0, 0, 19, 19, 0, 19, 310, 0, 1841, 1839,
	1840, 1774, 1826, 0, 1800, 0, 1801, 1802, 1803, 1814,
	1815, 0, 0, 1796, 0, 1797, 1798, 1799, 1790, 0,
	1791, 1792, 0, 1793, 1794, 308, 411, 0, 0, 1702,
	982, 0, 738, 752, 733, 0, 741, 0, 0, 1328,
	0, 0, 0, 721, 752, 723, 0, 741, 811, 788,
	0, 766, 0, 0, 376, 0, 387, 381, 0, 388,
	383, 384, 0, 0, 405, 407, 408, 409, 394, 395,
	659, 362, 363, 354, 355, 356, 357, 358, 359, 360,
	361, 0, 0, 0, 365, 146, 0, 334, 335, 0,
	0, 0, 190, 191, 192, 193, 194, 195, 197, 181,
	684, 686, 1094, 1106, 0, 1097, 0, 200, 241, 173,
	0, 0, 0, 1706, 1707, 1708, 1709, 1710, 1715, 0,
	1717, 1719, 1721, 1723, 0, 1741, -2, -2, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1726, 1739, 1740, 0, 0, 0, 0, 0, 0, 1737,
	1737, 1732, 0, 1491, 1322, 1323, 1469, 0, 0, 1505,
	1509, 0, 0, 0, 0, 0, 0, 1125, 1825, 0,
	137, 1696, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 0, 0, 1705, 0, 0, 0, 1698, 1699, 0,
	0, 0, 1588, 0, 0, 1594, 1595, 1596, 0, 747,
	0, 1661, 1634, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 905, 0, 756, 758, 759, 785, 766,
	792, 0, 0, 0, 96, 101, 0, 1180, 0, 0,
	0, 0, 0, 0, 0, 74, 1154, 75, 1156, 328,
	329, 0, 0, 323, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 1030, 1031, 515, 1088, 0,
	0, 0, 1104, 1129, 1137, 0, 0, 0, 0, 0,
	1186, 1016, 1021, 1022, 1023, 1017, 1018, 1024, 1025, 0,
	807, 0, 0, 918, 580, 639, 640, 872, 587, 1972,
	592, 871, 871, 599, 593, 600, 643, 601, 602, 603,
	641, 871, 871, 813, 638, 641, 626, 642, 641, 1328,
	630, 0, 637, 1328, 655, 1328, 0, 653, 607, 608,
	1188, 809, 428, 429, 434, 436, 0, 485, 485, 485,
	468, 485, 0, 0, 456, 1846, 0, 0, 0, 0,
	465, 1846, 0, 0, 1846, 1846, 1846, 1846, 1846, 1846,
	1846, 0, 0, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
	1846, 1846, 1846, 1846, 0, 1846, 1846, 1846, 1846, 1846,
	1305, 1846, 0, 484, 1151, 475, 476, 477, 478, 483,
	0, 0, 512, 0, 0, 1029, 0, 515, 0, 1071,
	0, 0, 884, 0, 885, 886, 887, 882, 920, 944,
	944, 0, 944, 924, 1328, 0, 0, 0, 273, 274,
	262, 0, 263, 0, 0, 276, 277, 0, 279, 280,
	281, 288, 1912, 1988, 283, 285, 0, 0, 289, 302,
	303, 304, 0, 0, 294, 295, 0, 0, 348, 349,
	351, 0, 766, 1155, 681, 1324, 682, 683, 687, 0,
	0, 690, 691, 692, 693, 694, 996, 0, 0, 1080,
	1081, 1082, 1083, 871, 0, 880, 0, 876, 950, 0,
	952, 0, 871, 0, 119, 19, 0, 112, 109, 0,
	0, 0, 0, 0, 1821, 1770, 1842, 0, 0, 0,
	1823, 0, 0, 0, 0, 0, 102, 768, 728, 0,
	732, 749, 0, 753, 0, 0, 745, 737, 742, 0,
	0, 762, 729, 1327, 0, 0, 0, 722, 0, 0,
	727, 766, 0, 789, 818, 819, 822, 1385, 0, 389,
	385, 404, 0, 517, 0, 0, 0, 184, 1091, 0,
	185, 189, 179, 0, 0, 0, 1096, 0, 1093, 1098,
	0, 199, 0, 0, 174, 175, 1171, 1180, 0, 0,
	0, 1716, 1718, 1720, 1722, 1724, 0, 1727, 1737, 1737,
	1733, 0, 1728, 0, 1730, 0, 1706, 1475, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 1578, 1579, 0, 0, 1583, 0, 1585, 1586,
	1587, 1589, 0, 0, 0, 1593, 0, 1632, 1653, 1636,
	1639, 0, 1643, 0, 1645, 1647, 1648, 1649, 0, 816,
	816, 0, 0, 1549, 1549, 1549, 0, 0, 0, 0,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 1495, 1496, 0, 0, 0, 906,
	786, 0, 0, 0, 0, 0, 1178, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 76, 330, 318, 320,
	0, 0, 1142, 0, 0, 0, 0, 0, 984, 985,
	987, 0, 990, 991, 992, 996, 809, 0, 809, 1041,
	1846, 519, 0, 0, 1090, 0, 1060, 0, 0, 0,
	-2, 0, 0, 1137, 0, 0, 0, 1190, 0, 0,
	0, 706, 710, 23, 810, 0, 585, 0, 586, 638,
	594, 595, 871, 618, 619, 0, 0, 871, 638, 638,
	629, 641, 650, 0, 651, 1328, 1190, 0, 0, 1150,
	1256, 1224, 446, 0, 1340, 1341, 486, 0, 1347, 1356,
	1141, 1417, 0, 1356, 0, 0, 1358, 1359, 0, 0,
	0, 0, 469, 470, 0, 455, 0, 0, 0, 0,
	0, 0, 454, 0, 0, 496, 0, 0, 0, 0,
	0, 1847, 1846, 1846, 0, 463, 464, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 1846, 1846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	1313, 0, 1041, 1846, 0, 0, 0, 0, 519, 1058,
	1076, 0, 432, 433, 493, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 809, 945, 0, 947, 948, 922,
	-2, 0, 884, 927, 1701, 0, 266, 267, 0, 0,
	272, 290, 292, 264, 0, 0, 0, 291, 293, 297,
	298, 347, 350, 352, 828, 0, 0, 1214, 0, 997,
	998, 1000, 1001, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1896, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 995,
	698, 862, 874, 881, 951, 953, 137, 877, 862, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1831, 1830, 1816, 0, 1817, 1828, 1833, 0, 1836,
	0, 415, 772, 0, 0, 752, 754, 0, 0, 752,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 752,
	828, 768, 0, 825, 823, 824, 0, 0, 660, 147,
	410, 0, 0, 0, 0, 0, 685, 0, 1095, 181,
	0, 0, 201, 0, 0, 0, 1180, 1175, 1700, 1729,
	1731, 0, 1738, 1734, 1470, 1479, 1506, 0, 0, 1512,
	1524, 1524, 0, 0, 0, 1515, 1829, 1829, 1518, 1825,
	1827, 1825, 1524, 1524, 0, 1126, 0, 1127, 822, 138,
	0, 0, 1584, 0, 0, 0, 748, 0, 0, 0,
	1545, 1547, 1549, 1549, 1556, 1550, 1557, 1558, 1549, 1549,
	1549, 1549, 1563, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
	1549, 1549, 1549, 1549, 1543, 0, 0, 1759, 1760, 757,
	0, 0, 799, 800, 801, 802, 803, 0, 0, 61,
	61, 1180, 0, 95, 87, 0, 0, 0, 0, 0,
	322, 0, 77, 78, 0, 0, 85, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 1333, 0, 1045, 1042,
	1043, 1044, 0, 1085, 520, 521, 522, 523, 0, 0,
	0, 1089, 0, 0, 1053, 0, 0, 0, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, -2, 1145, 0, 0, 0,
	1333, 1164, 0, 0, 1169, 1333, 1333, 0, 1198, 0,
	1187, 760, 0, -2, 0, 0, 708, 0, 0, 919,
	588, 871, 612, 814, 815, 1328, 871, 871, 638, 656,
	652, 1198, 1189, 0, 435, 485, 0, 1244, 0, 0,
	1250, 0, 1257, 439, 0, 487, 0, 1346, 1373, 1357,
	1373, 1418, 1373, 1373, 1141, 0, 487, 0, 0, 457,
	0, 0, 0, 0, 0, 453, 490, 822, 440, 442,
	443, 444, 494, 495, 497, 0, 499, 500, 459, 471,
	472, 473, 474, 0, 0, 0, 466, 479, 480, 481,
	482, 441, 1273, 1274, 1275, 1278, 1279, 1280, 1281, 0,
	0, 1284, 1285, 1286, 1287, 1288, 1370, 1371, 1372, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1314, 1315, 1316, 1317,
	1318, 1319, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	0, 0, 1309, 0, 0, 0, 1045, 0, 0, 0,
	0, 0, 1085, 1060, 0, 1078, 0, 1072, 1073, 0,
	0, 730, 871, 340, 0, 914, 907, 0, 891, 0,
	893, 911, 894, 912, 913, 898, 0, 900, 0, 896,
	897, 902, 895, 871, 883, 921, 946, 923, 926, 928,
	929, 935, 0, 0, 0, 0, 260, 269, 270, 271,
	278, 0, 539, 284, 784, 0, 1325, 688, 689, 1215,
	1216, 696, 0, 1002, 860, 0, 0, 860, 117, 120,
	0, 115, 0, 0, 0, 0, 107, 105, 1824, 0,
	0, 774, 161, 0, 0, 0, 750, 0, 755, 752,
	736, 746, 735, 743, 744, 763, 1329, 1330, 1331, 1332,
	752, 726, 725, 787, 772, 820, 821, 0, 1386, 377,
	0, 1092, 181, 186, 187, 188, 182, 180, 1099, 0,
	1101, 0, 1173, 0, 0, 1735, 1511, 1480, 1513, 1525,
	1526, 1514, 0, 1482, 1483, 1516, 1517, 1519, 1520, 1521,
	1522, 1523, 1484, 0, 1128, 1580, 0, 1582, 1590, 1591,
	0, 1640, 1644, 0, 0, 0, 0, 0, 1554, 1555,
	1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 816, 1544, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 63, 0,
	63, 1179, 1181, 0, 949, 0, 0, 92, 0, 0,
	79, 80, 0, 0, 0, 977, 980, 986, 988, 0,
	0, 0, 1334, 1335, 1337, 1338, 1339, 0, 1013, 0,
	0, 1033, 1034, 1035, 1047, 0, 0, 0, 525, 526,
	0, 0, 0, 538, 534, 535, 536, 516, 1084, 1067,
	0, 0, 1056, 0, 0, 1066, 0, 1146, 1846, 1846,
	1846, 0, 0, 1258, 1846, 1846, 0, 1166, 1168, 0,
	0, 1262, 1201, 0, 0, 1192, 0, 944, 0, 0,
	871, 707, 710, 711, 808, 589, 627, 631, 628, 871,
	1201, 427, 1222, 0, 0, 0, 0, 0, 1254, 0,
	0, 1226, 0, 458, 488, 0, -2, 0, 1374, 0,
	1360, 1374, 0, 0, 1373, 0, 447, 487, 0, 0,
	0, 501, 505, 506, 0, 503, 1413, 0, 504, 0,
	492, 0, 498, 1276, 1277, 0, 1282, 1283, 0, 1307,
	0, 0, 0, 438, 507, 0, 0, 0, 508, 509,
	514, 1053, 0, 1067, 0, 1077, 0, 1074, 1075, 816,
	0, 0, 888, 915, 0, 0, 889, 0, 890, 892,
	899, 901, 339, 930, 0, 0, 932, 933, 934, 925,
	286, 829, 999, 0, 850, 0, 0, 878, 851, 0,
	19, 0, 0, 110, 1834, 1837, 776, 0, 773, 162,
	0, 0, 0, 0, 740, 751, 734, 724, 774, 826,
	827, 183, 178, 1100, 1183, 0, 1174, 0, 1437, 1493,
	0, 1592, 0, 1549, 1546, 1549, 1548, 1540, 0, 1497,
	0, 1499, 1500, 1501, 0, 1503, 1504, 0, 795, 0,
	59, 0, 62, 60, 0, 94, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 1019, 1262, 0, 1019, 1046,
	1032, 0, 1086, 1087, 0, 527, 528, 0, 531, 537,
	1048, 0, 0, 1050, 1051, 1052, 0, 0, 1064, 0,
	0, 0, 0, 1138, 1152, 0, 0, 0, -2, 0,
	-2, 1163, 0, 1207, 0, 1199, 0, 1191, 0, 1194,
	871, 871, -2, 704, 709, 0, 632, 1207, 1224, 0,
	1245, 0, 0, 0, 0, 0, 0, 0, 1225, 0,
	1238, 489, 1375, -2, 1389, 1391, 0, 1151, 1394, 1395,
	0, 0, 0, 0, 0, 0, 1444, 1403, 0, 0,
	1407, 1408, 1409, 0, 0, 1412, 0, 1753, 1754, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 1354, 448,
	449, 0, 451, 452, 1846, 1414, 491, 445, 1846, 461,
	1306, 1310, 1311, 1308, 513, 510, 511, 1056, 1059, 1070,
	1079, 731, 811, 341, 342, 916, 0, 908, 939, 936,
	0, 0, 1003, 861, 869, 2200, 2202, 2199, 111, 116,
	0, 0, 778, 0, 775, 0, 769, 771, 172, 739,
	776, 132, 164, 0, 0, 1481, 0, 0, 0, 1581,
	1631, 1552, 1553, 0, 1541, 0, 1535, 1536, 1537, 1542,
	0, 0, 798, 793, 64, 90, 0, 93, 68, 81,
	0, 0, 0, 0, 1005, 1012, 1026, 1157, 1336, 1011,
	0, 0, 524, 529, 0, 532, 533, 1068, 1067, 0,
	1054, 1055, 0, 1062, 0, 0, 1147, 1148, 1149, 1259,
	1260, 1261, 1217, 1165, 0, -2, 1270, 0, 0, 1161,
	1183, 1217, 0, 0, 1195, 0, 1202, 0, 1200, 1193,
	816, 705, 1204, 437, 1256, 1246, 0, 1248, 0, 0,
	0, 0, 1227, -2, 0, 1390, 1392, 1393, 1396, 1397,
	1398, 1449, 1450, 1451, 0, 0, 1401, 1446, 1447, 1448,
	1402, 0, 0, 0, 0, 0, 1751, 1752, 1442, 0,
	0, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1362,
	0, 0, 0, 1353, 1355, 450, 0, 0, 1846, 1069,
	338, 0, 0, 940, 942, 937, 938, 863, 0, 0,
	0, 0, 106, 108, 123, 0, 777, 163, 0, 778,
	134, 0, 155, 0, 1184, 0, 1492, 0, 0, 0,
	1551, 1538, 0, 0, 0, 0, 0, 1755, 1756, 1757,
	0, 1498, 1502, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 1027, 1028, 1036, 1037, 0, 1039, 1040, 530,
	1049, 1057, 1061, 1064, 0, 1116, 1219, 0, 1167, 1150,
	1272, 1846, 1170, 1219, 0, 1264, 1846, 1846, 1185, 0,
	1197, 0, 1209, 0, 1203, 811, 426, 0, 1206, 1242,
	1247, 1249, 1251, 0, 1255, 1253, 1228, -2, 0, 1236,
	0, 0, 1399, 1400, 0, 0, 1650, 1846, 0, 1432,
	0, 1116, 1116, 1116, 1116, 0, 502, 460, 0, 917,
	931, 0, 870, 0, 0, 0, 0, 0, 767, 124,
	0, 133, 152, 0, 165, 166, 0, 0, 0, 0,
	1176, 0, 1440, 1441, 0, 1527, 0, 0, 0, 1531,
	1532, 1533, 1534, 65, 68, 0, 0, 0, 1004, 0,
	1038, 1063, 1065, 1115, 1160, 0, 1256, 1271, 0, 1162,
	1263, 0, 0, 0, 1196, 1208, 0, 1211, 703, 1205,
	1223, 0, 1252, 1229, 1237, 0, 1232, 0, 0, 0,
	1445, 0, 1406, 0, 1411, 1420, 1433, 0, 0, 1342,
	0, 1344, 0, 1348, 0, 1350, 0, 0, 462, 941,
	943, 0, 1701, 865, 866, 0, 780, 770, 135, 139,
	0, 161, 158, 0, 167, 0, 0, 0, 0, 1172,
	0, 1438, 0, 1528, 1529, 1530, 67, 69, 84, 0,
	1006, 1007, 1020, 1117, 1846, 1846, 0, 0, 0, 1123,
	1124, 0, 1244, 1276, 1265, 1266, 1267, 1210, 1243, 1231,
	0, -2, 1239, 0, 0, 1703, 1713, 1714, 1404, 1410,
	1419, 1421, 1422, 0, 1434, 1435, 1436, 1443, 1116, 1116,
	1116, 1116, 1352, 864, 0, 0, 779, 0, 126, 0,
	0, 156, 157, 159, 0, 168, 0, 170, 171, 0,
	0, 1539, 1008, 0, 0, 1120, 1121, 0, 1220, 0,
	1222, 1233, -2, 0, 1241, 0, 1405, 1423, 0, 1424,
	0, 0, 0, 1343, 1345, 1349, 1351, 1701, 867, 781,
	1182, 0, 140, 0, 142, 144, 145, 1376, 153, 154,
	160, 169, 0, 0, 993, 1009, 0, 1118, 1119, 1122,
	0, 1224, 1240, 1704, 1425, 1427, 1428, 0, 0, 1426,
	0, 127, 128, 0, 141, 0, 0, 1177, 1439, 1010,
	1221, 1218, 1429, 1431, 1430, 868, 0, 0, 143, 1377,
	129, 130, 131, 0, 1378,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 655, 652,
	128, 127, 129, 3, 656, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 653, 140, 654, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:848
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:964
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1036
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1102
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1145
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1170
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1292
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1298
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1313
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1319
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1484
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1519
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1604
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1634
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1735
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1744
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1754
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1766
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1773
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1782
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1814
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1820
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1828
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1848
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1867
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1915
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1928
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1956
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1998
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2004
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2012
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2063
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2089
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2310
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2342
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2370
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2397
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2407
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2413
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2420
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2436
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2497
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2507
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2530
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2555
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2578
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2630
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2637
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2650
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2654
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2660
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2664
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2670
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2674
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2680
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2684
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2695
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2701
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2824
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2840
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2869
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2873
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2879
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2895
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2899
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2919
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2923
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2948
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2952
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3007
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3011
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3045
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3065
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3101
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3141
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3145
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3151
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3162
		{
			yyVAL.str = "true"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3163
		{
			yyVAL.str = "false"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3164
		{
			yyVAL.str = yyDollar[1].str
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3169
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3175
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3184
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3191
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3199
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3203
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3228
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3251
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3261
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3268
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3277
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3285
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3289
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3295
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3306
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3310
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3316
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3320
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3344
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3354
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3364
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3380
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3402
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3412
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3418
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3432
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3460
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3544
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3549
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3580
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3584
		{
			yyVAL.str = string("COLUMN")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3589
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3595
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3601
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3609
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3613
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3619
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3634
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3640
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3646
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3652
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3658
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3665
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3672
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3680
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3686
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3698
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3704
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3712
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3716
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3723
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3756
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3771
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3799
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3829
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3833
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3841
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3845
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3854
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3882
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3889
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3901
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3912
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3931
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3938
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3945
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3951
		{
			yyVAL.item = nil
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3956
		{
			yyVAL.item = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4004
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4016
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4047
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4074
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4078
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4089
		{
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4093
		{
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4144
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4150
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4214
		{
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4216
		{
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4244
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4248
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4252
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4264
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4354
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4389
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4393
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4399
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4414
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4418
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4432
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4439
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4447
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4453
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4459
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4464
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4472
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4478
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4483
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4489
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4527
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4535
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4543
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4551
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4555
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4561
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4582
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4597
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4605
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4613
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4621
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4641
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4649
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4665
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4670
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4677
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4693
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4706
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4717
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4721
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4727
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4733
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4742
		{
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4744
		{
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4747
		{
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4756
		{
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4760
		{
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4765
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4774
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4787
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4795
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4802
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4809
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4829
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4837
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4847
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4851
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4857
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4870
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4878
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4885
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4892
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4911
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4915
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4919
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4924
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4928
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4932
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4951
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4957
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4961
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4967
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4971
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4977
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4982
		{
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4993
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4997
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5004
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5013
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5023
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5029
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5033
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5042
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5066
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5077
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5099
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5139
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5143
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5156
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5160
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5165
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5169
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5176
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5181
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5223
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5229
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5239
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5254
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5258
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5282
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5313
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5329
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5333
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5351
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5356
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5360
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5383
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5389
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5395
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5399
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5405
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5436
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5440
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5456
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5470
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5484
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5516
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5524
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5532
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5541
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5549
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5565
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5573
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5581
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5589
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5597
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5615
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5626
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5640
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5648
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5661
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5674
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5683
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5711
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5722
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5726
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5731
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5735
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5744
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5750
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5754
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5760
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5764
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5768
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5777
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5785
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5791
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5799
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5809
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5819
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5823
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5829
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5838
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5847
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5856
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5864
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5875
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5885
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5889
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5895
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5899
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5909
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5913
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5917
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5921
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5927
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5933
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5944
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5948
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5954
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5960
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5964
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5970
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5976
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5980
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5984
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5988
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5994
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5998
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6004
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6008
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6014
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6018
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6024
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6028
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6038
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6051
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6057
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6063
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6077
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6088
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6095
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6099
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6105
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6115
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6119
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6123
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6128
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6132
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6136
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6140
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6145
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6149
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6153
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6157
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6161
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6166
		{
			yyVAL.str = ""
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6170
		{
			yyVAL.str = yyDollar[1].str
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6174
		{
			yyVAL.str = yyDollar[2].str
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6180
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6184
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6189
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6193
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6197
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6201
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6205
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6211
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 977:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6253
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6266
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6272
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 980:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6278
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6291
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6296
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6303
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6310
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6314
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6326
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6339
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6350
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6383
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6388
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6395
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6402
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6406
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6412
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6418
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6422
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6426
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6432
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6438
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6444
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6448
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6454
		{
			yyVAL.str = ""
		}
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6461
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1011:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6467
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6482
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6499
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6516
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6520
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6526
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6530
		{
			yyVAL.str = "DEFINER = "
		}
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6534
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6539
		{
			yyVAL.str = ""
		}
	case 1020:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6543
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6557
		{
			yyVAL.str = ""
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6565
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6571
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6576
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6582
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6595
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6600
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6605
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6611
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6618
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6625
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6632
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6639
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6647
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6653
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6660
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6667
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6675
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6681
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6690
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6707
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6723
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6742
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6748
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6757
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6775
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6781
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6788
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6796
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6802
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6810
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6816
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6824
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6830
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6839
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6843
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6848
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6852
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6859
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6864
		{
			yyVAL.str = ""
		}
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6868
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1069:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6874
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6887
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6902
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6908
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6914
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6920
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6927
		{
			yyVAL.str = ""
		}
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6931
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6936
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6940
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6946
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6954
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6962
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6970
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6978
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6983
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6995
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7006
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7115
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7119
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7125
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7138
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7142
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7148
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7161
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7165
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7169
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7178
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7184
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7191
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7197
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7206
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7213
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7224
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7228
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7234
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7243
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7247
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7251
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7256
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7260
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7264
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7268
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7274
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7305
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7309
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7335
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7341
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7353
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7359
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7365
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7371
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7377
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7385
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7389
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7395
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7409
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7423
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7427
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7431
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7435
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7439
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7443
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7447
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7453
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7468
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7472
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7483
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7487
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7496
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7502
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7506
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7512
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7521
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7530
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7536
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7540
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7546
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7557
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7563
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7581
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7599
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7617
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7633
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7646
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7658
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7667
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7679
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7689
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7699
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7710
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7720
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7731
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7739
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7750
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7757
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7767
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7780
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7788
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7797
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7806
		{
			yyVAL.str = ""
		}
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7810
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7816
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7820
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7825
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7829
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7836
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7848
		{
			yyVAL.str = ""
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7852
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1185:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7858
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7879
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7893
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7897
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7901
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7911
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7918
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7925
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7932
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7943
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7947
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7955
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7962
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7969
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7973
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7980
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7987
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7991
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7997
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8007
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8014
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8021
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8028
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8035
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8039
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8044
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8048
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8052
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8057
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8061
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8074
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8078
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8086
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8094
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8098
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8110
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8114
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8120
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8124
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8130
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8143
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8161
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8167
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8171
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8177
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8186
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8197
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8201
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8210
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8216
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8221
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8229
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8233
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8243
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8247
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8258
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8266
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8274
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8282
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8293
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8302
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8312
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8322
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8326
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8331
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8335
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8341
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8345
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8351
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8360
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8374
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8380
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8384
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8390
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8413
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8419
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8423
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8427
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8433
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8437
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8441
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8445
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8449
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8453
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8457
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8462
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8466
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8470
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8474
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8478
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8482
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8486
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8490
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8498
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8502
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8506
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8510
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8516
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8526
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8530
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8534
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8538
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8544
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8550
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8556
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8562
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8568
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8582
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8586
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8591
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8602
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8606
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8612
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8623
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8627
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8633
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8637
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8641
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8645
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8649
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8653
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8667
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8671
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8680
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8686
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8694
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8698
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8705
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8714
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8722
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8730
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8741
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8747
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8751
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8755
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8761
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8765
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8771
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8784
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8797
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8836
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8876
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8890
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8896
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8909
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8922
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8935
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8948
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8963
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8973
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8979
		{
			yyVAL.str = ""
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8983
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8993
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8999
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9005
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9026
		{
			yyVAL.str = ""
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9030
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9036
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9042
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9046
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9051
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9063
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9067
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9071
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9077
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9083
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9087
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9092
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9103
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9109
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9113
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9119
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9123
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9127
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9131
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9135
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9139
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9144
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9148
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9160
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9164
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9168
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9172
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9176
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9180
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9194
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9198
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9202
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9210
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9214
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9220
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9224
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9229
		{
			yyVAL.str = ""
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9233
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9239
		{
			yyVAL.str = ""
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9243
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1419:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9249
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9266
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9273
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9280
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9287
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9294
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9303
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9309
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9315
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9319
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9323
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9327
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9331
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9336
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9343
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9347
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9351
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9356
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9360
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9364
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9368
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9372
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9381
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9386
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9390
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9406
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9416
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9420
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9428
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9432
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9436
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9440
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9444
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9448
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9452
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9456
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9460
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9466
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9470
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9474
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9478
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9482
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9486
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9498
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9502
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9548
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9552
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9557
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9577
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9581
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9591
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9595
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9599
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9607
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9611
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9615
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9619
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9632
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1494:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9638
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9647
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9656
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9667
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9677
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9687
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9696
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9716
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9726
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9735
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9745
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9749
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9758
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9764
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9768
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9774
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9783
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9795
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9812
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9842
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9855
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9867
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9896
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9911
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9928
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9943
		{
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9950
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9954
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9958
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9964
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9968
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9972
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9976
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9982
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9986
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9990
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9996
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10004
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10018
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10025
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10034
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10039
		{
			yyVAL.str = ","
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10043
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10048
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10052
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1549:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10057
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10064
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10090
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10102
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10114
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10125
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10147
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10157
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10167
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10178
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10189
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10211
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10222
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10233
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10255
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10266
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10277
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10288
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10299
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10310
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10321
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10332
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10356
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10365
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10374
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10383
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10392
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10403
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10412
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10422
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10431
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10440
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10449
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10458
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10494
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10506
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10529
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10578
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10591
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10603
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10612
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10620
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10628
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10641
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10672
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10681
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10693
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10703
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10713
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10722
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10733
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10742
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10752
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10761
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10770
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10784
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10813
		{
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10815
		{
		}
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10869
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10883
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10888
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10892
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10898
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10902
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10908
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10912
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10923
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10927
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10936
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10940
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10944
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10949
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10953
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10983
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10987
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10991
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10995
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11007
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11015
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11027
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11031
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11035
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11039
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11045
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11049
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11055
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11059
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11066
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11070
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11074
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11080
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11092
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11096
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11100
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11104
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11110
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11114
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11118
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11122
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11128
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11141
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11146
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11152
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11169
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11178
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11182
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11186
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11190
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11201
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11205
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11209
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11216
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11227
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11232
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11250
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11274
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11287
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11300
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11313
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11326
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11339
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11352
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11365
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11378
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11391
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11404
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11419
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11446
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11488
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11524
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11560
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11577
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11589
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11609
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11629
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11665
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11678
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11704
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11729
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11741
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11801
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11825
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11837
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11850
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11863
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11876
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11889
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11904
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11912
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11921
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11931
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11954
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11959
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11965
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11972
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11976
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11981
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11985
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11991
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11997
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12004
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12011
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12020
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12027
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12034
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12043
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12047
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12051
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12057
		{
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12059
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12069
		{
			yyVAL.str = ""
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12073
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
