// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const CHAIN = 57495
const NO = 57496
const RELEASE = 57497
const PRIORITY = 57498
const QUICK = 57499
const BIT = 57500
const TINYINT = 57501
const SMALLINT = 57502
const MEDIUMINT = 57503
const INT = 57504
const INTEGER = 57505
const BIGINT = 57506
const INTNUM = 57507
const REAL = 57508
const DOUBLE = 57509
const FLOAT_TYPE = 57510
const DECIMAL = 57511
const NUMERIC = 57512
const DECIMAL_VALUE = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const DATALINK = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const UUID = 57535
const VECF32 = 57536
const VECF64 = 57537
const GEOMETRY = 57538
const POINT = 57539
const LINESTRING = 57540
const POLYGON = 57541
const GEOMETRYCOLLECTION = 57542
const MULTIPOINT = 57543
const MULTILINESTRING = 57544
const MULTIPOLYGON = 57545
const INT1 = 57546
const INT2 = 57547
const INT3 = 57548
const INT4 = 57549
const INT8 = 57550
const S3OPTION = 57551
const STAGEOPTION = 57552
const SQL_SMALL_RESULT = 57553
const SQL_BIG_RESULT = 57554
const SQL_BUFFER_RESULT = 57555
const LOW_PRIORITY = 57556
const HIGH_PRIORITY = 57557
const DELAYED = 57558
const CREATE = 57559
const ALTER = 57560
const DROP = 57561
const RENAME = 57562
const ANALYZE = 57563
const PHYPLAN = 57564
const ADD = 57565
const RETURNS = 57566
const SCHEMA = 57567
const TABLE = 57568
const SEQUENCE = 57569
const INDEX = 57570
const VIEW = 57571
const TO = 57572
const IGNORE = 57573
const IF = 57574
const PRIMARY = 57575
const COLUMN = 57576
const CONSTRAINT = 57577
const SPATIAL = 57578
const FULLTEXT = 57579
const FOREIGN = 57580
const KEY_BLOCK_SIZE = 57581
const SHOW = 57582
const DESCRIBE = 57583
const EXPLAIN = 57584
const DATE = 57585
const ESCAPE = 57586
const REPAIR = 57587
const OPTIMIZE = 57588
const TRUNCATE = 57589
const MAXVALUE = 57590
const PARTITION = 57591
const REORGANIZE = 57592
const LESS = 57593
const THAN = 57594
const PROCEDURE = 57595
const TRIGGER = 57596
const STATUS = 57597
const VARIABLES = 57598
const ROLE = 57599
const PROXY = 57600
const AVG_ROW_LENGTH = 57601
const STORAGE = 57602
const DISK = 57603
const MEMORY = 57604
const CHECKSUM = 57605
const COMPRESSION = 57606
const DATA = 57607
const DIRECTORY = 57608
const DELAY_KEY_WRITE = 57609
const ENCRYPTION = 57610
const ENGINE = 57611
const MAX_ROWS = 57612
const MIN_ROWS = 57613
const PACK_KEYS = 57614
const ROW_FORMAT = 57615
const STATS_AUTO_RECALC = 57616
const STATS_PERSISTENT = 57617
const STATS_SAMPLE_PAGES = 57618
const DYNAMIC = 57619
const COMPRESSED = 57620
const REDUNDANT = 57621
const COMPACT = 57622
const FIXED = 57623
const COLUMN_FORMAT = 57624
const AUTO_RANDOM = 57625
const ENGINE_ATTRIBUTE = 57626
const SECONDARY_ENGINE_ATTRIBUTE = 57627
const INSERT_METHOD = 57628
const RESTRICT = 57629
const CASCADE = 57630
const ACTION = 57631
const PARTIAL = 57632
const SIMPLE = 57633
const CHECK = 57634
const ENFORCED = 57635
const RANGE = 57636
const LIST = 57637
const ALGORITHM = 57638
const LINEAR = 57639
const PARTITIONS = 57640
const SUBPARTITION = 57641
const SUBPARTITIONS = 57642
const CLUSTER = 57643
const TYPE = 57644
const ANY = 57645
const SOME = 57646
const EXTERNAL = 57647
const LOCALFILE = 57648
const URL = 57649
const PREPARE = 57650
const DEALLOCATE = 57651
const RESET = 57652
const EXTENSION = 57653
const RETENTION = 57654
const PERIOD = 57655
const INCREMENT = 57656
const CYCLE = 57657
const MINVALUE = 57658
const PUBLICATION = 57659
const SUBSCRIPTIONS = 57660
const PUBLICATIONS = 57661
const PROPERTIES = 57662
const PARSER = 57663
const VISIBLE = 57664
const INVISIBLE = 57665
const BTREE = 57666
const HASH = 57667
const RTREE = 57668
const BSI = 57669
const IVFFLAT = 57670
const MASTER = 57671
const ZONEMAP = 57672
const LEADING = 57673
const BOTH = 57674
const TRAILING = 57675
const UNKNOWN = 57676
const LISTS = 57677
const OP_TYPE = 57678
const REINDEX = 57679
const EXPIRE = 57680
const ACCOUNT = 57681
const ACCOUNTS = 57682
const UNLOCK = 57683
const DAY = 57684
const NEVER = 57685
const PUMP = 57686
const MYSQL_COMPATIBILITY_MODE = 57687
const UNIQUE_CHECK_ON_AUTOINCR = 57688
const MODIFY = 57689
const CHANGE = 57690
const SECOND = 57691
const ASCII = 57692
const COALESCE = 57693
const COLLATION = 57694
const HOUR = 57695
const MICROSECOND = 57696
const MINUTE = 57697
const MONTH = 57698
const QUARTER = 57699
const REPEAT = 57700
const REVERSE = 57701
const ROW_COUNT = 57702
const WEEK = 57703
const REVOKE = 57704
const FUNCTION = 57705
const PRIVILEGES = 57706
const TABLESPACE = 57707
const EXECUTE = 57708
const SUPER = 57709
const GRANT = 57710
const OPTION = 57711
const REFERENCES = 57712
const REPLICATION = 57713
const SLAVE = 57714
const CLIENT = 57715
const USAGE = 57716
const RELOAD = 57717
const FILE = 57718
const TEMPORARY = 57719
const ROUTINE = 57720
const EVENT = 57721
const SHUTDOWN = 57722
const NULLX = 57723
const AUTO_INCREMENT = 57724
const APPROXNUM = 57725
const SIGNED = 57726
const UNSIGNED = 57727
const ZEROFILL = 57728
const ENGINES = 57729
const LOW_CARDINALITY = 57730
const AUTOEXTEND_SIZE = 57731
const ADMIN_NAME = 57732
const RANDOM = 57733
const SUSPEND = 57734
const ATTRIBUTE = 57735
const HISTORY = 57736
const REUSE = 57737
const CURRENT = 57738
const OPTIONAL = 57739
const FAILED_LOGIN_ATTEMPTS = 57740
const PASSWORD_LOCK_TIME = 57741
const UNBOUNDED = 57742
const SECONDARY = 57743
const RESTRICTED = 57744
const USER = 57745
const IDENTIFIED = 57746
const CIPHER = 57747
const ISSUER = 57748
const X509 = 57749
const SUBJECT = 57750
const SAN = 57751
const REQUIRE = 57752
const SSL = 57753
const NONE = 57754
const PASSWORD = 57755
const SHARED = 57756
const EXCLUSIVE = 57757
const MAX_QUERIES_PER_HOUR = 57758
const MAX_UPDATES_PER_HOUR = 57759
const MAX_CONNECTIONS_PER_HOUR = 57760
const MAX_USER_CONNECTIONS = 57761
const FORMAT = 57762
const VERBOSE = 57763
const CONNECTION = 57764
const TRIGGERS = 57765
const PROFILES = 57766
const LOAD = 57767
const INLINE = 57768
const INFILE = 57769
const TERMINATED = 57770
const OPTIONALLY = 57771
const ENCLOSED = 57772
const ESCAPED = 57773
const STARTING = 57774
const LINES = 57775
const ROWS = 57776
const IMPORT = 57777
const DISCARD = 57778
const JSONTYPE = 57779
const MODUMP = 57780
const OVER = 57781
const PRECEDING = 57782
const FOLLOWING = 57783
const GROUPS = 57784
const DATABASES = 57785
const TABLES = 57786
const SEQUENCES = 57787
const EXTENDED = 57788
const FULL = 57789
const PROCESSLIST = 57790
const FIELDS = 57791
const COLUMNS = 57792
const OPEN = 57793
const ERRORS = 57794
const WARNINGS = 57795
const INDEXES = 57796
const SCHEMAS = 57797
const NODE = 57798
const LOCKS = 57799
const ROLES = 57800
const TABLE_NUMBER = 57801
const COLUMN_NUMBER = 57802
const TABLE_VALUES = 57803
const TABLE_SIZE = 57804
const NAMES = 57805
const GLOBAL = 57806
const PERSIST = 57807
const SESSION = 57808
const ISOLATION = 57809
const LEVEL = 57810
const READ = 57811
const WRITE = 57812
const ONLY = 57813
const REPEATABLE = 57814
const COMMITTED = 57815
const UNCOMMITTED = 57816
const SERIALIZABLE = 57817
const LOCAL = 57818
const EVENTS = 57819
const PLUGINS = 57820
const CURRENT_TIMESTAMP = 57821
const DATABASE = 57822
const CURRENT_TIME = 57823
const LOCALTIME = 57824
const LOCALTIMESTAMP = 57825
const UTC_DATE = 57826
const UTC_TIME = 57827
const UTC_TIMESTAMP = 57828
const REPLACE = 57829
const CONVERT = 57830
const SEPARATOR = 57831
const TIMESTAMPDIFF = 57832
const CURRENT_DATE = 57833
const CURRENT_USER = 57834
const CURRENT_ROLE = 57835
const SECOND_MICROSECOND = 57836
const MINUTE_MICROSECOND = 57837
const MINUTE_SECOND = 57838
const HOUR_MICROSECOND = 57839
const HOUR_SECOND = 57840
const HOUR_MINUTE = 57841
const DAY_MICROSECOND = 57842
const DAY_SECOND = 57843
const DAY_MINUTE = 57844
const DAY_HOUR = 57845
const YEAR_MONTH = 57846
const SQL_TSI_HOUR = 57847
const SQL_TSI_DAY = 57848
const SQL_TSI_WEEK = 57849
const SQL_TSI_MONTH = 57850
const SQL_TSI_QUARTER = 57851
const SQL_TSI_YEAR = 57852
const SQL_TSI_SECOND = 57853
const SQL_TSI_MINUTE = 57854
const RECURSIVE = 57855
const CONFIG = 57856
const DRAINER = 57857
const SOURCE = 57858
const STREAM = 57859
const HEADERS = 57860
const CONNECTOR = 57861
const CONNECTORS = 57862
const DAEMON = 57863
const PAUSE = 57864
const CANCEL = 57865
const TASK = 57866
const RESUME = 57867
const MATCH = 57868
const AGAINST = 57869
const BOOLEAN = 57870
const LANGUAGE = 57871
const WITH = 57872
const QUERY = 57873
const EXPANSION = 57874
const WITHOUT = 57875
const VALIDATION = 57876
const UPGRADE = 57877
const RETRY = 57878
const ADDDATE = 57879
const BIT_AND = 57880
const BIT_OR = 57881
const BIT_XOR = 57882
const CAST = 57883
const COUNT = 57884
const APPROX_COUNT = 57885
const APPROX_COUNT_DISTINCT = 57886
const SERIAL_EXTRACT = 57887
const APPROX_PERCENTILE = 57888
const CURDATE = 57889
const CURTIME = 57890
const DATE_ADD = 57891
const DATE_SUB = 57892
const EXTRACT = 57893
const GROUP_CONCAT = 57894
const MAX = 57895
const MID = 57896
const MIN = 57897
const NOW = 57898
const POSITION = 57899
const SESSION_USER = 57900
const STD = 57901
const STDDEV = 57902
const MEDIAN = 57903
const CLUSTER_CENTERS = 57904
const KMEANS = 57905
const STDDEV_POP = 57906
const STDDEV_SAMP = 57907
const SUBDATE = 57908
const SUBSTR = 57909
const SUBSTRING = 57910
const SUM = 57911
const SYSDATE = 57912
const SYSTEM_USER = 57913
const TRANSLATE = 57914
const TRIM = 57915
const VARIANCE = 57916
const VAR_POP = 57917
const VAR_SAMP = 57918
const AVG = 57919
const RANK = 57920
const ROW_NUMBER = 57921
const DENSE_RANK = 57922
const BIT_CAST = 57923
const BITMAP_BIT_POSITION = 57924
const BITMAP_BUCKET_NUMBER = 57925
const BITMAP_COUNT = 57926
const BITMAP_CONSTRUCT_AGG = 57927
const BITMAP_OR_AGG = 57928
const NEXTVAL = 57929
const SETVAL = 57930
const CURRVAL = 57931
const LASTVAL = 57932
const ARROW = 57933
const ROW = 57934
const OUTFILE = 57935
const HEADER = 57936
const MAX_FILE_SIZE = 57937
const FORCE_QUOTE = 57938
const PARALLEL = 57939
const STRICT = 57940
const UNUSED = 57941
const BINDINGS = 57942
const DO = 57943
const DECLARE = 57944
const LOOP = 57945
const WHILE = 57946
const LEAVE = 57947
const ITERATE = 57948
const UNTIL = 57949
const CALL = 57950
const PREV = 57951
const SLIDING = 57952
const FILL = 57953
const SPBEGIN = 57954
const BACKEND = 57955
const SERVERS = 57956
const HANDLER = 57957
const PERCENT = 57958
const SAMPLE = 57959
const MO_TS = 57960
const PITR = 57961
const CDC = 57962
const ROLLUP = 57963
const KILL = 57964
const BACKUP = 57965
const FILESYSTEM = 57966
const PARALLELISM = 57967
const RESTORE = 57968
const QUERY_RESULT = 57969

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12559

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 782,
	22, 782,
	-2, 775,
	-1, 157,
	243, 1199,
	245, 1098,
	-2, 1145,
	-1, 184,
	43, 605,
	245, 605,
	272, 612,
	273, 612,
	471, 605,
	-2, 640,
	-1, 224,
	648, 1960,
	-2, 515,
	-1, 527,
	648, 2080,
	-2, 396,
	-1, 585,
	648, 2139,
	-2, 394,
	-1, 586,
	648, 2140,
	-2, 395,
	-1, 587,
	648, 2141,
	-2, 397,
	-1, 722,
	324, 176,
	443, 176,
	444, 176,
	-2, 1864,
	-1, 788,
	85, 1649,
	-2, 2016,
	-1, 789,
	85, 1668,
	-2, 1987,
	-1, 793,
	85, 1669,
	-2, 2015,
	-1, 826,
	85, 1576,
	-2, 2214,
	-1, 827,
	85, 1577,
	-2, 2213,
	-1, 828,
	85, 1578,
	-2, 2203,
	-1, 829,
	85, 2175,
	-2, 2196,
	-1, 830,
	85, 2176,
	-2, 2197,
	-1, 831,
	85, 2177,
	-2, 2205,
	-1, 832,
	85, 2178,
	-2, 2185,
	-1, 833,
	85, 2179,
	-2, 2194,
	-1, 834,
	85, 2180,
	-2, 2206,
	-1, 835,
	85, 2181,
	-2, 2207,
	-1, 836,
	85, 2182,
	-2, 2212,
	-1, 837,
	85, 2183,
	-2, 2217,
	-1, 838,
	85, 2184,
	-2, 2218,
	-1, 839,
	85, 1645,
	-2, 2054,
	-1, 840,
	85, 1646,
	-2, 1848,
	-1, 841,
	85, 1647,
	-2, 2063,
	-1, 842,
	85, 1648,
	-2, 1857,
	-1, 844,
	85, 1651,
	-2, 1865,
	-1, 846,
	85, 1653,
	-2, 2087,
	-1, 848,
	85, 1656,
	-2, 1884,
	-1, 850,
	85, 1658,
	-2, 2099,
	-1, 851,
	85, 1659,
	-2, 2098,
	-1, 852,
	85, 1660,
	-2, 1928,
	-1, 853,
	85, 1661,
	-2, 2011,
	-1, 856,
	85, 1664,
	-2, 2110,
	-1, 858,
	85, 1666,
	-2, 2113,
	-1, 859,
	85, 1667,
	-2, 2115,
	-1, 860,
	85, 1670,
	-2, 2123,
	-1, 861,
	85, 1671,
	-2, 1996,
	-1, 862,
	85, 1672,
	-2, 2041,
	-1, 863,
	85, 1673,
	-2, 2006,
	-1, 864,
	85, 1674,
	-2, 2031,
	-1, 875,
	85, 1554,
	-2, 2208,
	-1, 876,
	85, 1555,
	-2, 2209,
	-1, 877,
	85, 1556,
	-2, 2210,
	-1, 976,
	466, 640,
	467, 640,
	-2, 606,
	-1, 1026,
	127, 1848,
	138, 1848,
	158, 1848,
	-2, 1822,
	-1, 1143,
	22, 809,
	-2, 758,
	-1, 1253,
	11, 782,
	22, 782,
	-2, 1434,
	-1, 1335,
	22, 809,
	-2, 758,
	-1, 1683,
	85, 1721,
	-2, 2013,
	-1, 1684,
	85, 1722,
	-2, 2014,
	-1, 1853,
	86, 970,
	-2, 976,
	-1, 2301,
	110, 1137,
	154, 1137,
	193, 1137,
	196, 1137,
	285, 1137,
	-2, 1130,
	-1, 2461,
	11, 782,
	22, 782,
	-2, 911,
	-1, 2494,
	86, 1808,
	159, 1808,
	-2, 1998,
	-1, 2495,
	86, 1808,
	159, 1808,
	-2, 1997,
	-1, 2496,
	86, 1784,
	159, 1784,
	-2, 1984,
	-1, 2497,
	86, 1785,
	159, 1785,
	-2, 1989,
	-1, 2498,
	86, 1786,
	159, 1786,
	-2, 1916,
	-1, 2499,
	86, 1787,
	159, 1787,
	-2, 1910,
	-1, 2500,
	86, 1788,
	159, 1788,
	-2, 1838,
	-1, 2501,
	86, 1789,
	159, 1789,
	-2, 1986,
	-1, 2502,
	86, 1790,
	159, 1790,
	-2, 1914,
	-1, 2503,
	86, 1791,
	159, 1791,
	-2, 1909,
	-1, 2504,
	86, 1792,
	159, 1792,
	-2, 1898,
	-1, 2505,
	86, 1808,
	159, 1808,
	-2, 1899,
	-1, 2506,
	86, 1808,
	159, 1808,
	-2, 1900,
	-1, 2508,
	86, 1797,
	159, 1797,
	-2, 2031,
	-1, 2509,
	86, 1774,
	159, 1774,
	-2, 2016,
	-1, 2510,
	86, 1806,
	159, 1806,
	-2, 1987,
	-1, 2511,
	86, 1806,
	159, 1806,
	-2, 2015,
	-1, 2512,
	86, 1806,
	159, 1806,
	-2, 1866,
	-1, 2513,
	86, 1804,
	159, 1804,
	-2, 2006,
	-1, 2514,
	86, 1801,
	159, 1801,
	-2, 1889,
	-1, 2515,
	85, 1755,
	86, 1755,
	159, 1755,
	401, 1755,
	402, 1755,
	403, 1755,
	-2, 1837,
	-1, 2516,
	85, 1756,
	86, 1756,
	159, 1756,
	401, 1756,
	402, 1756,
	403, 1756,
	-2, 1839,
	-1, 2517,
	85, 1757,
	86, 1757,
	159, 1757,
	401, 1757,
	402, 1757,
	403, 1757,
	-2, 2059,
	-1, 2518,
	85, 1759,
	86, 1759,
	159, 1759,
	401, 1759,
	402, 1759,
	403, 1759,
	-2, 1988,
	-1, 2519,
	85, 1761,
	86, 1761,
	159, 1761,
	401, 1761,
	402, 1761,
	403, 1761,
	-2, 1969,
	-1, 2520,
	85, 1763,
	86, 1763,
	159, 1763,
	401, 1763,
	402, 1763,
	403, 1763,
	-2, 1915,
	-1, 2521,
	85, 1765,
	86, 1765,
	159, 1765,
	401, 1765,
	402, 1765,
	403, 1765,
	-2, 1894,
	-1, 2522,
	85, 1766,
	86, 1766,
	159, 1766,
	401, 1766,
	402, 1766,
	403, 1766,
	-2, 1895,
	-1, 2523,
	85, 1768,
	86, 1768,
	159, 1768,
	401, 1768,
	402, 1768,
	403, 1768,
	-2, 1836,
	-1, 2524,
	86, 1811,
	159, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1871,
	-1, 2525,
	86, 1811,
	159, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1885,
	-1, 2526,
	86, 1814,
	159, 1814,
	401, 1814,
	402, 1814,
	403, 1814,
	-2, 1867,
	-1, 2527,
	86, 1814,
	159, 1814,
	401, 1814,
	402, 1814,
	403, 1814,
	-2, 1931,
	-1, 2528,
	86, 1811,
	159, 1811,
	401, 1811,
	402, 1811,
	403, 1811,
	-2, 1953,
	-1, 2741,
	110, 1137,
	154, 1137,
	193, 1137,
	196, 1137,
	285, 1137,
	-2, 1131,
	-1, 2759,
	83, 702,
	159, 702,
	-2, 1315,
	-1, 3178,
	196, 1137,
	309, 1402,
	-2, 1374,
	-1, 3358,
	110, 1137,
	154, 1137,
	193, 1137,
	196, 1137,
	-2, 1255,
	-1, 3360,
	110, 1137,
	154, 1137,
	193, 1137,
	196, 1137,
	-2, 1255,
	-1, 3372,
	83, 702,
	159, 702,
	-2, 1315,
	-1, 3393,
	196, 1137,
	309, 1402,
	-2, 1375,
	-1, 3542,
	110, 1137,
	154, 1137,
	193, 1137,
	196, 1137,
	-2, 1256,
	-1, 3570,
	86, 1217,
	159, 1217,
	-2, 1137,
	-1, 3710,
	86, 1217,
	159, 1217,
	-2, 1137,
	-1, 3867,
	86, 1221,
	159, 1221,
	-2, 1137,
	-1, 3914,
	86, 1222,
	159, 1222,
	-2, 1137,
}

const yyPrivate = 57344

const yyLast = 51713

var yyAct = [...]int{
	755, 732, 3960, 757, 3934, 2789, 213, 3953, 3871, 1939,
	1663, 3474, 3378, 3770, 3878, 3877, 3870, 3710, 3751, 3164,
	3796, 741, 3827, 2792, 3270, 3688, 3407, 3197, 2783, 2583,
	3655, 3745, 734, 3271, 1288, 1659, 3774, 3709, 3530, 3529,
	1497, 2701, 3527, 3679, 3628, 1430, 622, 785, 1144, 3598,
	2786, 3478, 1025, 1574, 3752, 3754, 3340, 1886, 1710, 1436,
	640, 3345, 646, 646, 3469, 730, 2762, 3539, 646, 664,
	673, 3121, 37, 673, 3173, 1666, 2348, 3394, 3135, 3095,
	3509, 3544, 2035, 2898, 3361, 3268, 2899, 2032, 3124, 3551,
	3330, 2897, 2878, 2812, 3193, 3175, 2049, 3182, 3363, 1724,
	1998, 3310, 2894, 2072, 3256, 2490, 2351, 2926, 198, 2147,
	1138, 2618, 2455, 2966, 2730, 3235, 1899, 3106, 3102, 3181,
	681, 3096, 3100, 2312, 3098, 1134, 685, 3097, 3093, 1490,
	2742, 724, 3144, 2280, 3070, 3013, 2255, 2256, 2143, 133,
	36, 670, 2939, 2130, 2105, 2562, 2113, 2078, 1816, 2949,
	2106, 729, 1575, 1586, 65, 2544, 1578, 2456, 2028, 1570,
	949, 1563, 2142, 2114, 2719, 2002, 1999, 2714, 1019, 2434,
	2439, 2814, 2794, 2349, 2311, 1399, 6, 1929, 2301, 1862,
	2488, 1657, 2754, 1082, 209, 8, 731, 1366, 733, 622,
	1537, 2144, 1606, 2344, 1506, 639, 1475, 2292, 1470, 723,
	2651, 2154, 2492, 1648, 1717, 742, 208, 7, 1585, 1160,
	1697, 2112, 2177, 213, 621, 213, 1898, 1073, 1074, 2109,
	1439, 1589, 2094, 2068, 646, 1544, 678, 1018, 1419, 2463,
	1858, 1861, 1656, 655, 1474, 2435, 23, 985, 879, 1837,
	1528, 27, 1431, 687, 672, 1725, 1415, 16, 108, 948,
	946, 24, 17, 1440, 1472, 199, 14, 10, 1536, 971,
	191, 931, 2151, 195, 1289, 3761, 3673, 684, 2686, 925,
	881, 15, 2686, 1052, 2686, 1333, 1070, 688, 2983, 2465,
	3375, 3151, 2982, 882, 33, 725, 939, 2161, 940, 1139,
	1221, 1222, 1223, 1220, 3502, 3348, 1402, 1140, 2606, 658,
	1221, 1222, 1223, 1220, 3263, 1221, 1222, 1223, 1220, 2550,
	669, 2545, 2548, 2547, 1829, 1551, 665, 676, 1066, 1662,
	197, 1069, 1547, 1071, 1065, 667, 651, 920, 641, 642,
	1005, 1352, 1031, 1033, 1066, 2254, 1066, 1406, 3735, 901,
	668, 934, 899, 930, 2260, 1053, 3080, 1034, 1830, 2264,
	1598, 1355, 1139, 666, 3063, 3060, 3065, 3062, 3945, 1453,
	1823, 1348, 1549, 1221, 1222, 1223, 1220, 1221, 1222, 1223,
	1220, 1597, 3467, 2962, 1064, 2960, 2083, 3740, 3635, 3629,
	725, 3470, 8, 2678, 2676, 3269, 2127, 1283, 3756, 2108,
	880, 3040, 647, 2100, 2389, 1219, 891, 1183, 3695, 911,
	2592, 2148, 3852, 3514, 7, 3510, 196, 61, 187, 158,
	2600, 3362, 2303, 1584, 726, 3660, 3807, 196, 1047, 1042,
	1037, 1041, 1045, 1841, 1361, 1514, 1360, 2680, 1358, 1838,
	901, 899, 1035, 2650, 196, 196, 1374, 3038, 900, 2302,
	683, 898, 3696, 2159, 1391, 2892, 1050, 2296, 196, 2482,
	1040, 3662, 1593, 196, 196, 196, 1218, 2748, 2933, 2934,
	1649, 1198, 1029, 1653, 1199, 2985, 196, 61, 187, 158,
	1615, 2483, 936, 196, 929, 1030, 1000, 998, 192, 999,
	2012, 2013, 1590, 933, 932, 1362, 2932, 1652, 1759, 192,
	2703, 1604, 1201, 1476, 1449, 1478, 2974, 1450, 1843, 1844,
	914, 1048, 132, 132, 921, 892, 1592, 2746, 2045, 2011,
	1051, 1832, 196, 61, 187, 158, 2469, 3881, 3882, 2468,
	192, 1601, 2470, 3168, 928, 192, 192, 192, 2704, 955,
	2563, 3166, 1038, 1437, 1438, 1435, 3064, 3061, 192, 1434,
	1437, 1438, 2381, 938, 1629, 1603, 994, 870, 927, 869,
	871, 872, 926, 873, 874, 896, 1049, 2749, 913, 2716,
	1211, 1913, 1665, 3849, 919, 1216, 3902, 1006, 3491, 2717,
	1373, 1028, 1027, 1654, 1196, 3759, 3840, 1427, 3758, 3839,
	196, 61, 187, 158, 192, 1452, 917, 3757, 3838, 1002,
	196, 61, 187, 158, 3759, 3758, 1039, 1651, 3757, 2243,
	3845, 952, 953, 3938, 3939, 3272, 3743, 1550, 1548, 3829,
	3832, 2967, 995, 196, 61, 187, 158, 3829, 2715, 3746,
	3747, 3748, 3749, 1669, 937, 1067, 1068, 2968, 3272, 2969,
	1072, 3632, 2587, 3767, 3285, 2681, 1149, 2023, 1197, 2163,
	2019, 1644, 3331, 2155, 646, 646, 3854, 3855, 1163, 1166,
	918, 2029, 192, 1004, 1155, 646, 1148, 2833, 3519, 3850,
	3851, 3338, 192, 3115, 2091, 2424, 2291, 3664, 3665, 2705,
	2722, 1557, 1556, 1046, 3880, 673, 673, 1152, 646, 1147,
	1163, 1166, 3117, 937, 3107, 192, 2706, 157, 1638, 194,
	1214, 1215, 3419, 719, 2597, 997, 721, 3003, 996, 2160,
	1186, 720, 3847, 3001, 1213, 183, 2387, 3468, 3490, 1043,
	184, 2961, 1044, 3111, 1650, 1200, 3492, 2427, 2428, 3112,
	3113, 2884, 1463, 1375, 2426, 3669, 3516, 935, 3122, 2699,
	1003, 3314, 670, 670, 670, 3114, 981, 1158, 3434, 2432,
	2138, 1261, 1668, 1667, 1208, 956, 1351, 3196, 1451, 3133,
	2679, 638, 3909, 3760, 3672, 2485, 3288, 2166, 2168, 2169,
	3007, 3145, 2685, 2043, 2044, 3789, 924, 2700, 1140, 1140,
	3194, 3195, 958, 1141, 1209, 1210, 3647, 1140, 3648, 1425,
	3784, 2755, 2880, 3625, 2419, 2149, 2367, 1148, 2149, 2149,
	3170, 3431, 2347, 2370, 3642, 3599, 3600, 3601, 3605, 3603,
	3604, 3602, 1031, 1033, 675, 674, 3647, 2890, 3648, 1178,
	1293, 2261, 1054, 1036, 2298, 1831, 1599, 1034, 3775, 1292,
	3424, 3791, 2150, 1076, 2984, 1066, 3071, 3379, 3797, 3109,
	1066, 1066, 3650, 1066, 2981, 671, 3165, 980, 978, 2182,
	1140, 3123, 2162, 1066, 3694, 1066, 2788, 1165, 1164, 3386,
	2369, 1414, 3435, 3323, 3853, 3659, 894, 3700, 2276, 977,
	3199, 3321, 3650, 3649, 3084, 2422, 912, 910, 2546, 1001,
	3766, 951, 1552, 3589, 3971, 1031, 1033, 2399, 2398, 1165,
	1164, 3481, 957, 990, 3663, 2784, 2785, 2728, 2788, 1255,
	1034, 3692, 3584, 3649, 895, 2368, 1354, 62, 1356, 1486,
	1167, 669, 669, 669, 1437, 1438, 986, 665, 665, 665,
	1485, 880, 1437, 1438, 1371, 640, 667, 667, 667, 1171,
	1172, 3322, 1142, 1257, 1258, 1259, 1260, 1331, 1143, 3515,
	1336, 668, 668, 668, 1169, 1030, 2601, 1157, 1839, 3578,
	159, 671, 987, 991, 666, 666, 666, 2677, 949, 1262,
	1177, 159, 3123, 939, 1176, 940, 1412, 1175, 2354, 1151,
	1153, 1156, 974, 1411, 972, 976, 994, 2485, 159, 159,
	973, 970, 969, 1136, 975, 960, 961, 959, 962, 963,
	964, 965, 159, 992, 3666, 993, 2721, 159, 159, 159,
	2030, 1833, 1639, 193, 3956, 1640, 988, 989, 3118, 3108,
	159, 646, 2167, 62, 1465, 1426, 1410, 159, 646, 671,
	1203, 622, 622, 1204, 3004, 1154, 1433, 3846, 3701, 671,
	3171, 622, 622, 3798, 1191, 1501, 1501, 1193, 646, 2420,
	2421, 3520, 3110, 984, 2022, 897, 3714, 2020, 1645, 983,
	3869, 1206, 671, 2725, 2726, 2834, 159, 2835, 2836, 673,
	1529, 640, 3693, 3198, 979, 1194, 1540, 1540, 2724, 3680,
	1499, 1499, 1304, 1305, 1429, 1428, 1503, 213, 1675, 1678,
	1679, 62, 3174, 1135, 3364, 995, 622, 3059, 1508, 1676,
	2390, 62, 2734, 2737, 2738, 2739, 2735, 2736, 3643, 3194,
	3195, 2862, 3644, 2347, 3465, 1252, 3826, 2353, 3275, 1368,
	1369, 1367, 2355, 683, 62, 1378, 1379, 1380, 1381, 1382,
	1372, 1384, 2944, 2945, 159, 2928, 2930, 1390, 3643, 3131,
	1464, 1473, 3753, 1202, 159, 2364, 3190, 1183, 1582, 3585,
	3586, 3075, 982, 1587, 3957, 1558, 2593, 1187, 954, 950,
	1596, 2474, 1224, 1376, 3324, 2275, 1337, 159, 2385, 2152,
	1254, 2018, 1495, 1496, 1996, 1383, 2356, 1335, 997, 1264,
	3226, 996, 1207, 1189, 2357, 3006, 1389, 3713, 1388, 1627,
	1387, 1386, 1007, 677, 3591, 1192, 1195, 2831, 1377, 1480,
	1482, 2691, 1835, 1501, 1272, 1501, 1148, 1205, 3191, 1493,
	1494, 1605, 3580, 1421, 1422, 3311, 3579, 1396, 1398, 2354,
	2357, 1188, 2178, 943, 944, 945, 2696, 1591, 2269, 1664,
	938, 2164, 2165, 1365, 1602, 1182, 1416, 1420, 1420, 1420,
	3868, 941, 3015, 3014, 1846, 2853, 2854, 670, 2271, 2270,
	670, 670, 1847, 1441, 1454, 1455, 1444, 1363, 1364, 3500,
	3077, 1416, 1416, 1637, 1553, 1561, 1530, 1564, 1565, 1405,
	3132, 2268, 1845, 1501, 902, 2411, 1413, 1622, 1623, 1566,
	1567, 903, 1595, 1423, 1572, 1573, 3552, 3954, 3955, 995,
	1723, 1442, 1443, 3972, 1445, 1446, 1577, 1447, 1190, 1581,
	995, 3150, 1580, 2212, 1772, 3836, 2211, 2929, 1711, 1034,
	1407, 1484, 1408, 1527, 1509, 651, 1034, 2358, 2626, 3967,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1521, 1677, 1219, 1541, 1708, 1709, 1057, 1062,
	1063, 3232, 1542, 1661, 2384, 2485, 1126, 1122, 1123, 1124,
	1125, 3276, 2631, 2358, 2630, 2629, 2627, 2363, 2353, 2347,
	2352, 2361, 2350, 2355, 2863, 2865, 2866, 2867, 2864, 1626,
	1148, 2852, 997, 2453, 2342, 996, 1834, 2761, 1625, 1219,
	2294, 2760, 1642, 997, 1781, 3962, 996, 3951, 3228, 1850,
	1851, 3916, 2157, 1825, 1529, 1757, 3889, 1814, 1680, 1859,
	1501, 1864, 1865, 1145, 1867, 1465, 646, 1608, 1407, 1613,
	2071, 646, 1616, 3192, 1501, 1647, 669, 2356, 949, 669,
	669, 1887, 665, 2628, 3883, 665, 665, 2692, 1836, 1008,
	1501, 667, 1635, 3865, 667, 667, 1465, 1817, 1632, 1636,
	1145, 664, 1634, 1633, 906, 1655, 668, 1631, 1630, 668,
	668, 2454, 1762, 1763, 1764, 1706, 1707, 1183, 3963, 666,
	3917, 1912, 666, 666, 3917, 1778, 2565, 1771, 1779, 3890,
	1919, 1919, 1699, 1465, 1614, 1465, 1465, 1617, 1618, 646,
	646, 1660, 1986, 1859, 1990, 1792, 1793, 1501, 1993, 1994,
	1539, 1539, 3327, 2009, 2283, 905, 3817, 3676, 2293, 908,
	907, 2454, 1754, 1755, 1813, 1758, 3866, 3792, 622, 1646,
	1501, 3287, 3780, 1773, 3733, 2327, 3979, 2284, 2285, 3732,
	3727, 1868, 1658, 2761, 1916, 3726, 1780, 3725, 1782, 1866,
	1783, 1784, 1785, 2248, 1059, 1060, 1061, 646, 1859, 1501,
	2592, 2054, 1180, 646, 646, 646, 681, 681, 1820, 3232,
	3724, 1219, 2069, 2064, 2065, 2066, 2067, 1183, 3203, 3201,
	2073, 3069, 1941, 3067, 2632, 2633, 2454, 213, 2947, 3676,
	213, 213, 1786, 213, 2046, 1988, 1221, 1222, 1223, 1220,
	2157, 2708, 1855, 1856, 1857, 3781, 1181, 3734, 1332, 1922,
	2682, 1815, 2316, 3676, 1870, 1871, 1872, 1873, 3676, 1821,
	3676, 2582, 2570, 2038, 2039, 1221, 1222, 1223, 1220, 3704,
	1890, 1891, 2148, 1772, 1772, 2116, 3703, 3675, 2010, 1181,
	3440, 3388, 3036, 3676, 1772, 1772, 1221, 1222, 1223, 1220,
	2015, 2132, 2017, 2024, 1854, 884, 885, 886, 887, 2056,
	2057, 2058, 2340, 2036, 2037, 2253, 2247, 3354, 2031, 2246,
	3303, 2326, 2219, 2139, 1670, 1671, 1672, 1673, 1674, 1921,
	1900, 1888, 1902, 1903, 1887, 2041, 2053, 1884, 1501, 2146,
	1883, 2126, 2188, 1905, 1901, 2082, 1909, 1895, 2085, 2086,
	1995, 2088, 2157, 1397, 1416, 1910, 3299, 1714, 1591, 2157,
	3676, 1923, 1924, 2485, 3389, 1487, 1715, 3964, 1420, 3375,
	1719, 1720, 1721, 1722, 3211, 1918, 1920, 2191, 2951, 1756,
	1420, 2923, 670, 1987, 2763, 1512, 2595, 1766, 1992, 1863,
	3355, 2140, 1997, 3304, 2594, 2354, 2357, 2118, 1896, 1897,
	2657, 2649, 2608, 1879, 2014, 2025, 2016, 1221, 1222, 1223,
	1220, 2590, 2578, 2586, 2334, 1906, 1907, 2572, 2207, 1893,
	2192, 2137, 1031, 1033, 884, 885, 886, 887, 3337, 3300,
	1889, 2076, 2062, 1031, 1033, 1917, 2122, 1034, 2051, 1818,
	1034, 2052, 2059, 2060, 2567, 2048, 2111, 3212, 1034, 1610,
	2559, 1904, 2557, 2190, 2454, 2077, 889, 2111, 1269, 2079,
	2175, 2176, 1168, 1132, 1127, 3615, 3438, 1911, 2555, 3155,
	1914, 1915, 1252, 1219, 1219, 1219, 1863, 2553, 2040, 2315,
	2249, 2226, 2096, 1236, 2316, 2568, 1787, 1788, 1789, 1790,
	2573, 2128, 1794, 1795, 1796, 1797, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 2125, 2117, 2998, 2225,
	2210, 2201, 1892, 2123, 2200, 2199, 2156, 2568, 1619, 3146,
	2136, 2258, 2259, 2560, 2262, 2558, 3973, 2265, 1658, 2358,
	1031, 1033, 1761, 1760, 2353, 2347, 2352, 1908, 2350, 2355,
	2141, 2554, 2134, 724, 2171, 1034, 646, 646, 646, 904,
	2554, 669, 2316, 2248, 1219, 758, 768, 665, 1761, 1760,
	1417, 646, 646, 646, 646, 759, 667, 760, 764, 767,
	763, 761, 762, 3785, 2313, 889, 3942, 2170, 2382, 2173,
	2174, 668, 1219, 1219, 1219, 2319, 1465, 1219, 1219, 2157,
	3762, 1620, 3553, 2356, 666, 1818, 3367, 1699, 3365, 3147,
	1818, 1818, 2172, 1239, 1240, 1241, 1242, 1243, 1236, 2135,
	2179, 2184, 1465, 1448, 1403, 3674, 3639, 3786, 1404, 1491,
	765, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 2376,
	1492, 2220, 2221, 1489, 2223, 3582, 3554, 3581, 3567, 3523,
	3368, 2230, 3366, 3148, 3347, 3233, 1798, 3261, 3224, 3218,
	2081, 3213, 766, 2084, 3126, 2887, 2087, 2886, 2732, 2089,
	1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1236, 1791, 2687, 1705, 770, 134, 2605, 2571, 2214,
	1418, 134, 2545, 2476, 2383, 2121, 646, 1919, 2120, 2119,
	1702, 1704, 1701, 909, 1703, 2458, 2458, 2009, 2458, 1393,
	2242, 2244, 2245, 1392, 2250, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1225, 1150, 2131, 2331, 1403, 622, 622, 2333,
	1404, 2335, 3708, 2615, 2539, 1148, 2080, 1718, 2336, 2185,
	2953, 1501, 646, 1545, 1718, 2080, 1488, 2007, 1223, 1220,
	3837, 652, 2277, 1849, 134, 1220, 646, 2346, 1293, 3594,
	2345, 3593, 1148, 2529, 640, 2295, 2970, 1292, 2823, 2821,
	1540, 2800, 2009, 2798, 3970, 2534, 2480, 2536, 3524, 3525,
	3573, 213, 2670, 3517, 2671, 2493, 1235, 1234, 1244, 1245,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 1221, 1222,
	1223, 1220, 2339, 2471, 1271, 2472, 1545, 2462, 3335, 645,
	645, 2874, 2320, 2872, 2731, 653, 2870, 1270, 2460, 2859,
	2464, 2575, 1776, 3947, 2477, 2478, 2323, 2359, 2360, 2181,
	2365, 2329, 3946, 2186, 2330, 3893, 3864, 1777, 2588, 3969,
	3863, 3787, 2146, 3518, 2702, 2332, 1031, 1033, 3729, 1501,
	3717, 1501, 2487, 1501, 1221, 1222, 1223, 1220, 1148, 3707,
	3697, 1034, 3630, 3556, 3555, 3264, 2607, 3380, 3336, 3369,
	1420, 2873, 2533, 2871, 2198, 3334, 2869, 3214, 1032, 2858,
	3116, 2602, 2205, 134, 2994, 2965, 2598, 2964, 2857, 2540,
	2429, 2856, 1501, 2635, 2433, 1480, 1482, 2855, 134, 2847,
	134, 2841, 2840, 2839, 2222, 2838, 2328, 2466, 2642, 2227,
	2228, 2229, 3017, 1501, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2683, 2561, 2473, 1499, 1221, 1222,
	1223, 1220, 2634, 3029, 2321, 2322, 2481, 3262, 2252, 2484,
	1221, 1222, 1223, 1220, 2324, 2325, 2099, 2098, 1499, 2097,
	2641, 2549, 2093, 2643, 1221, 1222, 1223, 1220, 2203, 2530,
	2532, 2689, 2690, 2617, 3341, 2693, 2092, 2047, 1842, 2646,
	2647, 653, 1221, 1222, 1223, 1220, 1221, 1222, 1223, 1220,
	2644, 2541, 1840, 1148, 1611, 1546, 1350, 1148, 3346, 3101,
	1221, 1222, 1223, 1220, 1501, 3028, 3966, 1465, 3965, 2604,
	1130, 2623, 3475, 1990, 719, 3940, 2709, 721, 3908, 3874,
	2493, 2759, 720, 3773, 1483, 2599, 3907, 2765, 3804, 2580,
	2584, 2585, 1221, 1222, 1223, 1220, 3904, 2202, 2589, 3843,
	2596, 2674, 2613, 2591, 3842, 2775, 1221, 1222, 1223, 1220,
	1221, 1222, 1223, 1220, 3656, 1148, 1221, 1222, 1223, 1220,
	3667, 3668, 3824, 2797, 1221, 1222, 1223, 1220, 3769, 1129,
	1148, 1148, 1148, 1919, 3528, 2612, 1148, 3750, 2807, 2808,
	2809, 2810, 1148, 2817, 2625, 2818, 2819, 2747, 2820, 3741,
	2822, 3496, 3721, 2743, 2803, 2804, 2609, 2610, 3716, 2806,
	2619, 2817, 2619, 3715, 2744, 2813, 1221, 1222, 1223, 1220,
	3671, 3658, 3657, 2458, 3631, 3575, 2531, 3535, 1221, 1222,
	1223, 1220, 3521, 2729, 3503, 2538, 3501, 2875, 1221, 1222,
	1223, 1220, 1941, 3498, 3495, 3494, 3473, 622, 3471, 3448,
	1818, 3445, 1818, 1990, 3442, 2879, 3333, 1148, 2009, 2009,
	2009, 2009, 2009, 2009, 3332, 2766, 3329, 2776, 3319, 3312,
	3296, 1818, 1818, 3294, 1148, 2009, 3221, 2795, 2458, 1034,
	2900, 2795, 3220, 2711, 2881, 2713, 2791, 2710, 1658, 3215,
	3209, 3208, 3127, 2727, 3088, 1501, 3087, 2900, 3083, 3081,
	3079, 2802, 3076, 2750, 1539, 2758, 646, 646, 3074, 2388,
	2257, 2764, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 8,
	3008, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408,
	2409, 2410, 2756, 2412, 2413, 2414, 2415, 2416, 2780, 2417,
	2777, 7, 2793, 3005, 2963, 2937, 2195, 2799, 3484, 2868,
	2860, 2850, 2805, 3800, 2574, 2848, 2577, 2919, 3483, 2796,
	2844, 2778, 213, 3816, 2843, 2842, 2697, 213, 2695, 2688,
	2684, 2611, 2581, 2774, 2272, 1221, 1222, 1223, 1220, 2267,
	2849, 2266, 2837, 825, 824, 1221, 1222, 1223, 1220, 1772,
	2263, 1772, 2102, 2095, 2980, 1235, 1234, 1244, 1245, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1236, 2993, 1848, 1828,
	1827, 2882, 1612, 1501, 2888, 2885, 3000, 1515, 1401, 1359,
	2616, 1357, 1300, 2622, 2901, 2902, 2903, 2904, 2905, 2906,
	2636, 2637, 1296, 1863, 3428, 2922, 1295, 2767, 2639, 2640,
	2920, 2916, 1221, 1222, 1223, 1220, 2772, 2773, 1133, 893,
	3652, 2921, 3651, 3640, 2645, 2938, 3497, 2935, 3482, 3360,
	2975, 1221, 1222, 1223, 1220, 134, 134, 134, 1032, 1817,
	2954, 2986, 3359, 3358, 2979, 2958, 3326, 1565, 3308, 2652,
	2653, 2768, 1670, 1818, 3306, 2658, 2771, 1566, 1567, 3305,
	3302, 1572, 1573, 196, 2931, 187, 158, 3301, 1577, 3295,
	3293, 1581, 3277, 3022, 1580, 3024, 3267, 3266, 2952, 3252,
	2955, 645, 1137, 3078, 3251, 3156, 2948, 3091, 3066, 2956,
	3034, 3082, 1146, 3027, 3019, 3085, 3086, 3018, 3291, 3002,
	3012, 2946, 2707, 1148, 2977, 2973, 2971, 2978, 2556, 3104,
	2997, 1253, 1034, 2988, 2987, 1174, 2990, 2989, 2552, 3120,
	2551, 2996, 2976, 1034, 646, 1221, 1222, 1223, 1220, 2231,
	2224, 2769, 2770, 3009, 2218, 192, 3136, 1148, 2217, 2216,
	646, 3564, 1148, 1148, 2215, 2213, 2209, 3016, 2208, 2206,
	2197, 2009, 2313, 3010, 3154, 2194, 2193, 2101, 3025, 3026,
	1235, 1234, 1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1236, 3068, 2376, 682, 1811, 1810, 1809, 3020, 3021,
	3023, 1775, 1774, 1765, 1513, 3180, 3130, 3183, 1511, 3183,
	3183, 196, 2790, 3892, 1148, 1235, 1234, 1244, 1245, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1236, 1290, 3814, 3032,
	3072, 3139, 3204, 2743, 3073, 3799, 3143, 3031, 3736, 3723,
	1501, 1501, 3718, 1560, 2718, 3609, 3592, 3588, 3200, 3566,
	3550, 3458, 3089, 3202, 3167, 3169, 1221, 1222, 1223, 1220,
	3456, 3426, 3163, 3425, 1221, 1222, 1223, 1220, 3422, 2189,
	3421, 3152, 3387, 3384, 3382, 1499, 1499, 3349, 1338, 1571,
	3205, 3206, 3129, 192, 1562, 3138, 1576, 646, 1579, 1568,
	3141, 3142, 3158, 3149, 3104, 3153, 1031, 1033, 1400, 2876,
	2801, 2752, 3179, 1465, 3030, 2751, 1990, 1990, 3188, 2745,
	2712, 1034, 2668, 1034, 2669, 2566, 2346, 2475, 1034, 2345,
	3162, 2187, 3090, 2418, 2314, 3922, 2667, 2286, 3184, 3185,
	2251, 1221, 1222, 1223, 1220, 3189, 2829, 2830, 2666, 1221,
	1222, 1223, 1220, 1700, 1034, 3812, 2665, 1221, 1222, 1223,
	1220, 2845, 2846, 1221, 1222, 1223, 1220, 2664, 1148, 192,
	2061, 1853, 2635, 1824, 1643, 1221, 1222, 1223, 1220, 1594,
	2957, 3265, 2959, 1221, 1222, 1223, 1220, 2883, 1569, 1349,
	1334, 2493, 1330, 3210, 1221, 1222, 1223, 1220, 1329, 1328,
	1327, 1818, 2918, 2663, 1326, 1325, 1818, 1324, 3186, 1221,
	1222, 1223, 1220, 1323, 1322, 3178, 1321, 2131, 3229, 3230,
	1320, 1319, 3217, 3810, 3223, 3216, 3222, 646, 1318, 3227,
	1221, 1222, 1223, 1220, 2662, 3219, 1510, 1317, 1316, 3240,
	652, 3241, 1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1236, 3011, 3245, 2180, 3248, 3249, 3250, 1315, 1314,
	1313, 1221, 1222, 1223, 1220, 1312, 1311, 1310, 1460, 1309,
	1308, 1307, 134, 3254, 1306, 1471, 3033, 3260, 1235, 1234,
	1244, 1245, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236,
	1303, 3161, 1302, 1301, 1299, 1507, 1298, 2073, 3316, 1297,
	1294, 3318, 3041, 3042, 3243, 2661, 1287, 1286, 3043, 3044,
	3045, 3046, 1284, 3047, 3048, 3049, 3050, 3051, 3052, 3053,
	3054, 3055, 3056, 3280, 1283, 3157, 3297, 3284, 2660, 1282,
	3159, 3160, 1221, 1222, 1223, 1220, 1281, 3423, 2659, 3278,
	134, 1280, 3283, 646, 1990, 1279, 3320, 134, 1278, 3289,
	3279, 2656, 1277, 1276, 3353, 1221, 1222, 1223, 1220, 1275,
	134, 1274, 1273, 134, 134, 1221, 1222, 1223, 1220, 1268,
	2458, 2009, 3372, 3920, 2655, 1267, 134, 1266, 1221, 1222,
	1223, 1220, 1265, 1185, 1131, 3325, 2654, 3236, 3237, 3309,
	2648, 2318, 3328, 2300, 3313, 3390, 1173, 3879, 1148, 3239,
	3315, 1221, 1222, 1223, 1220, 2733, 2486, 3180, 2104, 1184,
	3242, 1148, 118, 1221, 1222, 1223, 1220, 1221, 1222, 1223,
	1220, 3391, 1148, 2917, 3437, 2910, 2909, 2913, 1501, 2907,
	3562, 2638, 2914, 2911, 3430, 64, 3187, 2908, 2912, 3342,
	2619, 3374, 3571, 63, 2579, 2813, 3344, 646, 2915, 1990,
	2448, 2449, 3381, 1148, 3383, 2569, 3231, 3460, 1221, 1222,
	1223, 1220, 1394, 1499, 3125, 3461, 2992, 1034, 3439, 1881,
	1882, 3371, 3281, 3282, 1034, 3420, 2900, 3244, 648, 3433,
	3413, 3377, 3370, 213, 1235, 1234, 1244, 1245, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1236, 1148, 1876, 1877, 1878,
	3452, 649, 3449, 2825, 3427, 3429, 3432, 2386, 3462, 650,
	2826, 2827, 2828, 3255, 3459, 3436, 3176, 1979, 3177, 2900,
	1554, 2564, 2614, 2584, 2585, 3441, 1713, 3446, 3444, 2603,
	1607, 1588, 3447, 2273, 3443, 3499, 3454, 2063, 1179, 3453,
	3451, 3099, 3092, 3450, 3506, 2779, 2753, 2338, 1148, 1221,
	1222, 1223, 1220, 1221, 1222, 1223, 1220, 2309, 1885, 3480,
	1852, 1761, 1760, 1345, 1346, 1343, 1344, 1341, 1342, 3931,
	1148, 1501, 1501, 1339, 1340, 3720, 3136, 3207, 2430, 3476,
	2425, 1991, 1457, 3504, 3505, 1456, 3477, 1212, 3543, 3247,
	3543, 3466, 2940, 3531, 2274, 2133, 1409, 1385, 1432, 3899,
	3897, 3857, 3834, 1148, 3560, 1148, 1499, 1711, 3833, 3537,
	3538, 3533, 3831, 3563, 3776, 3565, 3737, 3623, 3622, 3561,
	3472, 3298, 1501, 3274, 3273, 3258, 1664, 3512, 1664, 3513,
	3534, 3511, 3464, 2371, 3522, 2341, 1609, 3257, 2950, 1407,
	646, 3317, 1148, 1148, 3924, 3923, 1148, 1148, 3548, 2995,
	2694, 3540, 2302, 1869, 3536, 3547, 2196, 1711, 1874, 3374,
	1353, 1170, 3923, 3924, 3290, 3531, 3531, 3590, 3253, 3531,
	3531, 3292, 3493, 3568, 1145, 1424, 3611, 1887, 2008, 3620,
	3576, 3596, 3597, 3574, 3569, 3607, 3608, 3559, 3626, 3627,
	3420, 3572, 200, 3, 3606, 3413, 72, 2, 3943, 3944,
	1, 1501, 3307, 2118, 884, 885, 886, 887, 2675, 1145,
	3373, 1822, 1347, 888, 883, 1477, 2467, 3612, 3617, 3376,
	2042, 3653, 1505, 1826, 890, 2924, 1925, 1926, 2925, 3616,
	3246, 3646, 2927, 1034, 3618, 2698, 1499, 2153, 2889, 2423,
	2290, 3638, 3119, 1395, 942, 1767, 1624, 3508, 1056, 1162,
	1621, 1161, 134, 1159, 1716, 134, 134, 772, 134, 3637,
	2107, 2877, 3633, 2851, 3641, 3645, 949, 3619, 3930, 3959,
	3891, 3689, 3683, 2443, 2447, 2448, 2449, 2444, 2452, 2445,
	2450, 3933, 3035, 2446, 2050, 2451, 1641, 1148, 756, 3825,
	2050, 2050, 2050, 3742, 3895, 3744, 3636, 3706, 1032, 3670,
	3712, 134, 2158, 1217, 2972, 3677, 967, 813, 783, 1032,
	1664, 1285, 3686, 1600, 3039, 3037, 1058, 3684, 782, 3685,
	3480, 3339, 2723, 3624, 2943, 134, 3698, 3691, 1055, 968,
	1148, 2090, 3702, 3739, 3681, 1501, 1235, 1234, 1244, 1245,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 3634, 1555,
	1559, 2337, 3699, 3531, 1818, 3795, 3570, 3172, 3719, 2787,
	1583, 3790, 3385, 3489, 3487, 3488, 689, 2021, 1818, 3728,
	1499, 3455, 620, 1016, 3457, 3730, 3610, 2103, 690, 2317,
	3848, 3765, 3722, 922, 3755, 2299, 923, 915, 2741, 2740,
	1681, 1226, 3463, 3350, 3351, 3352, 1698, 1148, 3738, 3356,
	3357, 3057, 3058, 1263, 728, 2183, 1253, 2720, 3408, 2936,
	71, 70, 3777, 69, 1745, 68, 1034, 221, 774, 220,
	3531, 3763, 3654, 3526, 3821, 3935, 754, 3772, 3557, 3558,
	753, 752, 751, 750, 749, 3771, 3768, 2441, 2442, 2440,
	3794, 2438, 2437, 3779, 1148, 2004, 2003, 3485, 2070, 3486,
	3134, 2816, 1501, 2811, 1930, 3819, 1928, 3822, 3809, 3811,
	3813, 3815, 1469, 2366, 3788, 2373, 1927, 3531, 3793, 3823,
	3876, 3805, 3806, 3587, 3802, 2861, 3479, 1875, 2362, 1947,
	2832, 1944, 1943, 3808, 2824, 3583, 3577, 1499, 1975, 3687,
	3542, 3392, 3818, 3393, 3399, 2308, 3830, 3828, 1081, 1501,
	1077, 1079, 3689, 1458, 1459, 1080, 1461, 1462, 1078, 1466,
	1467, 1468, 3841, 2624, 3225, 2343, 3094, 2282, 3867, 2281,
	2279, 2278, 1370, 3856, 3875, 3858, 3764, 3860, 3844, 3507,
	2491, 2489, 1128, 3238, 1499, 3861, 3862, 3234, 2115, 3859,
	2129, 2991, 1516, 1517, 1518, 1519, 1520, 2005, 1522, 1523,
	1524, 1525, 1526, 2001, 2000, 2891, 1532, 1533, 1534, 1535,
	2431, 3661, 1880, 3898, 3888, 3900, 3901, 916, 2297, 41,
	115, 3896, 3894, 105, 175, 56, 3903, 174, 1148, 3755,
	3884, 1741, 3885, 55, 3886, 113, 3887, 172, 1738, 54,
	100, 99, 1740, 1737, 1739, 1743, 1744, 3712, 3912, 112,
	1742, 3910, 170, 53, 205, 3914, 3915, 3913, 204, 207,
	206, 3929, 3919, 3937, 3921, 203, 3936, 2542, 3925, 3926,
	3927, 3928, 3918, 2287, 2288, 2289, 2543, 202, 1543, 201,
	3948, 3941, 1148, 3835, 3546, 878, 44, 43, 2304, 2305,
	2306, 2307, 3949, 176, 3794, 3950, 3952, 42, 106, 57,
	40, 39, 3958, 3961, 38, 1664, 34, 13, 12, 35,
	22, 21, 1628, 3397, 20, 26, 32, 3678, 31, 127,
	126, 30, 125, 124, 123, 122, 3968, 121, 120, 29,
	19, 48, 2436, 47, 3937, 3975, 46, 3936, 3974, 9,
	116, 111, 109, 28, 3961, 3976, 110, 3613, 107, 103,
	3980, 3614, 101, 83, 3409, 82, 81, 96, 95, 94,
	93, 92, 2461, 91, 89, 90, 966, 3400, 80, 2443,
	2447, 2448, 2449, 2444, 2452, 2445, 2450, 79, 3395, 2446,
	78, 2451, 77, 3417, 3418, 196, 61, 187, 158, 3396,
	76, 98, 104, 102, 1748, 1749, 1750, 1751, 1752, 1753,
	1746, 1747, 87, 188, 97, 701, 700, 707, 697, 88,
	179, 86, 85, 1471, 189, 84, 75, 704, 705, 74,
	706, 710, 73, 156, 691, 155, 3401, 2008, 154, 153,
	152, 150, 151, 132, 715, 1272, 134, 1234, 1244, 1245,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1236, 119, 149,
	148, 147, 146, 145, 144, 49, 50, 192, 51, 1507,
	52, 166, 165, 167, 169, 171, 168, 173, 163, 161,
	164, 162, 160, 2050, 66, 11, 114, 18, 25, 4,
	719, 0, 0, 721, 0, 0, 0, 0, 720, 0,
	0, 196, 61, 187, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 3801, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	189, 0, 3416, 0, 2352, 0, 0, 0, 3731, 0,
	0, 0, 0, 0, 140, 141, 0, 142, 143, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3405,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 3402, 3406, 3404, 3403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3778, 0, 0,
	0, 0, 3782, 3783, 0, 0, 157, 185, 194, 186,
	117, 3411, 3412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 694, 693, 184,
	178, 177, 0, 3803, 0, 0, 67, 699, 0, 0,
	140, 141, 0, 142, 143, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 3872, 0, 718, 0, 0, 3419,
	134, 0, 1247, 696, 1251, 0, 0, 686, 0, 0,
	134, 3398, 0, 0, 0, 0, 2055, 3410, 0, 0,
	1248, 1250, 1246, 0, 1249, 1235, 1234, 1244, 1245, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1236, 180, 181, 182,
	0, 0, 3872, 0, 0, 701, 700, 707, 697, 0,
	0, 0, 157, 185, 194, 186, 117, 704, 705, 0,
	706, 710, 0, 0, 691, 0, 0, 0, 2757, 0,
	190, 0, 0, 0, 715, 184, 178, 177, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 183, 0, 129, 3978, 0,
	0, 0, 3905, 3906, 1976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 702, 708, 0, 709,
	711, 0, 0, 712, 713, 714, 0, 0, 716, 717,
	0, 0, 0, 2008, 2008, 2008, 2008, 2008, 2008, 1979,
	0, 0, 0, 180, 181, 182, 0, 3415, 0, 0,
	2008, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 3711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1953, 0, 0, 0, 128, 0, 0,
	0, 183, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 3414, 0, 0, 0, 0, 1745, 0,
	0, 0, 0, 0, 0, 1976, 0, 134, 0, 0,
	1937, 0, 134, 2941, 2942, 0, 0, 0, 0, 0,
	0, 138, 193, 0, 139, 0, 0, 0, 0, 159,
	130, 1969, 0, 134, 58, 0, 692, 694, 693, 0,
	1979, 1946, 0, 60, 134, 0, 0, 699, 0, 0,
	1980, 1981, 0, 0, 695, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 696, 0, 0, 1945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 1953, 0, 0, 0, 0, 0,
	131, 45, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 5, 0, 1957, 0, 0, 0, 0, 0, 0,
	0, 135, 136, 0, 1963, 137, 0, 138, 193, 0,
	139, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	58, 0, 0, 0, 1951, 1985, 0, 0, 1952, 1954,
	1956, 0, 1958, 1959, 1960, 1964, 1965, 1966, 1968, 1971,
	1972, 1973, 1969, 0, 0, 1741, 0, 0, 0, 1961,
	1970, 1962, 1738, 0, 0, 0, 1740, 1737, 1739, 1743,
	1744, 0, 0, 0, 1742, 698, 702, 708, 0, 709,
	711, 0, 0, 712, 713, 714, 0, 0, 716, 717,
	0, 0, 0, 0, 0, 1977, 131, 45, 0, 0,
	0, 0, 1032, 59, 134, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 2008, 135, 136, 0,
	0, 137, 0, 0, 1936, 1938, 1935, 0, 0, 1932,
	0, 0, 0, 0, 1957, 134, 0, 0, 0, 0,
	1974, 0, 0, 0, 0, 1963, 0, 0, 0, 0,
	0, 3128, 0, 1948, 0, 1931, 0, 1950, 0, 0,
	0, 0, 0, 0, 1949, 1951, 1985, 3140, 0, 1952,
	1954, 1956, 0, 1958, 1959, 1960, 1964, 1965, 1966, 1968,
	1971, 1972, 1973, 0, 1221, 1222, 1223, 1220, 1967, 0,
	1961, 1970, 1962, 0, 0, 0, 0, 1955, 0, 1100,
	0, 0, 1940, 0, 0, 0, 0, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1748, 1749,
	1750, 1751, 1752, 1753, 1746, 1747, 1977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 1976, 0, 0, 0,
	0, 1937, 0, 1933, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 1745, 0, 0, 0, 0, 0, 0,
	0, 1974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1979, 1946, 0, 0, 0, 0, 0, 1950, 0,
	0, 1980, 1981, 1462, 2050, 1949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1945, 0, 1967,
	0, 0, 0, 1085, 0, 0, 0, 0, 1955, 0,
	0, 0, 0, 0, 0, 1953, 0, 0, 0, 0,
	0, 1983, 1982, 1108, 1112, 1114, 1116, 1118, 1119, 1121,
	0, 1126, 1122, 1123, 1124, 1125, 0, 1103, 1104, 1105,
	1106, 1083, 1084, 1109, 0, 1086, 0, 1088, 1089, 1090,
	1091, 1087, 1092, 1093, 1094, 1095, 1096, 1099, 1101, 1097,
	1098, 1107, 0, 0, 0, 0, 0, 0, 0, 1111,
	1113, 1115, 1117, 1120, 1942, 0, 0, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3286, 0, 0, 0, 1102, 0,
	1741, 0, 0, 0, 0, 0, 1978, 1738, 0, 1984,
	0, 1740, 1737, 1739, 1743, 1744, 0, 0, 134, 1742,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1936, 2782, 1935, 0, 0,
	2781, 0, 0, 0, 0, 1957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1951, 1985, 0, 0,
	1952, 1954, 1956, 0, 1958, 1959, 1960, 1964, 1965, 1966,
	1968, 1971, 1972, 1973, 0, 0, 0, 0, 0, 0,
	2050, 1961, 1970, 1962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2620,
	2621, 0, 0, 0, 0, 0, 0, 1977, 0, 0,
	0, 0, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1748, 1749, 1750, 1751, 1752, 1753, 1746,
	1747, 0, 0, 0, 1933, 1934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 1974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 0, 0, 0, 2050, 0, 1949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1967, 0, 0, 0, 0, 0, 0, 0, 0, 1955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	790, 0, 1983, 1982, 0, 0, 0, 0, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 743, 1110, 134, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 1942, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 735, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 1978, 0, 0,
	1984, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 3595, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 863, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 864, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 134, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 847, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	860, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 1769, 1768, 1770, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 859, 839, 841, 842, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 861, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 848, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 870, 843, 869, 871, 872, 868, 873, 874,
	855, 748, 0, 799, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 875, 876, 817, 801, 247, 877, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 790, 630, 496, 497, 631,
	607, 0, 740, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 326, 1819, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 781, 547, 498, 416, 370, 565, 564, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 2033, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 759, 0, 760, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 727, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	0, 791, 0, 738, 0, 0, 2034, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 863, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 864, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	847, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 860, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 859, 839, 841,
	842, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 861, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 848, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 870, 843, 869,
	871, 872, 868, 873, 874, 855, 748, 0, 799, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 875, 876, 817,
	801, 247, 877, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 0, 740, 196, 790,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 326, 0, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 1256, 547, 498, 416,
	370, 565, 564, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	735, 0, 0, 771, 825, 824, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 759, 0, 760, 764,
	767, 763, 761, 762, 0, 840, 0, 0, 0, 0,
	0, 0, 727, 739, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	737, 0, 0, 0, 0, 791, 0, 738, 0, 0,
	786, 765, 769, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 789, 793, 320, 863, 787, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 784, 0, 610,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 788, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 844, 384, 575, 608, 609, 500,
	0, 859, 839, 841, 842, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 861, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 792, 550, 551, 374, 375,
	376, 377, 848, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 870, 843, 869, 871, 872, 868, 873, 874, 855,
	748, 0, 799, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 159, 399, 331, 571, 572, 0, 0, 832,
	806, 807, 808, 745, 809, 803, 804, 746, 805, 833,
	797, 829, 830, 773, 800, 810, 828, 811, 831, 834,
	835, 875, 876, 817, 801, 247, 877, 814, 836, 827,
	826, 812, 798, 837, 838, 780, 775, 815, 816, 802,
	820, 821, 822, 747, 794, 795, 796, 818, 819, 776,
	777, 778, 779, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 823,
	618, 420, 0, 619, 790, 630, 496, 497, 631, 607,
	0, 740, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	326, 3977, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 781, 547, 498, 416, 370, 565, 564, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 735, 0, 0, 771, 825,
	824, 758, 768, 0, 0, 299, 219, 493, 613, 495,
	494, 759, 0, 760, 764, 767, 763, 761, 762, 0,
	840, 0, 0, 0, 0, 0, 0, 727, 739, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 737, 0, 0, 0, 0,
	791, 0, 738, 0, 0, 786, 765, 769, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 766, 789,
	793, 320, 863, 787, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 784, 0, 610, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	788, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 844,
	384, 575, 608, 609, 500, 0, 859, 839, 841, 842,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	861, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	792, 550, 551, 374, 375, 376, 377, 848, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 870, 843, 869, 871,
	872, 868, 873, 874, 855, 748, 0, 799, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 832, 806, 807, 808, 745, 809,
	803, 804, 746, 805, 833, 797, 829, 830, 773, 800,
	810, 828, 811, 831, 834, 835, 875, 876, 817, 801,
	247, 877, 814, 836, 827, 826, 812, 798, 837, 838,
	780, 775, 815, 816, 802, 820, 821, 822, 747, 794,
	795, 796, 818, 819, 776, 777, 778, 779, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 823, 618, 420, 0, 619, 790,
	630, 496, 497, 631, 607, 0, 740, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 326, 0, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 781, 547, 498, 416,
	370, 565, 564, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	735, 0, 0, 771, 825, 824, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 759, 0, 760, 764,
	767, 763, 761, 762, 0, 840, 0, 0, 0, 0,
	0, 0, 727, 739, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	737, 0, 0, 0, 0, 791, 0, 738, 0, 0,
	786, 765, 769, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 789, 793, 320, 863, 787, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 784, 0, 610,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 788, 0, 407, 388, 860,
	3873, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 844, 384, 575, 608, 609, 500,
	0, 859, 839, 841, 842, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 861, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 792, 550, 551, 374, 375,
	376, 377, 848, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 870, 843, 869, 871, 872, 868, 873, 874, 855,
	748, 0, 799, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 832,
	806, 807, 808, 745, 809, 803, 804, 746, 805, 833,
	797, 829, 830, 773, 800, 810, 828, 811, 831, 834,
	835, 875, 876, 817, 801, 247, 877, 814, 836, 827,
	826, 812, 798, 837, 838, 780, 775, 815, 816, 802,
	820, 821, 822, 747, 794, 795, 796, 818, 819, 776,
	777, 778, 779, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 823,
	618, 420, 0, 619, 790, 630, 496, 497, 631, 607,
	0, 740, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	326, 1819, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 781, 547, 498, 416, 370, 565, 564, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 735, 0, 0, 771, 825,
	824, 758, 768, 0, 0, 299, 219, 493, 613, 495,
	494, 759, 0, 760, 764, 767, 763, 761, 762, 0,
	840, 0, 0, 0, 0, 0, 0, 727, 739, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 737, 0, 0, 0, 0,
	791, 0, 738, 0, 0, 786, 765, 769, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 766, 789,
	793, 320, 863, 787, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	864, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 784, 0, 610, 0, 449, 0, 0, 847,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	788, 0, 407, 388, 860, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 844,
	384, 575, 608, 609, 500, 0, 859, 839, 841, 842,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	861, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	792, 550, 551, 374, 375, 376, 377, 848, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 870, 843, 869, 871,
	872, 868, 873, 874, 855, 748, 0, 799, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 832, 806, 807, 808, 745, 809,
	803, 804, 746, 805, 833, 797, 829, 830, 773, 800,
	810, 828, 811, 831, 834, 835, 875, 876, 817, 801,
	247, 877, 814, 836, 827, 826, 812, 798, 837, 838,
	780, 775, 815, 816, 802, 820, 821, 822, 747, 794,
	795, 796, 818, 819, 776, 777, 778, 779, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 823, 618, 420, 0, 619, 790,
	630, 496, 497, 631, 607, 0, 740, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 326, 0, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 781, 547, 498, 416,
	370, 565, 564, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	735, 0, 0, 771, 825, 824, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 759, 0, 760, 764,
	767, 763, 761, 762, 0, 840, 0, 0, 0, 0,
	0, 0, 727, 739, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	737, 1538, 0, 0, 0, 791, 0, 738, 0, 0,
	786, 765, 769, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 789, 793, 320, 863, 787, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 864, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 784, 0, 610,
	0, 449, 0, 0, 847, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 788, 0, 407, 388, 860,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 844, 384, 575, 608, 609, 500,
	0, 859, 839, 841, 842, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 861, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 792, 550, 551, 374, 375,
	376, 377, 848, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 870, 843, 869, 871, 872, 868, 873, 874, 855,
	748, 0, 799, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 832,
	806, 807, 808, 745, 809, 803, 804, 746, 805, 833,
	797, 829, 830, 773, 800, 810, 828, 811, 831, 834,
	835, 875, 876, 817, 801, 247, 877, 814, 836, 827,
	826, 812, 798, 837, 838, 780, 775, 815, 816, 802,
	820, 821, 822, 747, 794, 795, 796, 818, 819, 776,
	777, 778, 779, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 823,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	790, 740, 0, 2204, 0, 0, 0, 0, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 735, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 863, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 864, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 847, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	860, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 859, 839, 841, 842, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 861, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 848, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 870, 843, 869, 871, 872, 868, 873, 874,
	855, 748, 0, 799, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 875, 876, 817, 801, 247, 877, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 790, 630, 496, 497, 631,
	607, 0, 740, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 781, 547, 498, 416, 370, 565, 564, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 759, 0, 760, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 727, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 1812, 0, 0,
	0, 791, 0, 738, 0, 0, 786, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 863, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 864, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	847, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 860, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 859, 839, 841,
	842, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 861, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 848, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 870, 843, 869,
	871, 872, 868, 873, 874, 855, 748, 0, 799, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 875, 876, 817,
	801, 247, 877, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	790, 630, 496, 497, 631, 607, 0, 740, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 735, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 863, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 864, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 847, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	860, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 859, 839, 841, 842, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 861, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 848, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 870, 843, 869, 871, 872, 868, 873, 874,
	855, 748, 0, 799, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 875, 876, 817, 801, 247, 877, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 790, 630, 496, 497, 631,
	607, 0, 740, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 781, 547, 498, 416, 370, 565, 564, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 2672, 0, 2673, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 727, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	0, 791, 0, 738, 0, 0, 786, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 863, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 864, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	847, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 860, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 859, 839, 841,
	842, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 861, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 848, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 870, 843, 869,
	871, 872, 868, 873, 874, 855, 748, 0, 799, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 875, 876, 817,
	801, 247, 877, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	790, 630, 496, 497, 631, 607, 0, 740, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 1682, 0,
	0, 0, 743, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 735, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 863, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 864, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 847, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	860, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 1683, 1684, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 859, 839, 841, 842, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 861, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 848, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 870, 843, 869, 871, 872, 868, 873, 874,
	855, 748, 0, 799, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 875, 876, 817, 801, 247, 877, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 790, 630, 496, 497, 631,
	607, 0, 740, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 781, 547, 498, 416, 370, 565, 564, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 759, 0, 760, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	0, 791, 0, 738, 0, 0, 786, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 863, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 864, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	847, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 860, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 859, 839, 841,
	842, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 861, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 848, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 870, 843, 869,
	871, 872, 868, 873, 874, 855, 748, 0, 799, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 875, 876, 817,
	801, 247, 877, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	790, 630, 496, 497, 631, 607, 0, 740, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 863, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 864, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 847, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	860, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 859, 839, 841, 842, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 861, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 848, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 870, 843, 869, 871, 872, 868, 873, 874,
	855, 748, 0, 799, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 875, 876, 817, 801, 247, 877, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 0, 740, 196, 61, 187, 158, 0, 0, 0,
	0, 0, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 188, 0, 0, 0, 0, 0, 0, 179, 0,
	326, 0, 189, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 132, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 157, 185, 194, 186, 117, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 211,
	0, 0, 0, 421, 0, 0, 353, 184, 178, 177,
	465, 0, 407, 388, 223, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 585, 586, 587, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 444, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 214, 557, 560, 490, 224,
	0, 554, 569, 527, 568, 225, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 130, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 222, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 229,
	294, 432, 230, 0, 283, 506, 357, 159, 399, 331,
	571, 572, 58, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 226, 45,
	212, 215, 217, 216, 0, 59, 555, 567, 601, 5,
	611, 612, 614, 616, 615, 618, 420, 196, 619, 135,
	227, 496, 497, 228, 607, 0, 0, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 132, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 2354, 2357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 2358,
	449, 0, 0, 0, 2353, 0, 2352, 421, 2350, 2355,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 2356, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 159, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 218, 0, 0, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 196, 61, 187, 158, 0, 0, 0, 0, 0,
	0, 386, 656, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 660, 661, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 657, 659, 304, 472, 400,
	671, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 159, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 2515, 2518, 2519, 2520, 2521,
	2522, 2523, 0, 2528, 2524, 2525, 2526, 2527, 0, 2510,
	2511, 2512, 2513, 1083, 2494, 2516, 0, 2495, 382, 2496,
	2497, 2498, 2499, 1087, 2500, 2501, 2502, 2503, 2504, 2507,
	2508, 2505, 2506, 2514, 394, 360, 395, 343, 372, 371,
	373, 1111, 1113, 1115, 1117, 1120, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	2509, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 2517, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 2354, 2357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 2358, 449, 0,
	0, 0, 2353, 0, 2352, 421, 2350, 2355, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 2356, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 2375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 2374,
	449, 0, 0, 0, 2380, 2377, 2379, 421, 0, 2378,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	2372, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 2375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 2374, 449, 0, 0, 0, 2380, 2377, 2379, 421,
	0, 2378, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 2074, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 2075,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 1221, 1222, 1223, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 196, 619, 0, 630, 496,
	497, 631, 607, 0, 0, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 132, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 2124, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 159,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 196,
	619, 0, 630, 496, 497, 631, 607, 0, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 132, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 2110, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 159, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 1015,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 1022, 1023, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 1009, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 997, 447, 293, 996, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 1013, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 1014, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 1017, 550,
	551, 374, 375, 376, 377, 337, 576, 1012, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 1024, 1010,
	1020, 1011, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 1021, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 196, 619, 0, 630, 496,
	497, 631, 607, 0, 0, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 132, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2006, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 159,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 1022, 1023, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 997, 447, 293,
	996, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 1024, 2026, 1020, 2027, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 1021, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 2893, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 2896, 0, 0, 0, 2895, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 1504,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 1502,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 1498, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1502, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3932, 0,
	218, 825, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 1502, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 2419, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 947, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 1502,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1712, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 2457, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 2459, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 2074, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 2075, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 3103, 3105, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 2479, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1502, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 644, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 643, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 825,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3911, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 3690, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 3820, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3532, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3705, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 3621, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 3137, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2006, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 3343, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1502, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 2459,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 2815, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 2576, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 2535,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 2310, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 1860, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 1989, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1502, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	1894, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 1531, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 654, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 947, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 0, 547, 498,
	416, 370, 565, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 493, 613, 495, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 0, 436, 464, 320, 455, 0,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 480, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	610, 0, 449, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 465, 0, 407, 388,
	633, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 319, 384, 575, 608, 609,
	500, 0, 562, 501, 510, 311, 534, 546, 545, 380,
	460, 0, 557, 560, 490, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 445, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 469, 550, 551, 374,
	375, 376, 377, 337, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 574, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	615, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 0,
	547, 498, 416, 370, 565, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 493, 613, 495, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 422, 1481, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 0, 436, 464, 320,
	455, 0, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 480, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 610, 0, 449, 0, 0, 0, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 465, 0,
	407, 388, 633, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 319, 384, 575,
	608, 609, 500, 0, 562, 501, 510, 311, 534, 546,
	545, 380, 460, 0, 557, 560, 490, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 445, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 469, 550,
	551, 374, 375, 376, 377, 337, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 574, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 615, 618, 420, 0, 619, 0, 630, 496,
	497, 631, 607, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 0, 547, 498, 416, 370, 565, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 493, 613, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 422, 1479, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 0, 404, 324, 338, 321, 383, 0, 436,
	464, 320, 455, 0, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 0, 292, 435, 366, 361, 350, 328,
	480, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 610, 0, 449, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	465, 0, 407, 388, 633, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 0, 0,
	0, 461, 354, 355, 0, 333, 281, 282, 629, 319,
	384, 575, 608, 609, 500, 0, 562, 501, 510, 311,
	534, 546, 545, 380, 460, 0, 557, 560, 490, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	445, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	469, 550, 551, 374, 375, 376, 377, 337, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 574, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 615, 618, 420, 0, 619, 0,
	630, 496, 497, 631, 607, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 0, 547, 498, 416, 370, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 493,
	613, 495, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	0, 436, 464, 320, 455, 0, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 480, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 610, 0, 449, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 465, 0, 407, 388, 633, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 722, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 319, 384, 575, 608, 609, 500, 0, 562, 501,
	510, 311, 534, 546, 545, 380, 460, 0, 557, 560,
	490, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 445, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 469, 550, 551, 374, 375, 376, 377, 337,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	574, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 615, 618, 420, 0,
	619, 0, 630, 496, 497, 631, 607, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 0, 547, 498, 416, 370,
	565, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 493, 613, 495, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 0, 436, 464, 320, 455, 0, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 480, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 610, 0,
	449, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 465, 0, 407, 388, 633, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 679, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 319, 384, 575, 608, 609, 500, 0,
	562, 501, 510, 311, 534, 546, 545, 380, 460, 0,
	557, 560, 490, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 680, 591, 445, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 469, 550, 551, 374, 375, 376,
	377, 337, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 574, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 1100,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 1085,
	555, 567, 601, 1075, 611, 612, 614, 616, 615, 618,
	420, 0, 619, 0, 630, 496, 497, 631, 607, 1108,
	1112, 1114, 1116, 1118, 1119, 1121, 0, 1126, 1122, 1123,
	1124, 1125, 0, 1103, 1104, 1105, 1106, 1083, 1084, 1109,
	0, 1086, 0, 1088, 1089, 1090, 1091, 1087, 1092, 1093,
	1094, 1095, 1096, 1099, 1101, 1097, 1098, 1107, 0, 0,
	0, 0, 0, 0, 0, 1111, 1113, 1115, 1117, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 1112, 1114, 1116, 1118, 1119, 1121,
	0, 1126, 1122, 1123, 1124, 1125, 0, 1103, 1104, 1105,
	1106, 1083, 1084, 1109, 0, 1086, 0, 1088, 1089, 1090,
	1091, 1087, 1092, 1093, 1094, 1095, 1096, 1099, 1101, 1097,
	1098, 1107, 701, 700, 707, 697, 0, 0, 0, 1111,
	1113, 1115, 1117, 1120, 704, 705, 1976, 706, 710, 0,
	0, 691, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3541, 0, 0, 1102, 0,
	0, 1979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	721, 0, 0, 0, 0, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1976, 0, 692, 694, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 1110,
	1953, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 0, 718, 0, 1957, 1979, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 1963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1951, 1985, 0, 0,
	1952, 1954, 1956, 0, 1958, 1959, 1960, 1964, 1965, 1966,
	1968, 1971, 1972, 1973, 3682, 0, 0, 0, 1969, 0,
	1953, 1961, 1970, 1962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 702, 708, 0, 709, 711, 1969, 0,
	712, 713, 714, 0, 0, 716, 717, 0, 0, 0,
	1957, 0, 1974, 0, 0, 0, 0, 0, 0, 0,
	0, 1963, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 0, 0, 0, 0, 0, 1949, 0, 0, 0,
	0, 1951, 1985, 0, 0, 1952, 1954, 1956, 0, 1958,
	1959, 1960, 1964, 1965, 1966, 1968, 1971, 1972, 1973, 0,
	1967, 0, 0, 0, 0, 0, 1961, 1970, 1962, 1955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1977, 0, 0, 0, 0, 0, 0, 0,
	0, 1951, 1985, 0, 0, 1952, 1954, 1956, 0, 1958,
	1959, 1960, 1964, 1965, 1966, 1968, 1971, 1972, 1973, 0,
	0, 0, 0, 0, 0, 0, 1961, 1970, 1962, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 1950, 0, 0, 0, 0, 0,
	0, 1949, 1977, 0, 0, 0, 0, 3545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1950, 0, 0, 0, 0, 0,
	0, 1949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3549,
}

var yyPact = [...]int{
	4002, -1000, -1000, -1000, -325, 14080, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47686, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, 47686,
	-316, 29648, 45820, -1000, -1000, 2660, -1000, 46442, 15958, 47686,
	480, 479, 47686, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 930, -1000, 50174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 854, 4022,
	49552, 10946, -219, -1000, 1728, -43, 2538, 538, -196, -199,
	1087, 1097, 1308, 1308, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 230, 972, 47064,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 502, 233, 929, 972, 20938, 111,
	110, 1728, 441, -106, 176, -1000, 1286, 4108, 200, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10946, 10946, 14080, -372, 14080, 10946, 47686, 47686, -1000, -1000,
	-1000, -1000, -316, 46442, 854, 4022, 10946, 2538, 538, -196,
	-199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -106, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50644, -1000, 1616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2268, 3079,
	1615, 2537, 807, 45820, 47686, -1000, 131, 807, -1000, -1000,
	-1000, 1728, 3478, -1000, 47686, 47686, 197, 1896, -1000, 600,
	577, 499, 442, 322, 1614, -1000, -1000, -1000, -1000, -1000,
	-1000, 652, 3424, -1000, 47686, 47686, 3093, 47686, -1000, 2216,
	680, -1000, 50939, 3282, 1440, 968, 3107, -1000, -1000, 3078,
	-1000, 319, 781, 218, 767, 388, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 314, -1000, 3340, -1000, -1000, 318, -1000,
	-1000, 301, -1000, -1000, -1000, 104, -1000, -1000, -1000, -1000,
	-1000, -1000, -37, -1000, -1000, 1155, 2305, 10946, 1888, -1000,
	4175, 1628, -1000, -1000, -1000, 6565, 12821, 12821, 12821, 12821,
	47686, -1000, -1000, 2864, 10946, 3077, 3072, 3070, 3064, -1000,
	-1000, -1000, -1000, -1000, -1000, 1610, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2013, -1000, -1000, -1000, 13446,
	-1000, 3057, 3056, 3054, 3048, 3047, 3043, 3040, 3036, 3031,
	3024, 3019, 3007, 3002, 3001, 2732, 15326, 2995, 2525, 2521,
	2994, 2991, 2989, 2511, 2988, 2987, 2985, 2732, 2732, 2969,
	2966, 2965, 2964, 2962, 2961, 2960, 2955, 2954, 2953, 2933,
	2932, 2923, 2916, 2915, 2911, 2909, 2908, 2902, 2900, 2899,
	2895, 2894, 2893, 2887, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1409, -1000,
	2885, 3443, 2788, -1000, 3321, 3315, 3313, 3311, -266, 2884,
	2185, -1000, -1000, 105, 3423, 47686, -285, 47686, 2510, -113,
	2508, -115, -1000, -62, -1000, -1000, 1067, -1000, 1041, -1000,
	852, 852, 852, 47686, 47686, 190, 897, 852, 852, 852,
	852, 852, 910, 852, 3353, 928, 927, 925, 923, 852,
	-60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1886, 1882,
	3183, 1023, -1000, -1000, -1000, -1000, 1504, 47686, -1000, 2803,
	2507, 1789, 1789, 3401, 3401, 3352, 734, 691, 684, 1789,
	539, -1000, 1853, 1853, 1853, 1853, 1789, 534, 792, 3356,
	3356, 74, 1853, 82, 1789, 1789, 82, 1789, 1789, -1000,
	1891, 251, -272, -1000, -1000, -1000, -1000, 1853, 1853, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3334, 3331, 854, 854,
	47686, 854, 191, 47686, 854, 854, 854, 47686, 873, 9,
	48930, 48308, 2226, 2216, 636, 625, 1516, 1919, -1000, 1802,
	47686, 47686, 1802, 1802, 24050, 23428, -1000, 47686, -1000, 3443,
	2788, 2712, 1609, 2708, 2788, -116, 2506, 854, 854, 854,
	854, 854, 289, 854, 854, 854, 854, 854, 47686, 47686,
	45198, 854, 854, 854, 854, 9065, 9065, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14080, 1985, 2163, 198,
	-13, -309, 254, -1000, -1000, 47686, 3259, 270, -1000, -1000,
	-1000, 2748, -1000, 2789, 2789, 2789, 2789, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2789, 2789, 2794,
	2883, -1000, -1000, 2784, 2784, 2784, 2748, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2791, 2791, 2793, 2793, 2791, 47686, -134, -1000,
	-1000, 10946, 47686, 3272, 421, 2874, 807, -1000, -1000, 47686,
	181, 460, 3443, 3271, 3356, 3395, -1000, -1000, 1601, 2183,
	2501, -1000, 322, -1000, 393, 322, -1000, 567, 567, 1742,
	-1000, 1150, -1000, -1000, -1000, -1000, -1000, -1000, 47686, -37,
	453, -1000, -1000, 2474, 2869, -1000, 609, 1407, 1378, -1000,
	217, 4322, 38356, 2216, 38356, 47686, -1000, -1000, -1000, -1000,
	-1000, -1000, 101, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 299, -1000, 10946,
	10946, 10946, 10946, 10946, -1000, 962, 12196, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12821, 12821, 12821, 12821, 12821, 12821,
	12821, 12821, 12821, 12821, 12821, 12821, 2848, 1865, 12821, 12821,
	12821, 12821, 26538, 1609, 3220, 1508, 302, 1628, 1628, 1628,
	1628, 10946, -1000, 1923, 2305, 10946, 10946, 10946, 10946, 47686,
	-1000, -1000, 4701, 10946, 10946, 4326, 10946, 3309, 10946, 10946,
	10946, 2707, 5306, 47686, 10946, -1000, 2706, 2705, -1000, -1000,
	2036, 10946, -1000, -1000, 10946, -1000, -1000, 10946, 12821, 10946,
	-1000, 10946, 10946, 10946, -1000, -1000, 3502, 3309, 3309, 3309,
	1836, 10946, 10946, 3309, 3309, 3309, 1810, 3309, 3309, 3309,
	3309, 3309, 3309, 3309, 3309, 3309, 3309, 2701, 2700, 2699,
	10321, 3356, -219, -1000, 8440, 3271, 3356, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -268, 2868, 47686,
	2499, 2498, -332, 179, 494, 47686, 1165, 397, 2181, -118,
	2167, 11, 1084, 1053, 1062, -1000, 2497, 1936, 47686, 47686,
	3305, -1000, 2866, 47686, 852, 852, 852, -1000, 43332, 38356,
	47686, 47686, 2216, 47686, 47686, 47686, 852, 852, 852, 852,
	47686, -1000, 3224, 38356, 3193, 873, -1000, 47686, 1504, 3303,
	47686, 397, 3401, 12821, 12821, -1000, -1000, 10946, -1000, 44576,
	1853, 1789, 1789, -1000, -1000, 47686, -1000, -1000, -1000, 1853,
	47686, 1853, 1853, 3401, 1853, -1000, -1000, -1000, 1789, 1789,
	-1000, -1000, 10946, -1000, -1000, 1853, 1853, -1000, -1000, 3401,
	47686, 100, 3401, 3401, 67, -1000, -1000, -1000, 1789, 47686,
	47686, 852, 47686, -1000, 47686, 47686, -1000, -1000, 47686, 47686,
	4519, 47686, 43332, 43954, 3330, -1000, 38356, 47686, 47686, 1501,
	-1000, 907, 35868, -1000, 1439, -1000, 24, -1000, -7, 9,
	1802, 9, 1802, 904, -1000, 608, 605, 22184, 560, 38356,
	5931, -1000, -1000, 1802, 1802, 5931, 5931, 1634, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1486, -1000, 277, 3356, -1000,
	-1000, -1000, -1000, -1000, 2166, 397, 47686, 43332, 38356, 2216,
	47686, 854, 47686, 47686, 47686, 47686, 47686, -1000, 2865, 1584,
	-1000, 3281, 47686, 47686, 47686, 47686, 1373, -1000, -1000, 19068,
	1583, 1373, -1000, 1922, -1000, 10946, 14080, -244, 10946, 14080,
	14080, 10946, 14080, -1000, 10946, 261, -1000, -1000, -1000, -1000,
	2165, -1000, 2151, -1000, -1000, -1000, -1000, -1000, 2482, 2482,
	-1000, 2148, -1000, -1000, -1000, -1000, 2146, -1000, -1000, 2145,
	-1000, -1000, -1000, -1000, -160, 2681, 1155, -1000, 2481, 3106,
	-220, -1000, 20316, 47686, 47686, 421, -349, 1872, 1871, 1868,
	-1000, -220, -1000, 19692, 47686, 3356, -1000, -224, 3271, 10946,
	47686, -1000, 3351, -1000, -1000, 322, -1000, -1000, -1000, 567,
	410, -1000, -1000, -1000, -1000, -1000, -1000, 1573, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 384, -107,
	-108, 1474, -1000, 47686, -1000, -1000, 217, 38356, 40222, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 242, -1000, -1000, 173,
	-1000, 902, 222, 1740, -1000, -1000, 195, 196, 202, 985,
	2305, -1000, 1933, 1933, 1939, -1000, 651, -1000, -1000, -1000,
	-1000, 2864, -1000, -1000, -1000, 2880, 3926, -1000, 1767, 1767,
	1642, 1642, 1642, 1642, 1642, 1787, 1787, -1000, -1000, -1000,
	6565, 2848, 12821, 12821, 12821, 12821, 941, 941, 2630, 2918,
	-1000, -1000, -1000, -1000, 10946, 192, 1916, -1000, 10946, 2876,
	1493, 2824, 1604, 1572, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2680, 2679, 2509, 3419, 2674, 10946,
	-1000, -1000, 1739, 1738, 1735, -1000, 2241, 9696, -1000, -1000,
	-1000, 2673, 1570, 2672, -1000, -1000, -1000, 2670, 1734, 1200,
	2669, 1830, 2668, 2663, 2662, 2658, 1473, 10946, 10946, 10946,
	10946, 2654, 1733, 1705, 10946, 10946, 10946, 10946, 2653, 10946,
	10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 143,
	143, 143, 1470, 1467, -1000, -1000, 1704, -1000, 2305, -1000,
	-1000, 3271, -1000, 2835, 2137, 1466, -1000, -1000, -307, 2399,
	47686, 47686, 175, 47686, 2479, -287, 47686, -1000, -1000, 2470,
	-1000, 2468, -1000, -1000, -1000, 1082, 1036, 1057, 2463, 3277,
	3350, 834, 47686, 1337, 2832, 47686, 47686, 47686, 259, -1000,
	-1000, 1319, -1000, 222, -50, 490, 1278, 3090, 3415, -135,
	47686, 47686, 47686, 47686, 3302, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42710, -1000, 2829, 1703, -1000, -1000, -1000,
	1628, 1628, 2305, 3088, 47686, 47686, 3401, 3401, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1853, 3401, 3401, 1472, 1789,
	1853, -1000, -1000, 1853, -349, -1000, 1853, -1000, -349, 1566,
	-349, 47686, -1000, -1000, -1000, 3292, 2803, 1463, -1000, -1000,
	-1000, 3394, 1088, 842, 842, 1090, 541, 3392, 17824, -1000,
	1761, 1170, 901, 3244, 324, -1000, 1761, -157, 814, 1761,
	1761, 1761, 1761, 1761, 1761, 1761, 595, 594, 1761, 1761,
	1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1091,
	1761, 1761, 1761, 1761, 1761, -1000, 1761, 2828, 455, -1000,
	-1000, -1000, -1000, -1000, -1000, 751, 554, 258, 3329, 362,
	-1000, 355, 1319, 3327, 383, 47686, 47686, 3931, 1322, -1000,
	-1000, -1000, -1000, -1000, 27160, 27160, 21562, 27160, -1000, 194,
	9, 30, -1000, -1000, 1439, 5931, 1439, 5931, 2125, -1000,
	-1000, 894, -1000, -1000, 1278, -1000, 47686, 47686, -1000, -1000,
	2822, 1866, -1000, -1000, 15326, -1000, 5931, 5931, -1000, -1000,
	29026, 47686, -1000, -44, -1000, -16, 3271, -1000, -1000, 1166,
	-1000, -1000, 1433, 1278, 3104, 47686, 1166, 1166, 1166, -1000,
	-1000, 16580, 47686, 47686, -1000, -1000, -1000, -1000, 3401, 9065,
	-1000, 35868, -1000, -1000, 42088, -1000, 41466, 3401, 1910, -1000,
	14080, 2159, 186, -1000, 250, -311, 188, 2127, 185, 2305,
	-1000, -1000, 2644, 2642, 1701, -1000, 1692, 2632, 1676, 1674,
	2124, -1000, 64, -1000, 3261, 1287, -1000, 2820, -1000, 1668,
	3174, -1000, 1423, -1000, 1861, 1641, -1000, -1000, -1000, 10946,
	40844, 10946, 1287, 1636, 3163, 1423, 3271, 2461, -1000, 1422,
	-1000, 2283, 1565, 193, -1000, -1000, -1000, 47686, 854, 2474,
	1635, 40222, 1361, -1000, 889, 1546, 1538, -1000, 38356, 309,
	38356, -1000, 38356, -1000, -1000, 389, -1000, 47686, 3270, -1000,
	-1000, -1000, 2399, 1860, -348, 47686, -1000, -1000, -1000, -1000,
	-1000, 1626, -1000, 941, 941, 2630, 2435, -1000, 12821, -1000,
	12821, 3216, -1000, 1909, -1000, 10946, 2141, 4798, 10946, 4798,
	1143, 25294, 47686, -1000, -1000, 10946, 10946, -1000, 3125, -1000,
	-1000, -1000, -1000, 10946, 10946, 2233, -1000, 47686, -1000, -1000,
	-1000, -1000, 25294, -1000, 12821, -1000, -1000, -1000, -1000, 10946,
	1372, 1372, 3084, 1625, 143, 143, 143, 3080, 3068, 3045,
	1624, 143, 3032, 3022, 2999, 2928, 2897, 2861, 2850, 2842,
	2830, 2816, -1000, 2819, -1000, -1000, 1981, 11571, 8440, -1000,
	-1000, 321, 1411, 2123, 2459, 115, -1000, 1856, -1000, 2458,
	47686, 47686, 1164, -1000, 47686, 3413, -1000, 2457, -1000, -1000,
	-1000, 1034, 2455, -1000, 411, 2043, 172, 293, 2626, 1402,
	-1000, -1000, 47686, -1000, -1000, -1000, 16580, 2803, 2815, 2803,
	150, 1761, 628, 38356, 613, -1000, 47686, 2016, 1841, 3103,
	741, 3256, 47686, 2814, 422, 2810, 2806, 3291, 450, 50738,
	47686, 1344, -1000, 1536, 4108, -1000, 47686, -1000, 2216, -1000,
	1789, -1000, -1000, 3401, -1000, -1000, 10946, 10946, 3401, 1789,
	1789, -1000, 1853, -1000, 47686, -1000, -349, 450, 50738, 3290,
	4870, 574, 2717, -1000, 47686, -1000, -1000, -1000, 847, -1000,
	1052, 852, 47686, 1961, 1052, 1959, 2805, -1000, -1000, 47686,
	47686, 47686, 47686, -1000, -1000, 47686, -1000, 47686, 47686, 47686,
	47686, 47686, 39600, -1000, 47686, 47686, -1000, 47686, 1957, 47686,
	1956, 3242, -1000, 1761, 1761, 981, -1000, -1000, 616, -1000,
	39600, 2104, 2102, 2101, 2100, 2454, 2453, 2449, 1761, 1761,
	2098, 2444, 38978, 2440, 1180, 2096, 2090, 2087, 2078, 2439,
	1050, -1000, 2438, 2075, 2072, 2070, 47686, 2804, 2344, 452,
	-1000, -1000, 2043, 150, 1761, 359, 47686, 1840, 1838, 628,
	483, -52, 22806, -1000, -1000, -1000, 47686, 35868, 35868, 35868,
	35868, 35868, 35868, -1000, 3141, 3138, 3137, -1000, 3145, 3139,
	3160, 3135, 2903, 47686, 35868, 2803, -1000, 38978, -1000, -1000,
	-1000, 1609, 1605, 3485, 1039, 10946, -1000, -1000, 0, -32,
	-1000, -1000, -1000, -1000, 38356, 2434, 560, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3348, 47686, 47686, 808, 2625, 1389,
	-1000, -1000, -1000, 50738, 2789, 2789, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2789, 2789, 2794, -1000, -1000,
	2784, 2784, 2784, 2748, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2791, 2791, 2793, 2793, 2791, -1000,
	-1000, 3399, -1000, 1387, -1000, -1000, 1530, -1000, 3399, 1920,
	-327, 14080, 1913, 1867, -1000, 10946, 14080, 10946, -245, 336,
	-248, -1000, -1000, -1000, 2433, -1000, -1000, -1000, 2086, -1000,
	2084, -1000, 161, 182, 1954, -220, 8440, 435, 47686, -220,
	47686, 8440, -1000, 47686, 187, -365, -369, 177, 404, -220,
	3348, 64, 10946, 3202, -1000, -1000, 47686, 2083, -1000, -1000,
	-1000, 3412, 38356, 2216, 1672, 37734, -1000, 317, -1000, 241,
	606, 2432, -1000, 922, 113, 2409, 2399, -1000, -1000, -1000,
	-1000, 12821, 1628, -1000, -1000, -1000, 2305, 10946, 2624, -1000,
	1043, 1043, 2177, 2621, 2618, -1000, 2789, 2789, -1000, 2748,
	2784, 2748, 1043, 1043, 2617, -1000, 2209, 2808, -1000, 2741,
	2733, 10946, -1000, 2614, 3476, 1443, -69, -189, 143, 143,
	-1000, -1000, -1000, -1000, 143, 143, 143, 143, -1000, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 811,
	-96, -276, -97, -277, -1000, 2612, 1384, -1000, -1000, -1000,
	-1000, -1000, 4326, 1382, 507, 507, 2399, 2397, -1000, 884,
	2391, 1071, 47686, 2389, -290, -1000, -1000, 2388, -1000, -1000,
	47686, 2387, -1000, 553, 47686, 47686, 2385, 2383, 1337, 50738,
	2611, 3287, 17202, 3286, 2194, -1000, -1000, -1000, 28404, 589,
	-1000, -1000, -1000, 672, 308, 2079, 581, -1000, 47686, 485,
	3192, 1837, 2381, 47686, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3256, -1000, 965, 415, 34624, 14704, -1000, 440, 47686,
	-1000, 17202, 17202, 440, 428, 1808, -1000, 807, 1198, 123,
	35868, 47686, -1000, 35246, 2609, -1000, 1278, 3401, -1000, 2305,
	2305, -349, 3401, 3401, 1789, -1000, -1000, 428, -1000, 440,
	-1000, 1594, 18446, 521, 446, 438, -1000, 678, -1000, -1000,
	806, 3251, 50738, -1000, 47686, -1000, 47686, -1000, 47686, 47686,
	852, 10946, 3251, 47686, 879, -1000, 1157, 431, 402, 743,
	743, 1380, -1000, 3266, -1000, -1000, 1379, -1000, -1000, -1000,
	-1000, 47686, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25294,
	25294, 3326, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2380, 2379, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47686, 1598, -1000, 1834,
	2076, 2378, 2194, 28404, 1832, 1802, 2371, 2365, 589, 2016,
	1831, 917, 47686, -1000, 1209, 47686, 47686, -1000, 1370, -1000,
	1828, 3085, 3097, 3085, -1000, 3085, -1000, -1000, -1000, -1000,
	-1000, -1000, 3122, -1000, 3016, -1000, -1000, -1000, -1000, 1370,
	-1000, -1000, -1000, -1000, -1000, 1039, -1000, 3345, 1052, 1052,
	1052, 2608, -1000, -1000, -1000, 1361, 2603, -1000, -1000, -1000,
	3433, -1000, -1000, -1000, -1000, -1000, -1000, 16580, 3252, 3397,
	3384, 37112, 3397, -1000, -327, 1833, -1000, 2115, 180, 2041,
	47686, -1000, -1000, -1000, 2601, 2600, -226, 183, 3383, 3382,
	1083, -1000, 2596, 1354, -220, -1000, -1000, 1287, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -220, -1000, 1287, -1000, 161,
	-1000, -1000, 3207, -1000, -1000, 2216, -1000, 238, -1000, -1000,
	-1000, -1000, -1000, -1000, 204, -1000, 47686, -1000, 1332, 109,
	-1000, 2305, -1000, -1000, -1000, -1000, -1000, 4798, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10946,
	-1000, -1000, -1000, 2622, -1000, -1000, 10946, 2594, 2362, 2593,
	2359, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3443, -1000, 3380,
	1580, 2591, 2584, 1544, 2583, 2578, -1000, 10946, 2572, 4326,
	1005, 2358, 1005, -1000, -1000, 375, 27782, 47686, 3404, -1000,
	47686, 2357, -1000, -1000, 2043, 550, 610, -1000, -1000, -1000,
	-1000, 903, 440, 2570, 1313, -1000, -1000, -1000, -1000, 440,
	-1000, 2355, 221, -1000, -1000, -1000, -1000, 2353, 2345, 2074,
	-1000, -1000, 2067, 1581, 248, -1000, -1000, -1000, -1000, -1000,
	-1000, 2169, 47686, 36490, 2193, 1827, -351, -1000, 2782, -1000,
	1761, 1761, 1761, 47686, 1541, -1000, 1761, 1761, 2567, -1000,
	-1000, 2566, 2553, -136, 809, 1807, 1805, -1000, 2068, 27160,
	35868, 35246, 1272, -1000, 1521, -1000, -1000, -1000, -1000, -1000,
	-1000, 3401, 809, -1000, 511, 2066, 12821, 2779, 12821, 2778,
	536, 2777, 1515, -1000, 47686, -1000, -1000, 47686, 3902, 2775,
	-1000, 2773, 3034, 501, 2768, 2766, 47686, 2528, -1000, 3251,
	47686, 750, 3218, -1000, -1000, -1000, 386, -1000, -1000, 542,
	-1000, 47686, -1000, 47686, -1000, 1622, -1000, 25294, -1000, -1000,
	1514, -1000, 2344, 2343, 4326, -1000, -1000, 221, 2340, 5931,
	-1000, -1000, -1000, 3192, 2338, 2169, 47686, -1000, 47686, 1209,
	1209, 3443, 47686, 8440, -1000, -1000, 10946, 2765, -1000, 10946,
	-1000, -1000, -1000, -1000, -1000, -1000, 2756, 3226, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1774, -1000, 10946, 10946, -1000,
	-1000, 845, 14080, -249, 332, -1000, -1000, -1000, -231, 2337,
	-1000, -1000, 3379, 2335, 2211, 47686, -1000, -1000, 1287, 1287,
	-226, -1000, -1000, 1278, -1000, -1000, 1159, 599, -1000, 2552,
	2452, -1000, 2442, 143, -1000, 143, -1000, 257, 10946, -1000,
	2334, -1000, -1000, -1000, 2333, -1000, -1000, 2295, -1000, 2550,
	-1000, 2332, -1000, -1000, 47686, -1000, -1000, 1070, 2325, -352,
	2323, 2043, 2043, 47686, 50738, -142, -136, 17202, -142, -1000,
	-1000, 382, -1000, -1000, 367, -1000, -1000, 2042, 617, -1000,
	-1000, 2321, 596, -1000, 1209, -1000, 1822, 1971, 2273, 32758,
	25294, 26538, 2316, -1000, -1000, 34624, 1774, 1774, 50960, 299,
	51165, -1000, 2755, 1103, 1801, -1000, 2063, -1000, 2062, -1000,
	3401, 1272, 122, -1000, -1000, 1633, -1000, 1103, 2717, 3378,
	-1000, 3124, 47686, 2665, 47686, 2754, 1821, 12821, -1000, 806,
	3161, -1000, -1000, 3902, -1000, -1000, 1974, 12821, -1000, -1000,
	2314, 26538, 898, 1820, 1818, 851, 2752, -1000, 564, 3432,
	-1000, -1000, -1000, 978, 2751, -1000, 1949, 1947, -1000, 47686,
	-1000, 32758, 32758, 454, 454, 32758, 32758, 2750, 743, -1000,
	-1000, 12821, -1000, -1000, 1761, -1000, -1000, -1000, 1761, 1621,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2193, -1000, -1000,
	1166, -1000, 3356, -1000, -1000, 2305, 47686, 2305, 34002, -1000,
	3377, 3376, -1000, 2305, 236, -1000, -327, 47686, 47686, -234,
	2061, -1000, 2313, 184, -1000, -1000, 1162, -231, -236, 67,
	25294, 1799, -1000, -1000, -1000, -1000, -1000, 2547, -1000, 675,
	-1000, -1000, -1000, 1155, 2546, 2544, -1000, -1000, -1000, -1000,
	47686, -1000, 2253, -1000, 2311, 2310, 544, -131, -1000, -1000,
	391, -1000, -1000, -1000, 576, 2259, -1000, -1000, 366, -1000,
	-1000, -1000, 2169, 2309, -1000, -1000, 107, -1000, 1798, 1511,
	-1000, 2748, 10946, -1000, -1000, -1000, -1000, -1000, -1000, 793,
	-1000, 440, 51095, -1000, 1170, 25916, -1000, 1159, 793, 455,
	31514, 720, 297, -1000, 2059, -1000, -1000, 3443, -1000, 686,
	-1000, 532, -1000, 1510, -1000, 1503, 33380, 2058, 1946, -1000,
	4388, 899, -1000, -1000, 2630, -1000, -1000, -1000, -1000, -1000,
	-1000, 2302, 2297, -1000, -1000, -1000, -1000, -1000, 2049, 2747,
	51, 3324, 2291, -1000, -1000, 2744, 1444, 1421, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1419, 1414, 32758,
	-1000, -1000, 2630, 2047, 25294, 1761, -1000, -1000, 1413, 1408,
	-1000, -1000, -1000, -1000, -1000, -300, -1000, -1000, -1000, 2743,
	-1000, -1000, 3375, -234, -238, 2288, 156, 174, -1000, 2276,
	-1000, -1000, 705, -221, 141, 138, 137, -1000, -1000, -1000,
	10946, -1000, -1000, -1000, 106, -1000, 1773, -1000, -1000, 2043,
	47686, 561, -1000, -1000, -1000, -1000, 203, -1000, -1000, -1000,
	-1000, -1000, -1000, 2273, 2267, -1000, 32758, 3266, 2227, 500,
	3373, -1000, 51165, -1000, 1761, -1000, 500, 1406, -1000, 1761,
	1761, -1000, 448, -1000, 1782, -1000, 2040, -1000, 3356, -1000,
	433, -1000, 504, -1000, -1000, -1000, 1401, -1000, -1000, -1000,
	4388, 512, -1000, 754, 2740, -1000, -1000, 2447, 10946, 2732,
	1761, 2232, -127, 32758, 2920, 2852, 2735, 2460, 1390, -1000,
	-1000, 25294, -1000, -1000, 32136, -1000, 47686, 2211, -1000, -1000,
	2261, -1000, 848, 160, 174, -1000, 3371, 163, 3367, 3361,
	1126, 1934, -1000, 130, 121, 118, -1000, -1000, -1000, -1000,
	-1000, 2253, 2243, 2238, 565, -1000, 316, -1000, -1000, -1000,
	307, -1000, -1000, 3266, -1000, 3360, 574, -1000, 25294, -1000,
	-1000, 31514, 1774, 1774, -1000, -1000, 2039, -1000, -1000, -1000,
	-1000, 2035, -1000, -1000, -1000, 1327, -1000, 47686, 955, 7815,
	-1000, 2223, -1000, 47686, -1000, 3095, -1000, 210, 1318, 307,
	454, 307, 454, 307, 454, 307, 454, 305, -1000, -1000,
	-1000, 1290, -1000, -1000, -1000, 2718, 2034, 183, 168, 3359,
	-1000, 2211, 3358, 2211, 2211, -1000, 112, 705, -1000, -1000,
	-1000, -1000, -1000, -1000, 2235, -1000, -1000, -1000, -1000, 1761,
	1761, 2225, 2217, 414, -1000, -1000, -1000, 30892, 521, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 512, 51165, -1000, 7815,
	1285, -1000, 2305, -1000, 743, -1000, -1000, 3071, 2833, 3409,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47686, 3318, 24672, 153, -1000, -1000, -1000, 2214, -1000, 2211,
	-1000, -1000, 1759, -1000, -274, 2031, 2022, -1000, -1000, 47686,
	-1000, 47686, 511, -1000, 51165, 1281, -1000, 7815, -1000, -1000,
	3428, -1000, 3426, 963, 963, 307, 307, 307, 307, -1000,
	-1000, 47686, -1000, 1279, -1000, -1000, -1000, 1519, -1000, -1000,
	-1000, -1000, 2207, -1000, -1000, 2205, -1000, -1000, -1000, 1213,
	2717, -1000, -1000, -1000, -1000, -1000, 2033, 568, -1000, 1114,
	-1000, 1709, -1000, 30270, 47686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47686, 7190, -1000, 1338, -1000, -1000, 2305, 47686,
	-1000,
}

var yyPgo = [...]int{
	0, 176, 3472, 255, 206, 4109, 108, 257, 256, 247,
	252, 4108, 4107, 4106, 4105, 3223, 3215, 4104, 4102, 4101,
	4100, 4099, 4098, 4097, 4096, 4095, 4094, 4093, 4092, 4091,
	4090, 4088, 4086, 4085, 4084, 4083, 4082, 4081, 4080, 4079,
	4062, 4061, 4060, 4059, 4058, 4055, 4053, 251, 4052, 4049,
	4046, 4045, 4042, 4041, 4039, 4034, 4032, 4023, 4022, 4021,
	4020, 4012, 4010, 4007, 3998, 3996, 3995, 3994, 3993, 3991,
	3990, 3989, 3988, 3987, 3986, 3985, 3983, 3982, 3979, 248,
	3978, 3976, 241, 3973, 3192, 3972, 3971, 3970, 3969, 3966,
	3963, 3961, 3960, 299, 3959, 3958, 3957, 3955, 3954, 3953,
	3952, 3951, 3950, 3949, 3948, 3946, 284, 3945, 3944, 3942,
	3941, 236, 3940, 271, 3939, 184, 140, 3938, 3937, 3936,
	3934, 3931, 3930, 3929, 3928, 3927, 3923, 3917, 3916, 3915,
	238, 192, 75, 3914, 51, 3913, 3909, 225, 3908, 147,
	3907, 155, 3906, 3897, 3895, 3890, 3889, 3888, 3884, 3883,
	3882, 3879, 3871, 3870, 3869, 3867, 3865, 3863, 3857, 3855,
	3854, 3853, 3850, 3849, 3848, 56, 3847, 261, 3842, 80,
	3841, 178, 3840, 71, 3835, 72, 139, 260, 1985, 263,
	258, 190, 174, 3834, 3833, 329, 3827, 166, 229, 165,
	100, 29, 3821, 143, 3820, 275, 48, 45, 242, 163,
	57, 175, 125, 3818, 219, 102, 115, 3817, 3813, 142,
	3812, 240, 180, 3811, 105, 3810, 3809, 3808, 3806, 3802,
	199, 195, 3801, 3800, 133, 3799, 3797, 110, 128, 3796,
	79, 127, 173, 124, 3795, 2047, 123, 96, 3794, 121,
	111, 3793, 202, 3788, 3785, 3781, 3780, 183, 3778, 3775,
	135, 77, 3774, 3773, 3771, 67, 3770, 84, 3769, 40,
	3768, 58, 3766, 3765, 3764, 3762, 3761, 3760, 3759, 3758,
	3757, 3756, 3755, 3753, 64, 3752, 3751, 7, 15, 14,
	3750, 26, 3746, 177, 3745, 3743, 169, 3742, 198, 3736,
	3734, 95, 93, 3733, 94, 171, 3731, 9, 25, 78,
	3730, 3728, 223, 337, 104, 149, 3726, 283, 3725, 3722,
	3721, 170, 3719, 3718, 3717, 488, 3714, 3713, 3712, 3711,
	3710, 3706, 23, 3705, 1, 222, 44, 3704, 137, 136,
	3703, 42, 30, 3702, 52, 116, 216, 134, 101, 3699,
	3698, 3697, 542, 193, 112, 35, 0, 103, 226, 157,
	3695, 3693, 3691, 244, 3690, 233, 228, 235, 296, 259,
	220, 3689, 3688, 76, 3687, 164, 32, 55, 151, 65,
	21, 186, 3685, 414, 8, 212, 3684, 210, 3683, 208,
	16, 153, 150, 3682, 3681, 34, 264, 3676, 3671, 3670,
	130, 3669, 3668, 187, 81, 3667, 3666, 3665, 3663, 39,
	3662, 38, 13, 3660, 126, 3659, 277, 3658, 319, 138,
	181, 179, 162, 232, 231, 86, 83, 3657, 1859, 158,
	109, 27, 3656, 227, 3653, 168, 129, 3652, 87, 3647,
	243, 267, 203, 3646, 191, 10, 43, 36, 28, 50,
	12, 433, 200, 3645, 3644, 18, 54, 3643, 59, 3642,
	19, 3641, 3640, 41, 3639, 74, 5, 3637, 3636, 17,
	20, 3635, 37, 205, 182, 132, 98, 89, 3632, 3631,
	53, 161, 3630, 159, 152, 156, 3629, 85, 3628, 3613,
	3611, 3609, 2784, 3608, 269, 3607, 3604, 3603, 3602, 3601,
	3598, 3596, 3595, 3594, 221, 3593, 144, 47, 3591, 3588,
	3587, 3586, 82, 148, 3584, 3583, 3582, 3576, 31, 145,
	3575, 11, 3574, 24, 22, 33, 3573, 113, 3569, 3,
	188, 3568, 3566, 4, 3561, 3550, 2, 3549, 3548, 119,
	3547, 97, 49, 172, 106, 3543, 3541, 92, 211, 146,
	3540, 3537, 99, 245, 204, 3534, 154, 249, 250, 3533,
	209, 3531, 3530, 3529, 3528, 3526, 3525, 1221, 3524, 3523,
	254, 66, 91, 3522, 230, 118, 3520, 3519, 90, 167,
	122, 117, 61, 88, 3518, 114, 201, 3517, 197, 3515,
	239, 3512, 3510, 107, 3508, 3505, 3504, 3503, 194, 3502,
	3500, 196, 234, 3496, 3495, 270, 3494, 3493, 3492, 3491,
	3488, 3480, 3479, 3478, 3477, 3476, 246, 253, 3455,
}

//line mysql_sql.y:12559
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 601, 604, 604, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 337, 337, 338, 338, 123, 333, 333, 332, 332,
	124, 125, 126, 580, 580, 127, 128, 157, 579, 579,
	159, 159, 159, 159, 159, 453, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 586, 586, 586,
	587, 587, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 528, 528, 527, 527,
	526, 526, 478, 478, 479, 479, 324, 324, 324, 525,
	525, 525, 524, 524, 523, 523, 522, 522, 520, 520,
	521, 519, 518, 518, 518, 516, 516, 516, 512, 512,
	514, 513, 513, 515, 507, 507, 510, 510, 508, 508,
	508, 508, 511, 506, 506, 506, 505, 505, 105, 105,
	105, 420, 420, 104, 104, 434, 434, 434, 434, 434,
	432, 432, 432, 432, 432, 432, 431, 431, 430, 430,
	435, 435, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 592, 592, 591, 591, 593, 593, 593,
	593, 594, 594, 97, 97, 97, 98, 429, 429, 429,
	95, 96, 96, 419, 419, 424, 424, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	428, 428, 428, 426, 426, 425, 425, 427, 427, 88,
	88, 88, 91, 90, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 416, 416,
	415, 101, 101, 102, 589, 589, 588, 590, 590, 590,
	590, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 553, 553,
	553, 553, 555, 555, 351, 352, 605, 354, 350, 350,
	350, 549, 549, 550, 551, 552, 552, 552, 107, 14,
	210, 210, 452, 452, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 13, 81, 86, 86, 87, 287,
	287, 288, 282, 282, 289, 289, 162, 290, 290, 290,
	295, 295, 296, 296, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 269, 269, 269, 264,
	264, 264, 264, 265, 265, 266, 266, 267, 267, 267,
	267, 268, 268, 343, 343, 291, 291, 291, 293, 293,
	292, 286, 284, 284, 284, 284, 284, 284, 284, 285,
	285, 285, 285, 294, 294, 79, 85, 85, 85, 85,
	567, 567, 80, 578, 578, 482, 482, 365, 365, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 488, 489, 361, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 161, 53, 53, 53, 405,
	405, 52, 606, 606, 336, 336, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 501, 501, 608, 608, 608,
	74, 75, 481, 481, 481, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 152, 59, 153, 153,
	358, 358, 358, 360, 360, 356, 607, 607, 448, 448,
	359, 359, 48, 48, 48, 48, 77, 357, 357, 335,
	355, 355, 355, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 413, 413, 410, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 182, 182,
	236, 236, 561, 561, 557, 557, 558, 558, 558, 559,
	559, 560, 560, 113, 495, 495, 495, 495, 495, 495,
	8, 8, 205, 205, 494, 494, 494, 494, 494, 494,
	417, 417, 417, 538, 538, 538, 539, 204, 204, 199,
	199, 496, 496, 382, 540, 540, 504, 504, 503, 503,
	502, 502, 202, 202, 203, 203, 185, 185, 131, 131,
	509, 509, 509, 509, 517, 517, 477, 477, 274, 274,
	326, 326, 327, 327, 175, 175, 176, 176, 176, 176,
	176, 176, 595, 595, 596, 597, 598, 598, 599, 599,
	599, 600, 600, 600, 600, 600, 546, 546, 548, 548,
	547, 201, 201, 197, 197, 198, 198, 198, 196, 196,
	195, 194, 194, 193, 191, 191, 191, 192, 192, 192,
	209, 209, 178, 178, 178, 177, 177, 177, 177, 177,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 179, 179, 554, 554, 554, 483, 483, 483,
	491, 491, 304, 304, 305, 305, 487, 487, 303, 303,
	180, 180, 181, 181, 181, 181, 302, 302, 301, 190,
	190, 189, 188, 188, 188, 183, 183, 183, 183, 183,
	184, 313, 313, 312, 312, 311, 311, 311, 311, 314,
	116, 129, 129, 130, 208, 208, 310, 309, 309, 309,
	309, 207, 207, 206, 206, 200, 200, 187, 187, 187,
	187, 308, 186, 306, 585, 585, 584, 584, 583, 581,
	581, 581, 582, 582, 582, 582, 530, 530, 530, 530,
	530, 344, 344, 344, 349, 349, 347, 347, 347, 347,
	347, 353, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 219, 220, 40, 221, 221,
	222, 222, 223, 223, 224, 225, 226, 226, 226, 226,
	38, 211, 211, 212, 212, 213, 213, 214, 215, 215,
	215, 218, 216, 217, 217, 603, 603, 602, 37, 37,
	30, 166, 166, 167, 167, 167, 169, 169, 270, 270,
	270, 168, 168, 170, 170, 170, 562, 564, 564, 566,
	565, 565, 565, 568, 568, 568, 568, 568, 569, 569,
	569, 569, 570, 570, 31, 149, 149, 173, 173, 154,
	573, 573, 573, 572, 572, 574, 574, 575, 575, 330,
	330, 331, 331, 164, 165, 165, 156, 151, 172, 172,
	172, 172, 172, 174, 174, 238, 238, 150, 155, 158,
	160, 563, 571, 571, 571, 414, 414, 411, 412, 412,
	409, 408, 408, 408, 577, 577, 576, 576, 576, 345,
	345, 32, 404, 404, 406, 407, 407, 407, 398, 398,
	398, 398, 36, 402, 402, 403, 403, 403, 403, 403,
	403, 403, 399, 399, 401, 401, 397, 397, 397, 397,
	397, 397, 397, 35, 171, 171, 396, 396, 393, 393,
	391, 391, 392, 392, 390, 390, 390, 394, 394, 43,
	78, 44, 45, 46, 42, 395, 395, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 133, 132, 132,
	132, 132, 132, 135, 135, 329, 329, 328, 328, 134,
	271, 271, 41, 249, 249, 469, 469, 464, 464, 464,
	464, 464, 485, 485, 485, 465, 465, 465, 466, 466,
	466, 468, 468, 468, 467, 467, 467, 467, 467, 484,
	484, 486, 486, 486, 436, 436, 437, 437, 437, 440,
	440, 456, 456, 457, 457, 455, 455, 462, 462, 461,
	461, 460, 460, 459, 459, 458, 458, 458, 458, 451,
	451, 450, 450, 438, 438, 438, 438, 438, 439, 439,
	439, 449, 449, 454, 454, 300, 300, 299, 299, 257,
	257, 258, 258, 298, 298, 255, 255, 256, 256, 256,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 536, 536, 537, 260,
	260, 272, 272, 272, 272, 272, 272, 259, 259, 261,
	261, 237, 237, 235, 235, 227, 227, 227, 227, 227,
	228, 228, 229, 229, 230, 230, 230, 234, 234, 233,
	233, 233, 233, 231, 231, 232, 232, 232, 232, 232,
	232, 422, 422, 533, 533, 534, 534, 529, 529, 529,
	532, 532, 532, 532, 532, 532, 532, 535, 535, 535,
	531, 531, 239, 323, 323, 323, 346, 346, 346, 346,
	348, 322, 322, 322, 254, 254, 253, 253, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	421, 421, 362, 362, 363, 363, 281, 280, 280, 280,
	280, 280, 278, 279, 277, 277, 277, 277, 277, 276,
	276, 275, 275, 275, 400, 400, 273, 273, 263, 263,
	263, 262, 262, 262, 463, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 320, 320, 320, 321, 321, 321,
	321, 321, 321, 321, 321, 372, 372, 378, 378, 545,
	545, 544, 240, 240, 240, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 250, 250, 250, 445, 445, 445,
	445, 446, 446, 446, 446, 447, 447, 447, 443, 443,
	444, 444, 383, 384, 384, 492, 492, 493, 493, 441,
	441, 442, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 500, 500, 500, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 556, 556, 556, 541, 541, 541, 542,
	542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
	542, 543, 543, 543, 543, 543, 543, 543, 543, 543,
	543, 543, 543, 543, 543, 543, 543, 543, 318, 318,
	318, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 385,
	385, 386, 386, 497, 497, 497, 497, 497, 497, 498,
	498, 499, 499, 499, 499, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 370, 315, 315, 315, 387,
	379, 379, 380, 380, 381, 381, 373, 373, 373, 373,
	373, 373, 374, 374, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 375, 375, 377, 377,
	389, 389, 389, 388, 388, 388, 388, 388, 388, 388,
	252, 252, 252, 252, 367, 367, 367, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 242,
	242, 242, 242, 246, 246, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 247,
	247, 247, 247, 247, 245, 245, 245, 245, 245, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 114, 115,
	115, 244, 325, 325, 470, 470, 473, 473, 471, 471,
	472, 474, 474, 474, 475, 475, 475, 476, 476, 476,
	480, 480, 334, 334, 334, 342, 342, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	3, 4, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 10, 7, 4, 4, 3, 1,
	3, 3, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 7, 8, 8,
	0, 4, 7, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 4, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 1, 4, 4, 4, 3, 4,
	3, 2, 2, 2, 2, 2, 3, 2, 3, 2,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 4,
	1, 1, 1, 3, 3, 4, 3, 3, 0, 1,
	1, 1, 0, 2, 7, 8, 10, 2, 2, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 8, 0, 2,
	2, 3, 3, 0, 2, 0, 2, 4, 4, 4,
	4, 1, 0, 2, 2, 1, 3, 2, 1, 3,
	2, 1, 3, 2, 0, 1, 3, 4, 3, 1,
	1, 4, 1, 3, 1, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 3, 2, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 4, 4, 4, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 4, 1, 2, 3,
	5, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -601, -604, -2, -5, 629, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 619, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 552, 625,
	455, 14, 504, -15, -16, -546, -17, 264, -350, -351,
	-352, -354, -605, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 238, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 379, 385,
	442, 618, 61, -176, -178, 639, 640, 643, 539, 542,
	162, 163, 165, 166, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 234, 16, 547,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 259, 258, 38,
	325, 326, 327, 383, 257, 235, 237, 15, 31, 42,
	358, -177, 85, 540, 236, -179, 13, 645, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	120, 249, 620, -346, 375, 621, 623, 622, 88, 96,
	-339, -341, 455, 264, 379, 385, 618, 640, 643, 539,
	542, 554, 555, 556, 557, 558, 559, 560, 561, 563,
	564, 565, 566, 567, 568, 569, 579, 580, 570, 571,
	572, 573, 574, 575, 576, 577, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	507, 604, 605, 606, 607, 535, 562, 598, 599, 600,
	601, 356, 357, 544, 276, 300, 410, 306, 313, 162,
	181, 175, 204, 195, 540, 170, 280, 318, 281, 95,
	165, 490, 110, 467, 439, 168, 295, 297, 299, 536,
	537, 369, 302, 534, 301, 303, 305, 538, 282, 359,
	191, 186, 294, 278, 184, 283, 40, 284, 209, 285,
	286, 549, 463, 355, 469, 310, 52, 437, 185, 464,
	298, 466, 213, 217, 481, 482, 179, 180, 471, 484,
	208, 211, 212, 256, 352, 353, 43, 546, 268, 485,
	215, 207, 202, 493, 314, 312, 206, 178, 201, 279,
	65, 219, 218, 220, 433, 434, 435, 436, 287, 288,
	373, 480, 198, 187, 360, 171, 23, 488, 263, 468,
	386, 289, 307, 315, 214, 216, 270, 275, 330, 548,
	441, 274, 311, 486, 183, 267, 296, 262, 489, 172,
	388, 290, 166, 304, 483, 492, 64, 401, 177, 169,
	636, 253, 163, 272, 277, 291, 292, 293, 533, 317,
	316, 308, 541, 199, 269, 205, 189, 176, 200, 164,
	271, 491, 402, 616, 358, 420, 197, 194, 273, 246,
	487, 470, 167, 424, 403, 192, 319, 611, 612, 613,
	374, 351, 320, 321, 190, 260, 461, 462, 324, 430,
	342, 404, 440, 411, 405, 226, 227, 328, 473, 475,
	210, 614, 331, 332, 333, 465, 334, 335, 336, 337,
	378, 56, 58, 97, 100, 99, 641, 642, 63, 29,
	364, 367, 399, 406, 344, 617, 545, 341, 345, 346,
	368, 25, 422, 390, 426, 425, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 532, 383, 396, 494,
	45, 47, 393, 27, 370, 421, 443, 340, 423, 454,
	46, 452, 453, 474, 26, 372, 371, 62, 44, 429,
	431, 432, 322, 338, 381, 626, 495, 376, 392, 395,
	377, 343, 366, 397, 67, 66, 389, 627, 384, 382,
	339, 550, 551, 347, 578, 361, 438, 529, 528, 527,
	526, 525, 524, 523, 522, 325, 326, 327, 407, 408,
	409, 419, 412, 413, 414, 415, 416, 417, 418, 457,
	458, 628, 476, 478, 479, 477, 241, 644, 362, 363,
	244, 630, 631, 98, 632, 634, 633, 28, 635, 638,
	-427, -425, -346, 540, 618, 385, 539, 542, 379, 358,
	640, 643, 383, 264, 325, 326, 327, 455, 356, -221,
	-346, 644, -185, 248, 39, -235, -346, -185, -84, -16,
	-15, -177, -178, -235, 243, -355, 24, 437, -93, 438,
	238, 239, 85, 77, -346, -9, -106, -8, -113, -82,
	-175, 442, -353, -346, 325, 325, -353, 243, -348, 274,
	418, -346, -482, 249, -431, -404, 275, -430, -406, -433,
	-407, 32, 234, 236, 235, 552, 271, 16, 383, 245,
	14, 13, 384, 257, 25, 26, 28, 15, 385, 387,
	29, 388, 391, 392, 393, 42, 396, 397, 264, 88,
	96, 91, 282, -220, -346, -381, -373, 117, -376, -368,
	-369, -371, -324, -520, -366, 85, 144, 145, 152, 118,
	646, -370, -463, 36, 120, 558, 562, 598, 505, -316,
	-317, -318, -319, -320, -321, -346, -521, -519, 91, 101,
	103, 107, 108, 106, 104, 156, 188, 105, 92, 157,
	-178, 88, -541, 568, -340, 591, 604, 605, 606, 607,
	590, 61, -490, -499, 242, -497, 155, 193, 260, 189,
	14, 150, 430, 190, 599, 600, 601, 565, 587, 507,
	569, 579, 594, 560, 561, 563, 555, 556, 557, 559,
	570, 572, 586, -500, 582, 592, 593, 578, 602, 603,
	595, 596, 597, 634, 90, 89, 585, 584, 571, 566,
	567, 573, 554, 564, 574, 575, 583, 588, 589, 367,
	110, 368, 369, 497, 359, 80, 370, 249, 437, 70,
	371, 372, 373, 374, 375, 504, 376, 71, 377, 366,
	264, 420, 378, 192, 210, 509, 508, 510, 501, 498,
	496, 499, 500, 502, 503, 576, 577, 581, -129, -130,
	609, -595, -307, -596, 6, 7, 8, 9, -597, 157,
	-586, 439, 548, 91, 318, 356, 17, 497, 637, 538,
	637, 538, 167, 164, -418, 167, 116, 172, 171, -418,
	637, 169, 636, 328, 270, -395, -166, 356, 420, 334,
	97, 274, -398, -396, 536, -484, 322, 318, 294, 244,
	113, -167, 254, 253, 111, 497, 242, 394, 313, 56,
	58, -557, -558, 231, 232, 233, -548, 530, -547, -346,
	637, 369, 99, 100, 636, 27, 243, 380, 270, 475,
	473, 474, 476, 477, 478, 479, -65, -501, -481, 470,
	469, -359, 462, 468, 460, 472, 463, 357, 336, 552,
	335, 234, 630, 537, 531, -334, 404, 440, 494, 495,
	381, 441, 481, 483, 464, 110, 196, 193, 244, 246,
	243, 636, 356, 497, 420, 97, 334, 243, -557, 164,
	481, 483, 439, 274, 418, 41, -424, 430, -423, -425,
	482, 493, 89, 90, 480, -334, 110, 461, 461, -595,
	-307, -176, -178, -116, -546, 538, 637, 244, 356, 420,
	274, 245, 243, 533, 536, 246, 497, 242, 325, 380,
	270, 334, 97, 169, 636, -483, -554, 32, -491, 228,
	229, 230, 33, 34, -1, 124, 645, -373, -373, -6,
	648, -6, -373, -346, -346, 159, -242, -246, -243, -245,
	-244, -248, -247, 193, 194, 155, 197, 203, 199, 200,
	201, 202, 204, 205, 206, 207, 208, 211, 212, 209,
	31, 210, 260, 189, 190, 191, 192, 213, 175, 195,
	545, 221, 176, 222, 177, 223, 178, 224, 179, 180,
	225, 181, 184, 185, 186, 187, 183, 158, -210, 91,
	32, 85, 158, 91, -202, 266, -185, -235, -227, 158,
	646, -202, -595, -195, -196, 11, -235, -322, -346, 439,
	127, -93, 77, -93, 438, 77, -93, 438, 238, -549,
	-550, -551, -553, 238, 438, 437, 239, -111, 158, 282,
	17, -353, -353, 83, -235, -406, 274, -431, -404, 36,
	82, 159, 247, 159, 82, 85, 381, 356, 420, 382,
	497, 243, 394, 246, 274, 395, 356, 420, 243, 246,
	497, 274, 356, 243, 246, 420, 274, 395, 356, 460,
	461, 246, 27, 386, 389, 390, 461, -505, 493, 159,
	116, 113, 114, 115, -373, 134, -388, 127, 128, 129,
	130, 131, 132, 133, 141, 140, 151, 144, 145, 146,
	147, 148, 149, 150, 142, 143, 137, 117, 135, 139,
	136, 119, 154, -178, -373, -381, 61, -371, -371, -371,
	-371, -346, -463, -378, -373, 85, 85, 85, 85, 158,
	104, 91, -373, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, -498, 85, 85, -385, -386,
	85, 85, -366, -322, 85, 91, 91, 85, 85, 85,
	91, 85, 85, 85, -386, -386, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, -196, 159, -195, 85, -195, -196, -179, -178, 32,
	33, 32, 33, 32, 33, 32, 33, -598, 627, 85,
	101, 641, 226, 17, -346, 636, -346, 91, 541, 91,
	541, 486, 547, 170, 171, 172, -393, 249, -393, -393,
	-219, -346, -221, 380, 246, 533, 246, -167, -393, -393,
	-393, -393, -393, 245, -393, 24, 243, 243, 243, 243,
	-393, 504, 127, 127, 59, -559, 174, 159, -548, -201,
	85, 91, -358, 135, 139, -358, -303, 18, -303, 24,
	272, 272, 272, -358, 312, -606, -607, 17, 137, -356,
	-607, -356, -356, -358, -608, 245, 471, 43, 273, 272,
	-197, -198, 22, -197, 465, 461, -448, 466, 467, -360,
	-607, -359, -358, -358, -359, -358, -358, -358, 32, 243,
	246, 497, 334, 631, -606, -606, 31, 31, -482, -482,
	-235, -482, -482, 531, -335, -346, -482, -482, -482, -287,
	-288, -235, -560, 248, -592, -591, 484, -594, 486, 164,
	-425, 164, -425, 88, -406, 274, 274, 159, 127, 24,
	-426, 127, 138, -425, -425, -426, -426, -259, 41, -345,
	155, -346, 91, -259, 41, -589, -588, -235, -196, -179,
	-178, 86, 86, 86, 541, 91, -482, -482, -482, -482,
	-482, -484, -482, -482, -482, -482, -482, -353, -211, -346,
	-221, 249, -482, -482, -482, -482, -180, -181, 146, -373,
	-346, -180, -3, -138, -137, 121, 122, 124, 621, 375,
	620, 624, 618, -425, 41, -476, 402, 401, -470, -472,
	85, -471, 85, -471, -471, -471, -471, -471, 85, 85,
	-473, 85, -473, -473, -470, -474, 85, -474, -475, 85,
	-475, -474, -346, -452, 547, -379, -381, -346, 39, -494,
	61, -175, 85, 31, 85, -202, -346, 190, 169, 635,
	-495, 61, -175, 85, 31, -196, -131, 39, -198, 21,
	158, 101, 91, -111, -93, 77, -111, -93, -93, 86,
	159, -552, 107, 108, -555, 208, 199, -346, -109, 91,
	-7, -8, -9, -10, -47, -82, -79, -175, 235, 539,
	542, -522, -520, 85, 32, 429, 82, 17, -432, 243,
	497, 380, 270, 246, 356, -430, -413, -410, -408, -345,
	-406, -409, -408, -435, -322, 461, -132, 444, 443, 324,
	-373, -373, -373, -373, -373, 106, 117, 351, 107, 108,
	-368, -389, 32, 320, 321, -369, -369, -369, -369, -369,
	-369, -369, -369, -369, -369, -369, -369, -377, -387, -463,
	85, 137, 135, 139, 136, 119, -371, -371, -369, -369,
	-261, -345, 155, 86, 159, -373, -545, -544, 121, -373,
	-373, -373, -373, -346, -542, -543, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 371, 366, 372,
	370, 359, 378, 373, 374, 192, 528, 529, 522, 523,
	524, 525, 526, 527, -379, -379, -373, -542, -379, -315,
	33, 32, -381, -381, -381, 86, -373, -556, 349, 348,
	350, -199, -346, -379, 86, 86, 86, 101, -381, -381,
	-379, -369, -379, -379, -379, -379, -543, -315, -315, -315,
	-315, 146, -381, -381, -315, -315, -315, -315, 146, -315,
	-315, -315, -315, -315, -315, -315, -315, -315, -315, 86,
	86, 86, 146, -381, -197, -130, -503, -502, -373, 41,
	-131, -198, -599, 628, 85, -322, -587, 91, 91, 646,
	169, 636, 17, 497, -346, 17, 243, -580, 32, 541,
	101, 541, 101, 487, 488, 168, 171, 170, 91, 117,
	-346, -346, 35, 85, -211, -393, -393, -393, -564, -346,
	92, -414, -411, -408, -346, -346, -404, -346, -335, -235,
	-393, -393, -393, -393, -235, -270, 53, 54, 55, -408,
	-168, 56, 57, -560, -547, 35, -200, -346, -580, -303,
	-371, -371, -373, -408, 274, -606, -358, -358, -336, -335,
	-360, -355, -360, -360, -303, -356, -358, -358, -373, -360,
	-356, -303, -346, 461, -303, -303, -448, -358, -357, -346,
	-357, -393, -335, -336, -336, -235, -235, -282, -289, -283,
	-290, 266, 240, 364, 365, 237, 235, 11, 236, -297,
	313, -394, 505, -265, -266, 77, 42, -268, 264, 406,
	399, 276, 280, 95, 281, 439, 282, 245, 284, 285,
	286, 301, 303, 256, 287, 288, 289, 430, 290, 163,
	302, 291, 292, 293, 382, -260, 6, 337, 547, 41,
	51, 52, 453, 452, 550, 277, -346, -564, -562, 31,
	-346, 31, -414, -346, -346, 159, 247, -188, -190, -187,
	-183, -184, -189, -306, -308, -186, 85, -235, -178, -346,
	159, 485, 487, 488, -592, -426, -592, -426, 247, 32,
	429, -429, 429, 32, -404, -423, 481, 483, -419, 91,
	430, -409, -428, 82, 155, -502, -426, -426, -428, -428,
	154, 159, -590, 486, 487, 231, -197, 101, -580, -237,
	-235, -564, -413, -404, -346, -482, -237, -237, -237, -348,
	-348, 85, 158, 36, -346, -346, -346, -346, -302, 159,
	-301, 17, -347, -346, 35, 91, 158, -302, -139, -137,
	123, -373, -6, 620, -373, -6, -6, -373, -6, -373,
	-480, 403, 101, 101, -325, 91, -325, 101, 101, 101,
	553, 86, 91, -417, 82, -496, -382, -540, 609, -204,
	86, -199, -538, -539, -199, -203, -346, -494, -227, 127,
	127, 127, -496, -204, 86, -538, -197, 610, -131, -194,
	-193, -373, -346, 24, -111, -93, -550, 158, 356, 159,
	-200, -432, -412, -409, -434, 146, -346, -420, 159, 547,
	649, 89, 247, -577, -576, 421, 86, 159, -506, 248,
	504, 91, 646, 437, 226, 227, 106, 351, 107, 108,
	-463, -381, -377, -371, -371, -369, -369, -375, 261, -375,
	116, -373, 647, -372, -544, 123, -373, 35, 159, 35,
	159, 83, 158, 86, 86, 17, 17, 86, -373, 86,
	86, 86, 86, 17, 17, -373, 86, 158, 86, 86,
	86, 86, 83, 86, 159, 86, 86, 86, 86, 159,
	-381, -381, -373, -381, 86, 86, 86, -373, -373, -373,
	-381, 86, -373, -373, -373, -373, -373, -373, -373, -373,
	-373, -373, -442, 456, -442, -442, 159, 159, 159, 86,
	-131, 85, 101, 159, 642, -329, -328, 91, -346, -346,
	169, 636, -346, 91, 636, -346, 91, 91, 169, 172,
	172, 171, 91, 36, 24, 311, 24, -220, -222, -223,
	-224, -225, -226, 137, 160, 161, 85, -235, -235, -235,
	-566, 407, -578, 159, 41, -576, 497, -164, 324, -397,
	83, -171, 17, 547, -235, -235, -235, -235, -249, 35,
	17, -182, -236, -346, 85, 86, 159, -405, 83, -346,
	-336, -303, -303, -360, -303, -303, 159, 23, -358, -360,
	-360, -227, -356, -227, 158, -227, -335, -469, 35, -201,
	159, 21, 266, -234, -343, -231, -233, 251, -363, -232,
	254, -534, 252, 250, 111, 255, 309, 112, 245, -343,
	-343, 251, -269, 247, 35, -343, -285, 245, 354, 309,
	252, 21, 266, -284, 245, 112, -346, 251, 255, 252,
	250, -342, 127, -334, 154, 247, 43, 382, -342, 551,
	266, -342, -342, -342, -342, -342, -342, -342, 283, 283,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, 164, -342, -342, -342, -342, -342, -342, 85, 329,
	278, 279, 311, -567, 407, 31, 362, 362, 363, -578,
	31, -172, 356, -288, -286, -357, 31, -309, -310, -311,
	-312, -314, -313, 68, 72, 74, 78, 69, 70, 71,
	75, 80, 73, 31, 159, -344, -349, 35, -346, 91,
	-344, -178, -190, -188, -344, 85, -591, -593, 489, 486,
	492, -428, -428, 101, 247, 85, 127, -428, -428, 41,
	-345, -588, 493, 487, -131, 159, 82, -237, -212, -213,
	-214, -215, -242, -322, 194, 197, 199, 200, 201, 202,
	204, 205, 206, 207, 208, 211, 212, 209, 210, 260,
	189, 190, 191, 192, 213, 175, 195, 545, 176, 177,
	178, 179, 180, 181, 184, 185, 186, 187, 183, -346,
	-221, -303, -181, -190, -346, 91, -346, 146, -303, 124,
	-6, 122, -143, -142, -141, 125, 618, 624, 124, 124,
	124, 86, 86, 86, 159, 86, 86, 86, 159, 86,
	159, 101, -509, 466, 40, 159, 85, 86, 159, 61,
	159, 127, 86, 159, -373, -346, 91, -373, 86, 61,
	-131, 91, 159, -191, 37, 38, 158, 439, -346, -520,
	86, -434, 159, 247, 158, 158, -410, 385, -345, -412,
	21, 547, -322, 39, -329, 127, 646, -346, 86, -375,
	-375, 116, -371, -368, 86, 124, -373, 122, -240, -242,
	401, 402, -373, -240, -241, -247, 155, 193, 260, 192,
	191, 189, 401, 402, -259, -346, -373, -373, 86, -373,
	-373, 17, -346, -259, -369, -373, -196, -196, 86, 86,
	-441, -442, -441, -441, 86, 86, 86, 86, -441, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 85,
	101, 103, 101, 103, -502, -600, 63, 626, 62, 429,
	106, 314, 159, 101, 91, 647, 159, 127, 91, -346,
	-346, 17, 243, -346, 17, 91, 172, 91, -579, 318,
	356, -453, 101, 318, 356, 497, 393, 86, 159, -322,
	-212, -201, 85, -201, -569, 468, 409, 419, -342, -365,
	-364, 358, 42, -488, 430, 415, 416, -411, 274, -335,
	-575, 98, 127, 82, 341, 345, 346, 342, 343, 344,
	-391, -392, -390, -394, -562, 85, 85, -175, 35, 135,
	-171, 85, 85, 35, -464, 331, -242, -235, -182, -346,
	17, 159, -561, 158, -1, -346, -404, -358, -303, -373,
	-373, -303, -358, -358, -360, -346, -227, -464, -242, 35,
	-283, 240, 236, -438, 311, 312, -439, -454, 314, -456,
	85, -239, -322, -232, -533, -534, -393, -346, 112, -533,
	112, 85, -239, -322, -322, -286, -322, -346, -346, -346,
	-346, -293, -292, -322, -295, 32, -296, -346, -346, -346,
	-346, 112, -346, 112, -264, 41, 48, 49, 50, -342,
	-342, 196, -267, 41, 429, 431, 432, -295, 101, 101,
	101, 101, 91, 91, 91, -342, -342, 101, 91, -349,
	91, -535, 171, 45, 46, 101, 101, 101, 101, 41,
	91, -272, 41, 294, 298, 295, 296, 297, 91, 101,
	41, 101, 41, 101, 41, -346, 85, -536, -537, 91,
	330, -453, -569, -342, 362, -425, 127, 127, -365, -574,
	324, -174, 497, 32, -205, 240, 236, -562, -416, -415,
	-322, -187, -187, -187, -187, -187, -187, 68, 79, 68,
	68, 68, 73, 68, 73, 68, -311, 68, 79, -416,
	-189, -201, -349, 86, -585, -584, -583, -581, 76, 248,
	77, -379, 486, 490, 491, -412, -361, 91, -419, -209,
	24, -235, -235, -486, 304, 305, 86, 159, -242, -305,
	19, 158, -305, 120, -6, -139, -141, -373, -6, -373,
	620, 375, 621, 91, 101, 101, -517, 450, 445, 447,
	112, -382, -504, -503, 61, -175, -199, -496, -539, -502,
	-346, 647, 647, 647, 647, 61, -175, -496, -209, -509,
	-193, -192, 44, -346, 101, 17, -409, -404, 146, 146,
	-346, 386, -420, 91, 408, 91, 243, 647, 91, -329,
	-368, -373, 86, -250, 180, 179, -250, 35, 86, 86,
	-471, -471, -470, -473, -470, -250, -250, 86, 86, 24,
	86, 86, 86, -373, 86, 86, 159, -492, 506, -493,
	580, -441, -441, -441, -441, -441, -441, -441, -441, -441,
	-441, -441, -441, -441, -441, -441, -441, -384, -383, 266,
	451, 633, 633, 451, 633, 633, 86, 159, -542, 159,
	-337, 319, -337, -328, 91, 247, 91, 169, -346, 91,
	636, 91, -346, 91, 311, -346, -346, 91, 91, -224,
	-242, 86, 35, -228, -229, -230, -239, -231, -233, 35,
	-570, 95, -565, 91, -346, 92, -571, 95, 410, 157,
	360, 41, 411, 412, 427, 355, 101, 101, 417, -563,
	-346, -173, 243, 356, -573, 52, 127, 91, -235, -390,
	-334, 154, 285, 334, -300, -299, -346, 91, -228, -175,
	-235, -228, -228, -175, -465, 333, 21, 101, 145, -202,
	83, 158, -190, -236, -346, 146, 86, -303, -227, -303,
	-303, -358, -465, -175, -450, 315, 85, -448, 85, -448,
	112, 342, -457, -455, 266, -291, 45, 47, -242, -531,
	-346, -529, -531, -346, -529, -529, -393, -373, -291, -239,
	247, 31, 236, -294, 339, 340, 345, -421, 310, 117,
	-421, 159, -191, 159, -346, -259, -259, 31, 91, 91,
	-237, 86, 159, 127, 101, 91, -570, -565, 127, -426,
	91, 91, -571, -575, 127, -238, 243, -335, 159, -205,
	-205, -303, 159, 127, -207, -206, 82, 83, -208, 82,
	-206, -206, 68, 68, -303, -583, -582, 24, -534, -534,
	-534, 86, 86, 15, -214, 41, -304, 20, 21, 146,
	-304, 124, 122, 124, 124, -346, 86, 86, -477, 611,
	-513, -515, 445, 21, 21, 15, 248, 86, -496, -496,
	-517, 45, 46, -404, -420, 430, -235, 159, 647, -240,
	-373, 86, -373, 86, 91, 86, 91, -196, 21, 86,
	159, 86, 86, 86, 159, 86, 86, -373, 86, -542,
	-338, 190, 91, -338, 356, -347, -346, 17, -346, 91,
	-453, 311, 311, 243, 241, -175, 86, 159, -175, 91,
	-568, 421, 91, 91, 101, 41, 101, 157, 413, -489,
	-165, 95, -237, 32, -205, -572, 95, 127, 646, 85,
	-342, -342, -342, -346, 86, 159, -342, -342, 86, 86,
	86, -257, 547, -466, 265, 101, 145, 101, 145, 101,
	-344, -190, -346, -303, -561, 158, -303, -466, -440, 316,
	101, -369, 85, -369, 85, -449, 313, 85, 86, 159,
	-346, -322, -254, -253, -251, 106, 117, 41, 399, -252,
	95, 154, 299, 302, 301, 277, 300, -281, -362, 82,
	405, 339, 340, -394, 611, 535, 250, 111, 112, 387,
	-363, 85, 85, 83, 319, 85, 85, -531, 86, -291,
	-322, 41, -294, 41, 352, 310, -292, -346, 154, -259,
	86, -537, 91, -542, -568, 91, -428, -573, 91, -165,
	-237, -562, -196, -415, -502, -373, 85, -373, 85, 68,
	11, 19, -366, -373, -381, 249, -6, 621, 375, -274,
	612, 91, 21, 91, -511, 91, -416, -477, -134, -271,
	-334, 282, 86, 86, 86, -441, -441, -444, -443, -447,
	451, 311, 459, -381, 91, 91, 86, 86, 91, -346,
	169, 91, 646, 91, -453, -453, -346, -216, -242, -169,
	547, -257, -230, -169, 21, 547, 359, 41, 101, 41,
	414, 91, -173, 127, 107, 108, -330, -331, 91, -399,
	-401, -322, 85, -259, -261, 91, -299, -366, -366, -255,
	-175, 35, -256, -297, -394, 547, -133, -132, -255, 547,
	85, -467, 163, 101, 145, 101, 101, -303, -303, -467,
	-456, 21, 86, -435, 86, -435, 85, 127, -369, -455,
	-458, 61, -251, 106, -369, 91, -261, -262, 41, 298,
	294, 127, 127, -263, 41, 278, 279, -273, 85, 309,
	15, 196, 85, 112, 112, -235, -399, -399, -532, 341,
	342, 343, 347, 345, 346, 344, -532, -399, -399, 85,
	-422, -421, -369, -342, -342, 154, -572, -197, -200, -530,
	-346, 250, 21, 21, -487, 547, -346, -346, -326, 613,
	101, 91, 447, -274, -478, 614, -507, -448, -259, 127,
	86, -446, 119, 413, 417, -367, -370, 101, 103, 188,
	157, 86, 86, -346, -333, -332, 91, 91, 91, 311,
	546, -170, 60, 493, 91, 92, 408, 91, 92, 359,
	-165, 91, 647, 159, 127, 86, 159, -470, -373, -436,
	266, -175, 159, -297, -334, -134, -436, -258, -298, -346,
	91, -485, 171, 332, 547, 101, 145, 101, -196, -468,
	171, 332, -439, 86, 86, 86, -435, 101, 86, -462,
	-459, 85, -297, 268, 137, 91, 91, 101, 85, -497,
	31, 91, -400, 85, 86, 86, 86, 86, -399, 101,
	-259, -342, 86, 86, 159, 638, 85, 21, -326, -479,
	615, 91, -516, 450, -510, -508, 445, 446, 447, 448,
	91, -445, -446, 417, -367, -370, 609, 457, 457, 457,
	647, 159, 127, -453, -218, -346, 309, 430, -331, 91,
	-402, -401, -191, 86, -437, 318, 21, -297, -342, -437,
	86, 159, -342, -342, 332, 101, 145, 101, -197, 332,
	-451, 317, 86, -462, -297, -461, -460, 316, 269, 85,
	86, -373, -385, -342, 86, -276, -275, 543, -399, -402,
	83, -402, 83, -402, 83, -402, 83, 86, -259, -346,
	250, -327, -346, -511, 91, -518, 248, -514, -515, 449,
	-508, 21, 447, 21, 21, -135, 159, 116, 458, 458,
	458, -332, 91, 91, -217, 35, 452, 386, -403, 256,
	352, 353, 95, 547, 339, 340, -191, 21, -438, -259,
	-298, -366, -366, 101, 101, 86, 159, -346, 265, 85,
	-380, -374, -373, 265, 86, -346, -280, -278, -279, 82,
	464, 307, 308, 86, -532, -532, -532, -532, -281, 86,
	159, -525, 85, 101, -513, -512, -514, 21, -511, 21,
	-511, -511, 454, -445, 91, -342, -342, 91, 91, 338,
	-322, 85, -450, -460, -459, -380, 86, 159, -421, -279,
	82, -278, 82, 16, 15, -402, -402, -402, -402, -346,
	-528, 31, 86, -524, -523, -323, -519, -346, 450, 451,
	91, -511, 127, -603, -602, 632, 101, 101, -346, -435,
	-440, 86, -374, -277, 304, 305, 31, 171, -277, -527,
	-526, -324, 86, 159, 158, 91, 91, 86, -456, 106,
	41, 306, 159, 127, -523, -346, -526, 41, -373, 158,
	-346,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 0, 0,
	0, 0, 0, 691, 692, 0, 655, 0, 0, 0,
	0, 0, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 515, 0,
	0, 0, 0, 774, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, -2, 704, 0,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 398, 399, 400,
	394, 395, 397, 396, -2, 0, 0, 704, 0, 0,
	0, 782, 0, 0, 0, 825, 847, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1366, 1367,
	1368, 1369, 2153, 2123, -2, 1893, 1870, 2047, 2048, 1948,
	1959, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
	2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
	2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
	2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223,
	2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
	2234, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, -2, 2081, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, -2, -2, -2, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2154,
	2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
	2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174,
	0, 307, 305, 1840, 1870, 1893, 1948, 1959, 1960, 1995,
	2047, 2048, 2080, 2123, 2139, 2140, 2141, 2153, 0, 0,
	968, 0, 752, 0, 0, 757, 1315, 752, 335, 693,
	694, 782, 808, 653, 0, 372, 0, 1884, 376, 2130,
	0, 0, 0, 0, 650, 366, 367, 368, 369, 370,
	371, 0, 0, 941, 0, 0, 362, 0, 329, 1950,
	2152, 1370, 0, 0, 0, 0, 0, 196, 1092, 198,
	1094, 202, 210, 0, 0, 0, 215, 216, 219, 220,
	221, 222, 223, 0, 227, 0, 229, 232, 0, 234,
	235, 0, 238, 239, 240, 0, 250, 251, 252, 1095,
	1096, 1097, -2, 125, 966, 1798, 1684, 0, 1691, 1704,
	1715, 1447, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	0, 1458, 1459, 0, 1487, 2189, 2230, 2231, 0, 1467,
	1468, 1469, 1470, 1471, 1472, 136, 148, 149, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 0, 1745, 1746, 1747, 1655,
	1434, 1366, 0, 2198, 0, 2220, 2225, 2226, 2227, 2228,
	2219, 0, 0, 1639, 0, 1629, 0, 0, -2, -2,
	0, 0, 2020, -2, 2232, 2233, 2234, 2195, 2216, 2224,
	2199, 2200, 2223, 2191, 2192, 2193, 2186, 2187, 2188, 2190,
	2202, 2204, 2215, 0, 2211, 2221, 2222, 2128, 0, 0,
	0, 0, 0, 2170, 150, 151, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1650, -2, 1652, -2, 1654, -2, 1657,
	-2, -2, -2, -2, 1662, 1663, -2, 1665, -2, -2,
	-2, -2, -2, -2, -2, 1641, 1642, 1643, 1644, 1633,
	1634, 1635, 1636, 1637, 1638, -2, -2, -2, 808, 891,
	0, 808, 0, 783, 830, 833, 836, 839, 786, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 325, 313, 315, 0, 319, 0, 312,
	1128, 1128, 1128, 0, 0, 0, 0, 1128, 1128, 1128,
	1128, 1128, 0, 1128, 0, 0, 0, 0, 0, 1128,
	0, 1001, 1099, 1100, 1101, 1126, 1127, 1200, 0, 0,
	0, 709, 705, 706, 707, 708, 796, 0, 798, 801,
	0, 630, 630, 858, 858, 576, 0, 0, 0, 630,
	0, 590, 582, 0, 0, 0, 630, 0, 0, 803,
	803, 0, 633, 640, 630, 630, -2, 630, 630, 627,
	630, 0, 0, 1140, 596, 597, 598, 582, 582, 601,
	602, 603, 613, 614, 641, 1822, 0, 0, 515, 515,
	0, 515, 515, 0, 515, 515, 515, 0, 711, 1990,
	1891, 1965, 1850, 1950, 2152, 0, 280, 2020, 285, 0,
	1892, 1911, 0, 0, 1929, 0, -2, 0, 351, 808,
	0, 0, 782, 0, 0, 0, 0, 515, 515, 515,
	515, 515, 1199, 515, 515, 515, 515, 515, 0, 0,
	0, 515, 515, 515, 515, 0, 0, 848, 849, 844,
	845, 846, 850, 851, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 104, 103, 0, 1799, 1817, 1750, 1751,
	1752, 1804, 1754, 1808, 1808, 1808, 1808, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1808, 1808, 0,
	0, 1797, 1774, 1806, 1806, 1806, 1804, 1801, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1811, 1811, 1814, 1814, 1811, 0, 412, 410,
	411, 1680, 0, 0, 0, 0, 752, 756, 1313, 0,
	0, 0, 808, -2, 0, 0, 654, 373, 1371, 0,
	0, 377, 0, 378, 0, 0, 380, 0, 0, 0,
	401, 0, 404, 388, 389, 390, 391, 384, 0, 176,
	0, 364, 365, 0, 0, 331, 0, 0, 0, 516,
	0, 0, 0, 0, 0, 0, 207, 203, 211, 214,
	224, 231, 0, 243, 245, 248, 204, 212, 217, 218,
	225, 246, 205, 208, 209, 213, 247, 249, 206, 226,
	230, 244, 228, 233, 236, 237, 242, 0, 177, 0,
	0, 0, 0, 0, 1690, 0, 0, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1684, 0, 0, 1453, 1454, 1455,
	1456, 0, 1460, 0, 1488, 0, 0, 0, 0, 0,
	1744, 1748, 0, 1680, 1680, 0, 1680, 1676, 0, 0,
	0, 0, 0, 0, 1680, 1612, 0, 0, 1614, 1630,
	0, 0, 1616, 1617, 0, 1620, 1621, 1680, 0, 1680,
	1625, 1680, 1680, 1680, 1608, 1609, 0, 1676, 1676, 1676,
	1676, 0, 0, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
	1676, 1676, 1676, 1676, 1676, 1676, 1676, 0, 0, 0,
	0, 803, 0, 809, 0, -2, 0, 827, 829, 831,
	832, 834, 835, 837, 838, 840, 841, 788, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 322, 0, 0, 0, 0,
	0, 965, 0, 0, 1128, 1128, 1128, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 1128, 1128, 1128, 1128,
	0, 1146, 0, 0, 0, 711, 710, 0, 797, 0,
	0, 0, 858, 0, 0, 573, 574, 0, 575, 0,
	582, 630, 630, 588, 589, 584, 583, 636, 637, 633,
	0, 633, 633, 858, 0, 607, 608, 609, 630, 630,
	615, 804, 0, 616, 617, 633, 0, 638, 639, 858,
	0, 0, 858, 858, 0, 625, 626, 628, 630, 0,
	0, 1128, 0, 646, 584, 584, 1823, 1824, 0, 0,
	1137, 0, 0, 0, 0, 649, 0, 0, 0, 428,
	429, 0, 0, 712, 259, 263, 0, 266, 0, 1990,
	0, 1990, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 294, 297, 1307,
	1308, 1089, 1090, 298, 299, 343, 344, 0, 803, 826,
	828, 822, 823, 824, 0, 0, 0, 0, 0, 0,
	0, 515, 0, 0, 0, 0, 0, 687, 0, 981,
	689, 0, 0, 0, 0, 0, 866, 860, 862, 936,
	136, 866, 8, 121, 118, 0, 19, 0, 0, 19,
	19, 0, 19, 308, 0, 1820, 1818, 1819, 1753, 1805,
	0, 1779, 0, 1780, 1781, 1782, 1793, 1794, 0, 0,
	1775, 0, 1776, 1777, 1778, 1769, 0, 1770, 1771, 0,
	1772, 1773, 306, 409, 0, 0, 1681, 969, 0, 730,
	744, 725, 0, 733, 0, 0, 1315, 0, 0, 0,
	713, 744, 715, 0, 733, 803, 780, 0, 758, 0,
	0, 374, 0, 385, 379, 0, 386, 381, 382, 0,
	0, 403, 405, 406, 407, 392, 393, 651, 360, 361,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 0,
	0, 363, 146, 0, 332, 333, 0, 0, 0, 190,
	191, 192, 193, 194, 195, 197, 181, 676, 678, 1081,
	1093, 0, 1084, 0, 200, 241, 173, 0, 0, 0,
	1685, 1686, 1687, 1688, 1689, 1694, 0, 1696, 1698, 1700,
	1702, 0, 1720, -2, -2, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1705, 1718, 1719,
	0, 0, 0, 0, 0, 0, 1716, 1716, 1711, 0,
	1473, 1309, 1310, 1451, 0, 0, 1485, 1489, 0, 0,
	0, 0, 0, 137, 1675, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 0, 0, 1684, 0, 0, 0,
	1677, 1678, 0, 0, 0, 1567, 0, 0, 1573, 1574,
	1575, 0, 739, 0, 1640, 1613, 1631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 892, 0, 748, 750, 751,
	777, 758, 784, 0, 0, 0, 96, 101, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 71, 73, 0,
	1141, 0, 1143, 326, 327, 0, 0, 321, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 1017,
	1018, 513, 1075, 0, 0, 0, 1091, 1116, 1124, 0,
	0, 0, 0, 0, 1173, 1003, 1008, 1009, 1010, 1004,
	1005, 1011, 1012, 0, 799, 0, 0, 905, 70, 572,
	631, 632, 859, 579, 1950, 584, 858, 858, 591, 585,
	592, 635, 593, 594, 595, 633, 858, 858, 805, 630,
	633, 618, 634, 633, 1315, 622, 0, 629, 1315, 647,
	1315, 0, 645, 599, 600, 1175, 801, 426, 427, 432,
	434, 0, 483, 483, 483, 466, 483, 0, 0, 454,
	1825, 0, 0, 0, 0, 463, 1825, 0, 0, 1825,
	1825, 1825, 1825, 1825, 1825, 1825, 0, 0, 1825, 1825,
	1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 0,
	1825, 1825, 1825, 1825, 1825, 1292, 1825, 0, 482, 1138,
	473, 474, 475, 476, 481, 0, 0, 510, 0, 0,
	1016, 0, 513, 0, 1058, 0, 0, 871, 0, 872,
	873, 874, 869, 907, 931, 931, 0, 931, 911, 1315,
	0, 0, 271, 272, 260, 0, 261, 0, 0, 274,
	275, 0, 277, 278, 279, 286, 1891, 1965, 281, 283,
	0, 0, 287, 300, 301, 302, 0, 0, 292, 293,
	0, 0, 346, 347, 349, 0, 758, 1142, 72, 673,
	1311, 674, 675, 679, 0, 0, 682, 683, 684, 685,
	686, 983, 0, 0, 1067, 1068, 1069, 1070, 858, 0,
	867, 0, 863, 937, 0, 939, 0, 858, 0, 119,
	19, 0, 112, 109, 0, 0, 0, 0, 0, 1800,
	1749, 1821, 0, 0, 0, 1802, 0, 0, 0, 0,
	0, 102, 760, 720, 0, 724, 741, 0, 745, 0,
	0, 737, 729, 734, 0, 0, 754, 721, 1314, 0,
	0, 0, 714, 0, 0, 719, 758, 0, 781, 810,
	811, 814, 1372, 0, 387, 383, 402, 0, 515, 0,
	0, 0, 184, 1078, 0, 185, 189, 179, 0, 0,
	0, 1083, 0, 1080, 1085, 0, 199, 0, 0, 174,
	175, 1158, 1167, 0, 0, 0, 1695, 1697, 1699, 1701,
	1703, 0, 1706, 1716, 1716, 1712, 0, 1707, 0, 1709,
	0, 1685, 1457, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 1557, 1558, 0, 0, 1562, 0, 1564,
	1565, 1566, 1568, 0, 0, 0, 1572, 0, 1611, 1632,
	1615, 1618, 0, 1622, 0, 1624, 1626, 1627, 1628, 0,
	808, 808, 0, 0, 1529, 1529, 1529, 0, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 1475, 1476, 0, 0, 0, 893,
	778, 0, 0, 0, 0, 0, 1165, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 74, 75, 328, 316,
	318, 0, 0, 1129, 0, 0, 0, 0, 0, 971,
	972, 974, 0, 977, 978, 979, 983, 801, 0, 801,
	1028, 1825, 517, 0, 0, 1077, 0, 1047, 0, 0,
	0, -2, 0, 0, 1124, 0, 0, 0, 1177, 0,
	0, 0, 698, 702, 23, 802, 0, 577, 0, 578,
	630, 586, 587, 858, 610, 611, 0, 0, 858, 630,
	630, 621, 633, 642, 0, 643, 1315, 1177, 0, 0,
	1137, 1243, 1211, 444, 0, 1327, 1328, 484, 0, 1334,
	1343, 1128, 1404, 0, 1343, 0, 0, 1345, 1346, 0,
	0, 0, 0, 467, 468, 0, 453, 0, 0, 0,
	0, 0, 0, 452, 0, 0, 494, 0, 0, 0,
	0, 0, 1826, 1825, 1825, 0, 461, 462, 0, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 1825, 1825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1028, 1825, 0, 0, 0, 0, 517,
	1045, 1063, 0, 430, 431, 491, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 0, 0, 801, 932, 0, 934, 935,
	909, -2, 0, 871, 914, 1680, 264, 265, 0, 0,
	270, 288, 290, 262, 0, 0, 0, 289, 291, 295,
	296, 345, 348, 350, 820, 0, 0, 1201, 0, 984,
	985, 987, 988, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1875, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 982,
	690, 854, 861, 868, 938, 940, 137, 864, 854, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1810, 1809, 1795, 0, 1796, 1807, 1812, 0, 1815,
	0, 413, 764, 0, 0, 744, 746, 0, 0, 744,
	0, 0, 753, 0, 0, 0, 0, 0, 0, 744,
	820, 760, 0, 817, 815, 816, 0, 0, 652, 147,
	408, 0, 0, 0, 0, 0, 677, 0, 1082, 181,
	0, 0, 201, 0, 0, 0, 1167, 1162, 1679, 1708,
	1710, 0, 1717, 1713, 1452, 1461, 1486, 0, 0, 1492,
	1504, 1504, 0, 0, 0, 1495, 1808, 1808, 1498, 1804,
	1806, 1804, 1504, 1504, 0, 138, 0, 0, 1563, 0,
	0, 0, 740, 0, 0, 0, 1525, 1527, 1529, 1529,
	1536, 1530, 1537, 1538, 1529, 1529, 1529, 1529, 1543, 1529,
	1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1523,
	0, 0, 1738, 1739, 749, 0, 0, 791, 792, 793,
	794, 795, 0, 0, 61, 61, 1167, 0, 95, 87,
	0, 0, 0, 0, 0, 76, 320, 0, 77, 78,
	0, 0, 85, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 1320, 0, 1032, 1029, 1030, 1031, 0, 1072,
	518, 519, 520, 521, 0, 0, 0, 1076, 0, 0,
	1040, 0, 0, 0, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, -2, 1132, 0, 0, 0, 1320, 1151, 0, 0,
	1156, 1320, 1320, 0, 1185, 0, 1174, 752, 0, -2,
	0, 0, 700, 0, 0, 906, 580, 858, 604, 806,
	807, 1315, 858, 858, 630, 648, 644, 1185, 1176, 0,
	433, 483, 0, 1231, 0, 0, 1237, 0, 1244, 437,
	0, 485, 0, 1333, 1360, 1344, 1360, 1405, 1360, 1360,
	1128, 0, 485, 0, 0, 455, 0, 0, 0, 0,
	0, 451, 488, 814, 438, 440, 441, 442, 492, 493,
	495, 0, 497, 498, 457, 469, 470, 471, 472, 0,
	0, 0, 464, 477, 478, 479, 480, 439, 1260, 1261,
	1262, 1265, 1266, 1267, 1268, 0, 0, 1271, 1272, 1273,
	1274, 1275, 1357, 1358, 1359, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1301, 1302, 1303, 1304, 1305, 1306, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 0, 0, 1296, 0,
	0, 0, 1032, 0, 0, 0, 0, 0, 1072, 1047,
	0, 1065, 0, 1059, 1060, 0, 0, 722, 858, 338,
	0, 901, 894, 0, 878, 0, 880, 898, 881, 899,
	900, 885, 0, 887, 0, 883, 884, 889, 882, 858,
	870, 908, 933, 910, 913, 915, 916, 922, 0, 0,
	0, 0, 267, 268, 269, 276, 0, 537, 282, 776,
	0, 1312, 680, 681, 1202, 1203, 688, 0, 989, 852,
	0, 0, 852, 117, 120, 0, 115, 0, 0, 0,
	0, 107, 105, 1803, 0, 0, 766, 161, 0, 0,
	0, 742, 0, 747, 744, 728, 738, 727, 735, 736,
	755, 1316, 1317, 1318, 1319, 744, 718, 717, 779, 764,
	812, 813, 0, 1373, 375, 0, 1079, 181, 186, 187,
	188, 182, 180, 1086, 0, 1088, 0, 1160, 0, 0,
	1714, 1491, 1462, 1493, 1505, 1506, 1494, 0, 1464, 1465,
	1496, 1497, 1499, 1500, 1501, 1502, 1503, 1466, 1559, 0,
	1561, 1569, 1570, 0, 1619, 1623, 0, 0, 0, 0,
	0, 1534, 1535, 1539, 1540, 1541, 1542, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 808, 1524, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	63, 0, 63, 1166, 1168, 0, 936, 0, 0, 92,
	0, 0, 79, 80, 0, 0, 0, 964, 967, 973,
	975, 0, 0, 0, 1321, 1322, 1324, 1325, 1326, 0,
	1000, 0, 0, 1020, 1021, 1022, 1034, 0, 0, 0,
	523, 524, 0, 0, 0, 536, 532, 533, 534, 514,
	1071, 1054, 0, 0, 1043, 0, 0, 1053, 0, 1133,
	1825, 1825, 1825, 0, 0, 1245, 1825, 1825, 0, 1153,
	1155, 0, 0, 1249, 1188, 0, 0, 1179, 0, 931,
	0, 0, 858, 699, 702, 703, 800, 581, 619, 623,
	620, 858, 1188, 425, 1209, 0, 0, 0, 0, 0,
	1241, 0, 0, 1213, 0, 456, 486, 0, -2, 0,
	1361, 0, 1347, 1361, 0, 0, 1360, 0, 445, 485,
	0, 0, 0, 499, 503, 504, 0, 501, 1400, 0,
	502, 0, 490, 0, 496, 1263, 1264, 0, 1269, 1270,
	0, 1294, 0, 0, 0, 436, 505, 0, 0, 0,
	506, 507, 512, 1040, 0, 1054, 0, 1064, 0, 1061,
	1062, 808, 0, 0, 875, 902, 0, 0, 876, 0,
	877, 879, 886, 888, 337, 917, 0, 0, 919, 920,
	921, 912, 284, 821, 986, 0, 842, 0, 0, 865,
	843, 0, 19, 0, 0, 110, 1813, 1816, 768, 0,
	765, 162, 0, 0, 0, 0, 732, 743, 726, 716,
	766, 818, 819, 183, 178, 1087, 1170, 0, 1161, 0,
	0, 1571, 0, 1529, 1526, 1529, 1528, 1520, 0, 1477,
	0, 1479, 1480, 1481, 0, 1483, 1484, 0, 787, 0,
	59, 0, 62, 60, 0, 94, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 1249, 0, 1006, 1033,
	1019, 0, 1073, 1074, 0, 525, 526, 0, 529, 535,
	1035, 0, 0, 1037, 1038, 1039, 0, 0, 1051, 0,
	0, 0, 0, 1125, 1139, 0, 0, 0, -2, 0,
	-2, 1150, 0, 1194, 0, 1186, 0, 1178, 0, 1181,
	858, 858, -2, 696, 701, 0, 624, 1194, 1211, 0,
	1232, 0, 0, 0, 0, 0, 0, 0, 1212, 0,
	1225, 487, 1362, -2, 1376, 1378, 0, 1138, 1381, 1382,
	0, 0, 0, 0, 0, 0, 1426, 1390, 0, 0,
	1394, 1395, 1396, 0, 0, 1399, 0, 1732, 1733, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 1341, 446,
	447, 0, 449, 450, 1825, 1401, 489, 443, 1825, 459,
	1293, 1297, 1298, 1295, 511, 508, 509, 1043, 1046, 1057,
	1066, 723, 803, 339, 340, 903, 0, 895, 926, 923,
	0, 0, 990, 853, 856, 111, 116, 0, 0, 770,
	0, 767, 0, 761, 763, 172, 731, 768, 132, 164,
	0, 0, 1463, 1560, 1610, 1532, 1533, 0, 1521, 0,
	1515, 1516, 1517, 1522, 0, 0, 790, 785, 64, 90,
	0, 93, 68, 81, 0, 0, 0, 0, 992, 999,
	1013, 1144, 1323, 998, 0, 0, 522, 527, 0, 530,
	531, 1055, 1054, 0, 1041, 1042, 0, 1049, 0, 0,
	1112, 1804, 0, 1134, 1135, 1136, 1246, 1247, 1248, 1204,
	1152, 0, -2, 1257, 0, 0, 1148, 1170, 1204, 0,
	0, 1182, 0, 1189, 0, 1187, 1180, 808, 697, 1191,
	435, 1243, 1233, 0, 1235, 0, 0, 0, 0, 1214,
	-2, 0, 1377, 1379, 1380, 1383, 1384, 1385, 1431, 1432,
	1433, 0, 0, 1388, 1428, 1429, 1430, 1389, 0, 0,
	0, 0, 0, 1730, 1731, 1424, 0, 0, 1348, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1349, 0, 0, 0,
	1340, 1342, 448, 0, 0, 1825, 1056, 336, 0, 0,
	927, 929, 924, 925, 855, 0, 106, 108, 123, 0,
	769, 163, 0, 770, 134, 0, 155, 0, 1171, 0,
	1531, 1518, 0, 0, 0, 0, 0, 1734, 1735, 1736,
	0, 1478, 1482, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 1014, 1015, 1023, 1024, 0, 1026, 1027, 528,
	1036, 1044, 1048, 1051, 0, 1103, 0, 814, 0, 1206,
	0, 1154, 1137, 1259, 1825, 1157, 1206, 0, 1251, 1825,
	1825, 1172, 0, 1184, 0, 1196, 0, 1190, 803, 424,
	0, 1193, 1229, 1234, 1236, 1238, 0, 1242, 1240, 1215,
	-2, 0, 1223, 0, 0, 1386, 1387, 0, 0, 1629,
	1825, 0, 1419, 0, 1103, 1103, 1103, 1103, 0, 500,
	458, 0, 904, 918, 0, 857, 0, 0, 759, 124,
	0, 133, 152, 0, 165, 166, 0, 0, 0, 0,
	1163, 0, 1507, 0, 0, 0, 1511, 1512, 1513, 1514,
	65, 68, 0, 0, 0, 991, 0, 1025, 1050, 1052,
	1102, 1113, 1114, 814, 1147, 0, 1243, 1258, 0, 1149,
	1250, 0, 0, 0, 1183, 1195, 0, 1198, 695, 1192,
	1210, 0, 1239, 1216, 1224, 0, 1219, 0, 0, 0,
	1427, 0, 1393, 0, 1398, 1407, 1420, 0, 0, 1329,
	0, 1331, 0, 1335, 0, 1337, 0, 0, 460, 928,
	930, 0, 772, 762, 135, 139, 0, 161, 158, 0,
	167, 0, 0, 0, 0, 1159, 0, 0, 1508, 1509,
	1510, 67, 69, 84, 0, 993, 994, 1007, 1104, 1825,
	1825, 0, 0, 0, 1110, 1111, 1115, 0, 1231, 1263,
	1252, 1253, 1254, 1197, 1230, 1218, 0, -2, 1226, 0,
	0, 1682, 1692, 1693, 1391, 1397, 1406, 1408, 1409, 0,
	1421, 1422, 1423, 1425, 1103, 1103, 1103, 1103, 1339, 771,
	0, 126, 0, 0, 156, 157, 159, 0, 168, 0,
	170, 171, 0, 1519, 995, 0, 0, 1107, 1108, 0,
	1207, 0, 1209, 1220, -2, 0, 1228, 0, 1392, 1410,
	0, 1411, 0, 0, 0, 1330, 1332, 1336, 1338, 773,
	1169, 0, 140, 0, 142, 144, 145, 1363, 153, 154,
	160, 169, 0, 980, 996, 0, 1105, 1106, 1109, 0,
	1211, 1227, 1683, 1412, 1414, 1415, 0, 0, 1413, 127,
	128, 0, 141, 0, 0, 1164, 997, 1208, 1205, 1416,
	1418, 1417, 0, 0, 143, 1364, 129, 130, 131, 0,
	1365,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 648, 645,
	128, 127, 129, 3, 649, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 646, 140, 647, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:847
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:884
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:932
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:978
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:988
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1002
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1006
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1010
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1030
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1089
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1099
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1153
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1167
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1175
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1183
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1269
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1289
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1295
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1310
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1325
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1359
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1377
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1387
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1417
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1423
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1433
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1442
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1452
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1456
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1462
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1481
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1527
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1537
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1543
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1562
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1578
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1592
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1596
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1601
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1616
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1631
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1642
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1646
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1652
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1656
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1662
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1666
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1672
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1696
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1715
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1719
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1741
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1751
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1763
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1770
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1779
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1807
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1811
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1825
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1864
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1893
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1897
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1906
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1949
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1953
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2001
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2009
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2019
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2056
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2060
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2066
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2082
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2086
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2347
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2351
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2372
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2376
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2380
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2394
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2453
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2484
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2490
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2494
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2542
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2565
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2595
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2641
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2647
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2657
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2661
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2667
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2671
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2688
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2713
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2717
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2721
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2725
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2735
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2739
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2827
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2845
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2856
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2860
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2882
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2886
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2892
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2898
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2910
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2935
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2961
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2972
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3006
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3032
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3042
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3052
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3068
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3072
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3088
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3128
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3132
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3138
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3144
		{
			yyVAL.str = yyDollar[1].str
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3149
		{
			yyVAL.str = "true"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3150
		{
			yyVAL.str = "false"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3156
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3162
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3171
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3178
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3186
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3190
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3215
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3238
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3248
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3264
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3272
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3276
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3282
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3293
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3297
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3307
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3331
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3341
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3351
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3367
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3385
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3389
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3395
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3399
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3405
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3411
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3419
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3429
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3437
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3447
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3457
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3467
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3490
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3497
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3507
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3511
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3515
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3523
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3531
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3536
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3567
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3571
		{
			yyVAL.str = string("COLUMN")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3576
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3582
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3588
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3596
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3600
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3606
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3639
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3645
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3652
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3659
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3667
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3673
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3685
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3691
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3699
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3703
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3710
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3728
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3758
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3773
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3792
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3803
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3816
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3820
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3828
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3832
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3841
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3865
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3869
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3880
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3884
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3888
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3895
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3899
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3906
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3910
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3914
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3918
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3925
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3932
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3938
		{
			yyVAL.item = nil
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3943
		{
			yyVAL.item = nil
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4005
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4025
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4029
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4040
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4044
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4055
		{
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4059
		{
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4064
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4161
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4180
		{
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4182
		{
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4210
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4214
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4218
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4242
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4251
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4314
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4320
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4337
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4342
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4350
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4355
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4359
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4365
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4380
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4384
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4390
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4405
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4419
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4425
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4430
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4438
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4444
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4449
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4455
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4461
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4465
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4509
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4517
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4521
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4527
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4540
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4548
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4557
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4563
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4571
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4579
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4607
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4615
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4621
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4636
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4643
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4659
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4672
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4683
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4687
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4693
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4699
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4708
		{
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4710
		{
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4713
		{
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4722
		{
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4726
		{
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4731
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4740
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4747
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4753
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4761
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4768
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4775
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4795
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4803
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4813
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4817
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4823
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4830
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4836
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4844
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4851
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4858
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4877
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4881
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4885
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4894
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4898
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4913
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4917
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4923
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4927
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4933
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4937
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4943
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4948
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4952
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4959
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4963
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4970
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4979
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4985
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4989
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4995
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4999
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5004
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5008
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5021
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5032
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5043
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5065
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5088
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5096
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5105
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5109
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5122
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5126
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5131
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5135
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5142
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5147
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5154
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5164
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5168
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5189
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5195
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5205
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5224
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5242
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5248
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5257
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5279
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5295
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5299
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5305
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5317
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5326
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5332
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5349
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5355
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5361
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5365
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5384
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5397
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5402
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5406
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5414
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5418
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5422
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5436
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5440
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5450
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5460
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5515
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5531
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5547
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5555
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5563
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5571
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5581
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5592
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5606
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5610
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5614
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5623
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5627
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5640
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5649
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5661
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5670
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5676
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5680
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5686
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5690
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5694
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5703
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5711
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5717
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5725
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5745
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5749
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5755
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5764
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5773
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5782
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5790
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5801
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5811
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5815
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5821
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5825
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5835
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5839
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5843
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5847
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5853
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5859
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5869
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5873
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5879
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5885
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5889
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5895
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5901
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5905
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5909
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5913
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5919
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5923
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5929
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5933
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5939
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5943
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5949
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5953
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5963
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5976
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5982
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5988
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6002
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6020
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6024
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6030
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6040
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6044
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6048
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6053
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6057
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6061
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6065
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6074
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6078
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6082
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6086
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = ""
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6095
		{
			yyVAL.str = yyDollar[1].str
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6099
		{
			yyVAL.str = yyDollar[2].str
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6105
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6109
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6114
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6118
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6122
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6126
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6130
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6136
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 964:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6178
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6191
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6197
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 967:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6203
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6216
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6221
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6228
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6235
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6239
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6251
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6256
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6264
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6268
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6275
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6308
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6313
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6327
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6331
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6337
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6347
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6357
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6363
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6369
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6373
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6379
		{
			yyVAL.str = ""
		}
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6386
		{
			yyVAL.str = yyDollar[2].str
		}
	case 998:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6392
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6407
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6424
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6441
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6445
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6451
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6455
		{
			yyVAL.str = "DEFINER = "
		}
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6459
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6464
		{
			yyVAL.str = ""
		}
	case 1007:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6468
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6482
		{
			yyVAL.str = ""
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6490
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6496
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6501
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6507
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6520
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6525
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6530
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6536
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6543
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6550
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6557
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6564
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6572
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6578
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6585
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6592
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6600
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6606
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6615
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6632
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6648
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6667
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6673
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6682
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6700
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6706
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6713
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6721
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6727
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6735
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6741
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6749
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6755
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6764
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6768
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6773
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6777
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6784
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6789
		{
			yyVAL.str = ""
		}
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6793
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1056:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6799
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6812
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6823
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6827
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6833
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6839
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6845
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6852
		{
			yyVAL.str = ""
		}
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6856
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6865
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6871
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6879
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6887
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6895
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6903
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6908
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6920
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6931
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7040
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7044
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7050
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7063
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7067
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7073
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7086
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7090
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7094
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7103
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7109
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7116
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7122
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7131
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1091:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7138
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7149
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7153
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7159
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7168
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7172
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7176
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7181
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7185
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7189
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7193
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7199
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7234
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7260
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7266
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7278
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7284
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7290
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7296
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7302
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7310
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7314
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7320
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7334
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7348
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7352
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7356
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7360
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7364
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7368
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7372
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7378
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7393
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7397
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7408
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7412
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7421
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7427
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7431
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7437
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7446
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7455
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7461
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7465
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7471
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7482
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7488
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7506
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7524
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7542
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7562
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7571
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7583
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7592
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7604
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7614
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7624
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7635
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7645
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7656
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7664
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7675
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7682
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7692
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7705
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7713
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7722
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7731
		{
			yyVAL.str = ""
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7735
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7741
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7745
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7750
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7754
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7761
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7773
		{
			yyVAL.str = ""
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7777
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1172:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7783
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7804
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7818
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7826
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7836
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7843
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7850
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7857
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7864
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7876
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7880
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7887
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7894
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7898
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7905
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7912
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7916
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7922
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7928
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7932
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7939
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7946
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7953
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7960
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7964
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7969
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7973
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7977
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7986
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8003
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8011
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8023
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8035
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8039
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8045
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8049
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8055
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8068
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8082
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8086
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8092
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8096
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8102
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8111
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8122
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8126
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8131
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8135
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8141
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8146
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8154
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8158
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8168
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8172
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8183
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8191
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8199
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8207
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8218
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8227
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8237
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8247
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8251
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8256
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8260
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8266
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8270
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8276
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8285
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8295
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8299
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8309
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8315
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8324
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8338
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8344
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8348
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8352
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8362
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8366
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8370
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8374
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8378
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8382
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8387
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8391
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8395
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8403
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8407
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8411
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8415
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8419
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8423
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8427
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8431
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8435
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8441
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8447
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8455
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8463
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8469
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8475
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8481
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8487
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8493
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8499
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8503
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8507
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8511
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8516
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8527
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8531
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8537
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8548
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8552
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8558
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8562
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8566
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8570
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8592
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8596
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8605
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8611
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8619
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8623
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8630
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8639
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8647
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8655
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8662
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8666
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8672
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8676
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8680
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8686
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8690
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8696
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8709
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8722
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8761
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8801
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8815
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8821
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8834
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8847
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8860
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8873
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8888
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8898
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8904
		{
			yyVAL.str = ""
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8908
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8918
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8924
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8930
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8951
		{
			yyVAL.str = ""
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8955
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8967
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8971
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8976
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8984
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8988
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8992
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9002
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9008
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9012
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9017
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9024
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9028
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9034
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9038
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9060
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9064
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9069
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9073
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9081
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9085
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9089
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9093
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9097
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9101
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9105
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9119
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9123
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9127
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9131
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9135
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9139
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9145
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9149
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9154
		{
			yyVAL.str = ""
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9158
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9164
		{
			yyVAL.str = ""
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9168
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9174
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9191
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9198
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9205
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9212
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9219
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9228
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9234
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9240
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9244
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9248
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9252
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9256
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9261
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9268
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9272
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9276
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9285
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9290
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9294
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9310
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9316
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9320
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9324
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9328
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9332
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9336
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9340
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9344
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9348
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9352
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9356
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9364
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9406
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9448
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9452
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9456
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9461
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9469
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9473
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9477
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9485
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9495
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9499
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9503
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9507
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9511
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9515
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9519
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9525
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9534
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9543
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9564
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9574
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9583
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9622
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9636
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9645
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9651
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9655
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9661
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9670
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9682
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9699
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9716
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9729
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9742
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9754
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9768
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9783
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9798
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9815
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9830
		{
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9837
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9841
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9845
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9851
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9855
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9859
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9863
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9869
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9873
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9877
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9883
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9891
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9901
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9905
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9912
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9917
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9921
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9926
		{
			yyVAL.str = ","
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9930
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9935
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9939
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9944
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9951
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9989
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10001
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10012
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10023
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10034
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10044
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10054
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10076
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10087
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10098
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10109
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10120
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10131
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10153
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10164
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10175
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10186
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10197
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10208
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10235
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10253
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10282
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10301
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10310
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10319
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10328
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10340
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10351
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10364
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10376
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10399
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10461
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10473
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10482
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10490
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10498
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10511
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10520
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10542
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10551
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10563
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10573
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10583
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10592
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10603
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10612
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10622
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10631
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10640
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10650
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10654
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10664
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10683
		{
		}
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10685
		{
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10739
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10743
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10747
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10762
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10768
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10772
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10778
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10782
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10806
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10810
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10814
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10819
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10829
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10833
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10865
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10881
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10885
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10889
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10893
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10897
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10901
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10909
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10925
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10929
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10936
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10940
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10944
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10950
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10954
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10958
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10962
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10966
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10970
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10974
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10992
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10998
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11016
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11022
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11026
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11039
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11044
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11048
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11052
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11056
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11060
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11067
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11071
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11075
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11079
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11086
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11097
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11102
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11120
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11132
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11144
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11157
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11170
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11183
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11196
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11209
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11222
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11235
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11248
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11261
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11274
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11289
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11316
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11358
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11394
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11447
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11479
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11499
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11535
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11548
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11561
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11574
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11587
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11635
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11683
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11695
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11720
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11733
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11746
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11759
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11774
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11782
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11791
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11801
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11824
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11829
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11835
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11842
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11846
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11851
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11855
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11861
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11867
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11874
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11881
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11890
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11897
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11904
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11917
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11921
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11927
		{
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11929
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11939
		{
			yyVAL.str = ""
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11943
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
