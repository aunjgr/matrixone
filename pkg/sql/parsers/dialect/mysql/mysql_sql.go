// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const CHAIN = 57495
const NO = 57496
const RELEASE = 57497
const PRIORITY = 57498
const QUICK = 57499
const BIT = 57500
const TINYINT = 57501
const SMALLINT = 57502
const MEDIUMINT = 57503
const INT = 57504
const INTEGER = 57505
const BIGINT = 57506
const INTNUM = 57507
const REAL = 57508
const DOUBLE = 57509
const FLOAT_TYPE = 57510
const DECIMAL = 57511
const NUMERIC = 57512
const DECIMAL_VALUE = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const DATALINK = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const UUID = 57535
const VECF32 = 57536
const VECF64 = 57537
const GEOMETRY = 57538
const POINT = 57539
const LINESTRING = 57540
const POLYGON = 57541
const GEOMETRYCOLLECTION = 57542
const MULTIPOINT = 57543
const MULTILINESTRING = 57544
const MULTIPOLYGON = 57545
const INT1 = 57546
const INT2 = 57547
const INT3 = 57548
const INT4 = 57549
const INT8 = 57550
const S3OPTION = 57551
const STAGEOPTION = 57552
const SQL_SMALL_RESULT = 57553
const SQL_BIG_RESULT = 57554
const SQL_BUFFER_RESULT = 57555
const LOW_PRIORITY = 57556
const HIGH_PRIORITY = 57557
const DELAYED = 57558
const CREATE = 57559
const ALTER = 57560
const DROP = 57561
const RENAME = 57562
const ANALYZE = 57563
const PHYPLAN = 57564
const ADD = 57565
const RETURNS = 57566
const SCHEMA = 57567
const TABLE = 57568
const SEQUENCE = 57569
const INDEX = 57570
const VIEW = 57571
const TO = 57572
const IGNORE = 57573
const IF = 57574
const PRIMARY = 57575
const COLUMN = 57576
const CONSTRAINT = 57577
const SPATIAL = 57578
const FULLTEXT = 57579
const FOREIGN = 57580
const KEY_BLOCK_SIZE = 57581
const SHOW = 57582
const DESCRIBE = 57583
const EXPLAIN = 57584
const DATE = 57585
const ESCAPE = 57586
const REPAIR = 57587
const OPTIMIZE = 57588
const TRUNCATE = 57589
const MAXVALUE = 57590
const PARTITION = 57591
const REORGANIZE = 57592
const LESS = 57593
const THAN = 57594
const PROCEDURE = 57595
const TRIGGER = 57596
const STATUS = 57597
const VARIABLES = 57598
const ROLE = 57599
const PROXY = 57600
const AVG_ROW_LENGTH = 57601
const STORAGE = 57602
const DISK = 57603
const MEMORY = 57604
const CHECKSUM = 57605
const COMPRESSION = 57606
const DATA = 57607
const DIRECTORY = 57608
const DELAY_KEY_WRITE = 57609
const ENCRYPTION = 57610
const ENGINE = 57611
const MAX_ROWS = 57612
const MIN_ROWS = 57613
const PACK_KEYS = 57614
const ROW_FORMAT = 57615
const STATS_AUTO_RECALC = 57616
const STATS_PERSISTENT = 57617
const STATS_SAMPLE_PAGES = 57618
const DYNAMIC = 57619
const COMPRESSED = 57620
const REDUNDANT = 57621
const COMPACT = 57622
const FIXED = 57623
const COLUMN_FORMAT = 57624
const AUTO_RANDOM = 57625
const ENGINE_ATTRIBUTE = 57626
const SECONDARY_ENGINE_ATTRIBUTE = 57627
const INSERT_METHOD = 57628
const RESTRICT = 57629
const CASCADE = 57630
const ACTION = 57631
const PARTIAL = 57632
const SIMPLE = 57633
const CHECK = 57634
const ENFORCED = 57635
const RANGE = 57636
const LIST = 57637
const ALGORITHM = 57638
const LINEAR = 57639
const PARTITIONS = 57640
const SUBPARTITION = 57641
const SUBPARTITIONS = 57642
const CLUSTER = 57643
const TYPE = 57644
const ANY = 57645
const SOME = 57646
const EXTERNAL = 57647
const LOCALFILE = 57648
const URL = 57649
const PREPARE = 57650
const DEALLOCATE = 57651
const RESET = 57652
const EXTENSION = 57653
const RETENTION = 57654
const PERIOD = 57655
const INCREMENT = 57656
const CYCLE = 57657
const MINVALUE = 57658
const PUBLICATION = 57659
const SUBSCRIPTIONS = 57660
const PUBLICATIONS = 57661
const PROPERTIES = 57662
const PARSER = 57663
const VISIBLE = 57664
const INVISIBLE = 57665
const BTREE = 57666
const HASH = 57667
const RTREE = 57668
const BSI = 57669
const IVFFLAT = 57670
const MASTER = 57671
const ZONEMAP = 57672
const LEADING = 57673
const BOTH = 57674
const TRAILING = 57675
const UNKNOWN = 57676
const LISTS = 57677
const OP_TYPE = 57678
const REINDEX = 57679
const EXPIRE = 57680
const ACCOUNT = 57681
const ACCOUNTS = 57682
const UNLOCK = 57683
const DAY = 57684
const NEVER = 57685
const PUMP = 57686
const MYSQL_COMPATIBILITY_MODE = 57687
const UNIQUE_CHECK_ON_AUTOINCR = 57688
const MODIFY = 57689
const CHANGE = 57690
const SECOND = 57691
const ASCII = 57692
const COALESCE = 57693
const COLLATION = 57694
const HOUR = 57695
const MICROSECOND = 57696
const MINUTE = 57697
const MONTH = 57698
const QUARTER = 57699
const REPEAT = 57700
const REVERSE = 57701
const ROW_COUNT = 57702
const WEEK = 57703
const REVOKE = 57704
const FUNCTION = 57705
const PRIVILEGES = 57706
const TABLESPACE = 57707
const EXECUTE = 57708
const SUPER = 57709
const GRANT = 57710
const OPTION = 57711
const REFERENCES = 57712
const REPLICATION = 57713
const SLAVE = 57714
const CLIENT = 57715
const USAGE = 57716
const RELOAD = 57717
const FILE = 57718
const TEMPORARY = 57719
const ROUTINE = 57720
const EVENT = 57721
const SHUTDOWN = 57722
const NULLX = 57723
const AUTO_INCREMENT = 57724
const APPROXNUM = 57725
const SIGNED = 57726
const UNSIGNED = 57727
const ZEROFILL = 57728
const ENGINES = 57729
const LOW_CARDINALITY = 57730
const AUTOEXTEND_SIZE = 57731
const ADMIN_NAME = 57732
const RANDOM = 57733
const SUSPEND = 57734
const ATTRIBUTE = 57735
const HISTORY = 57736
const REUSE = 57737
const CURRENT = 57738
const OPTIONAL = 57739
const FAILED_LOGIN_ATTEMPTS = 57740
const PASSWORD_LOCK_TIME = 57741
const UNBOUNDED = 57742
const SECONDARY = 57743
const RESTRICTED = 57744
const USER = 57745
const IDENTIFIED = 57746
const CIPHER = 57747
const ISSUER = 57748
const X509 = 57749
const SUBJECT = 57750
const SAN = 57751
const REQUIRE = 57752
const SSL = 57753
const NONE = 57754
const PASSWORD = 57755
const SHARED = 57756
const EXCLUSIVE = 57757
const MAX_QUERIES_PER_HOUR = 57758
const MAX_UPDATES_PER_HOUR = 57759
const MAX_CONNECTIONS_PER_HOUR = 57760
const MAX_USER_CONNECTIONS = 57761
const FORMAT = 57762
const VERBOSE = 57763
const CONNECTION = 57764
const TRIGGERS = 57765
const PROFILES = 57766
const LOAD = 57767
const INLINE = 57768
const INFILE = 57769
const TERMINATED = 57770
const OPTIONALLY = 57771
const ENCLOSED = 57772
const ESCAPED = 57773
const STARTING = 57774
const LINES = 57775
const ROWS = 57776
const IMPORT = 57777
const DISCARD = 57778
const JSONTYPE = 57779
const MODUMP = 57780
const OVER = 57781
const PRECEDING = 57782
const FOLLOWING = 57783
const GROUPS = 57784
const DATABASES = 57785
const TABLES = 57786
const SEQUENCES = 57787
const EXTENDED = 57788
const FULL = 57789
const PROCESSLIST = 57790
const FIELDS = 57791
const COLUMNS = 57792
const OPEN = 57793
const ERRORS = 57794
const WARNINGS = 57795
const INDEXES = 57796
const SCHEMAS = 57797
const NODE = 57798
const LOCKS = 57799
const ROLES = 57800
const TABLE_NUMBER = 57801
const COLUMN_NUMBER = 57802
const TABLE_VALUES = 57803
const TABLE_SIZE = 57804
const NAMES = 57805
const GLOBAL = 57806
const PERSIST = 57807
const SESSION = 57808
const ISOLATION = 57809
const LEVEL = 57810
const READ = 57811
const WRITE = 57812
const ONLY = 57813
const REPEATABLE = 57814
const COMMITTED = 57815
const UNCOMMITTED = 57816
const SERIALIZABLE = 57817
const LOCAL = 57818
const EVENTS = 57819
const PLUGINS = 57820
const CURRENT_TIMESTAMP = 57821
const DATABASE = 57822
const CURRENT_TIME = 57823
const LOCALTIME = 57824
const LOCALTIMESTAMP = 57825
const UTC_DATE = 57826
const UTC_TIME = 57827
const UTC_TIMESTAMP = 57828
const REPLACE = 57829
const CONVERT = 57830
const SEPARATOR = 57831
const TIMESTAMPDIFF = 57832
const CURRENT_DATE = 57833
const CURRENT_USER = 57834
const CURRENT_ROLE = 57835
const SECOND_MICROSECOND = 57836
const MINUTE_MICROSECOND = 57837
const MINUTE_SECOND = 57838
const HOUR_MICROSECOND = 57839
const HOUR_SECOND = 57840
const HOUR_MINUTE = 57841
const DAY_MICROSECOND = 57842
const DAY_SECOND = 57843
const DAY_MINUTE = 57844
const DAY_HOUR = 57845
const YEAR_MONTH = 57846
const SQL_TSI_HOUR = 57847
const SQL_TSI_DAY = 57848
const SQL_TSI_WEEK = 57849
const SQL_TSI_MONTH = 57850
const SQL_TSI_QUARTER = 57851
const SQL_TSI_YEAR = 57852
const SQL_TSI_SECOND = 57853
const SQL_TSI_MINUTE = 57854
const RECURSIVE = 57855
const CONFIG = 57856
const DRAINER = 57857
const SOURCE = 57858
const STREAM = 57859
const HEADERS = 57860
const CONNECTOR = 57861
const CONNECTORS = 57862
const DAEMON = 57863
const PAUSE = 57864
const CANCEL = 57865
const TASK = 57866
const RESUME = 57867
const MATCH = 57868
const AGAINST = 57869
const BOOLEAN = 57870
const LANGUAGE = 57871
const WITH = 57872
const QUERY = 57873
const EXPANSION = 57874
const WITHOUT = 57875
const VALIDATION = 57876
const UPGRADE = 57877
const RETRY = 57878
const ADDDATE = 57879
const BIT_AND = 57880
const BIT_OR = 57881
const BIT_XOR = 57882
const CAST = 57883
const COUNT = 57884
const APPROX_COUNT = 57885
const APPROX_COUNT_DISTINCT = 57886
const SERIAL_EXTRACT = 57887
const APPROX_PERCENTILE = 57888
const CURDATE = 57889
const CURTIME = 57890
const DATE_ADD = 57891
const DATE_SUB = 57892
const EXTRACT = 57893
const GROUP_CONCAT = 57894
const MAX = 57895
const MID = 57896
const MIN = 57897
const NOW = 57898
const POSITION = 57899
const SESSION_USER = 57900
const STD = 57901
const STDDEV = 57902
const MEDIAN = 57903
const CLUSTER_CENTERS = 57904
const KMEANS = 57905
const STDDEV_POP = 57906
const STDDEV_SAMP = 57907
const SUBDATE = 57908
const SUBSTR = 57909
const SUBSTRING = 57910
const SUM = 57911
const SYSDATE = 57912
const SYSTEM_USER = 57913
const TRANSLATE = 57914
const TRIM = 57915
const VARIANCE = 57916
const VAR_POP = 57917
const VAR_SAMP = 57918
const AVG = 57919
const RANK = 57920
const ROW_NUMBER = 57921
const DENSE_RANK = 57922
const BIT_CAST = 57923
const BITMAP_BIT_POSITION = 57924
const BITMAP_BUCKET_NUMBER = 57925
const BITMAP_COUNT = 57926
const BITMAP_CONSTRUCT_AGG = 57927
const BITMAP_OR_AGG = 57928
const NEXTVAL = 57929
const SETVAL = 57930
const CURRVAL = 57931
const LASTVAL = 57932
const ARROW = 57933
const ROW = 57934
const OUTFILE = 57935
const HEADER = 57936
const MAX_FILE_SIZE = 57937
const FORCE_QUOTE = 57938
const PARALLEL = 57939
const STRICT = 57940
const UNUSED = 57941
const BINDINGS = 57942
const DO = 57943
const DECLARE = 57944
const LOOP = 57945
const WHILE = 57946
const LEAVE = 57947
const ITERATE = 57948
const UNTIL = 57949
const CALL = 57950
const PREV = 57951
const SLIDING = 57952
const FILL = 57953
const SPBEGIN = 57954
const BACKEND = 57955
const SERVERS = 57956
const HANDLER = 57957
const PERCENT = 57958
const SAMPLE = 57959
const MO_TS = 57960
const PITR = 57961
const CDC = 57962
const ROLLUP = 57963
const LOGSERVICE = 57964
const REPLICAS = 57965
const STORES = 57966
const SETTINGS = 57967
const KILL = 57968
const BACKUP = 57969
const FILESYSTEM = 57970
const PARALLELISM = 57971
const RESTORE = 57972
const QUERY_RESULT = 57973

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12593

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	11, 790,
	22, 790,
	-2, 783,
	-1, 161,
	243, 1207,
	245, 1106,
	-2, 1153,
	-1, 188,
	43, 613,
	245, 613,
	272, 620,
	273, 620,
	471, 613,
	-2, 648,
	-1, 228,
	652, 1970,
	-2, 517,
	-1, 535,
	652, 2092,
	-2, 398,
	-1, 593,
	652, 2151,
	-2, 396,
	-1, 594,
	652, 2152,
	-2, 397,
	-1, 595,
	652, 2153,
	-2, 399,
	-1, 730,
	324, 176,
	443, 176,
	444, 176,
	-2, 1872,
	-1, 796,
	85, 1657,
	-2, 2028,
	-1, 797,
	85, 1676,
	-2, 1999,
	-1, 801,
	85, 1677,
	-2, 2027,
	-1, 834,
	85, 1584,
	-2, 2226,
	-1, 835,
	85, 1585,
	-2, 2225,
	-1, 836,
	85, 1586,
	-2, 2215,
	-1, 837,
	85, 2187,
	-2, 2208,
	-1, 838,
	85, 2188,
	-2, 2209,
	-1, 839,
	85, 2189,
	-2, 2217,
	-1, 840,
	85, 2190,
	-2, 2197,
	-1, 841,
	85, 2191,
	-2, 2206,
	-1, 842,
	85, 2192,
	-2, 2218,
	-1, 843,
	85, 2193,
	-2, 2219,
	-1, 844,
	85, 2194,
	-2, 2224,
	-1, 845,
	85, 2195,
	-2, 2229,
	-1, 846,
	85, 2196,
	-2, 2230,
	-1, 847,
	85, 1653,
	-2, 2066,
	-1, 848,
	85, 1654,
	-2, 1856,
	-1, 849,
	85, 1655,
	-2, 2075,
	-1, 850,
	85, 1656,
	-2, 1865,
	-1, 852,
	85, 1659,
	-2, 1873,
	-1, 854,
	85, 1661,
	-2, 2099,
	-1, 856,
	85, 1664,
	-2, 1892,
	-1, 858,
	85, 1666,
	-2, 2111,
	-1, 859,
	85, 1667,
	-2, 2110,
	-1, 860,
	85, 1668,
	-2, 1937,
	-1, 861,
	85, 1669,
	-2, 2023,
	-1, 864,
	85, 1672,
	-2, 2122,
	-1, 866,
	85, 1674,
	-2, 2125,
	-1, 867,
	85, 1675,
	-2, 2127,
	-1, 868,
	85, 1678,
	-2, 2135,
	-1, 869,
	85, 1679,
	-2, 2008,
	-1, 870,
	85, 1680,
	-2, 2053,
	-1, 871,
	85, 1681,
	-2, 2018,
	-1, 872,
	85, 1682,
	-2, 2043,
	-1, 883,
	85, 1562,
	-2, 2220,
	-1, 884,
	85, 1563,
	-2, 2221,
	-1, 885,
	85, 1564,
	-2, 2222,
	-1, 985,
	466, 648,
	467, 648,
	-2, 614,
	-1, 1036,
	127, 1856,
	138, 1856,
	158, 1856,
	-2, 1830,
	-1, 1153,
	22, 817,
	-2, 766,
	-1, 1263,
	11, 790,
	22, 790,
	-2, 1442,
	-1, 1345,
	22, 817,
	-2, 766,
	-1, 1699,
	85, 1729,
	-2, 2025,
	-1, 1700,
	85, 1730,
	-2, 2026,
	-1, 1867,
	86, 978,
	-2, 984,
	-1, 2313,
	110, 1145,
	154, 1145,
	193, 1145,
	196, 1145,
	285, 1145,
	-2, 1138,
	-1, 2473,
	11, 790,
	22, 790,
	-2, 919,
	-1, 2507,
	86, 1816,
	159, 1816,
	-2, 2010,
	-1, 2508,
	86, 1816,
	159, 1816,
	-2, 2009,
	-1, 2509,
	86, 1792,
	159, 1792,
	-2, 1996,
	-1, 2510,
	86, 1793,
	159, 1793,
	-2, 2001,
	-1, 2511,
	86, 1794,
	159, 1794,
	-2, 1925,
	-1, 2512,
	86, 1795,
	159, 1795,
	-2, 1919,
	-1, 2513,
	86, 1796,
	159, 1796,
	-2, 1846,
	-1, 2514,
	86, 1797,
	159, 1797,
	-2, 1998,
	-1, 2515,
	86, 1798,
	159, 1798,
	-2, 1923,
	-1, 2516,
	86, 1799,
	159, 1799,
	-2, 1918,
	-1, 2517,
	86, 1800,
	159, 1800,
	-2, 1906,
	-1, 2518,
	86, 1816,
	159, 1816,
	-2, 1907,
	-1, 2519,
	86, 1816,
	159, 1816,
	-2, 1908,
	-1, 2521,
	86, 1805,
	159, 1805,
	-2, 2043,
	-1, 2522,
	86, 1782,
	159, 1782,
	-2, 2028,
	-1, 2523,
	86, 1814,
	159, 1814,
	-2, 1999,
	-1, 2524,
	86, 1814,
	159, 1814,
	-2, 2027,
	-1, 2525,
	86, 1814,
	159, 1814,
	-2, 1874,
	-1, 2526,
	86, 1812,
	159, 1812,
	-2, 2018,
	-1, 2527,
	86, 1809,
	159, 1809,
	-2, 1897,
	-1, 2528,
	85, 1763,
	86, 1763,
	159, 1763,
	401, 1763,
	402, 1763,
	403, 1763,
	-2, 1845,
	-1, 2529,
	85, 1764,
	86, 1764,
	159, 1764,
	401, 1764,
	402, 1764,
	403, 1764,
	-2, 1847,
	-1, 2530,
	85, 1765,
	86, 1765,
	159, 1765,
	401, 1765,
	402, 1765,
	403, 1765,
	-2, 2071,
	-1, 2531,
	85, 1767,
	86, 1767,
	159, 1767,
	401, 1767,
	402, 1767,
	403, 1767,
	-2, 2000,
	-1, 2532,
	85, 1769,
	86, 1769,
	159, 1769,
	401, 1769,
	402, 1769,
	403, 1769,
	-2, 1980,
	-1, 2533,
	85, 1771,
	86, 1771,
	159, 1771,
	401, 1771,
	402, 1771,
	403, 1771,
	-2, 1924,
	-1, 2534,
	85, 1773,
	86, 1773,
	159, 1773,
	401, 1773,
	402, 1773,
	403, 1773,
	-2, 1902,
	-1, 2535,
	85, 1774,
	86, 1774,
	159, 1774,
	401, 1774,
	402, 1774,
	403, 1774,
	-2, 1903,
	-1, 2536,
	85, 1776,
	86, 1776,
	159, 1776,
	401, 1776,
	402, 1776,
	403, 1776,
	-2, 1844,
	-1, 2537,
	86, 1819,
	159, 1819,
	401, 1819,
	402, 1819,
	403, 1819,
	-2, 1879,
	-1, 2538,
	86, 1819,
	159, 1819,
	401, 1819,
	402, 1819,
	403, 1819,
	-2, 1893,
	-1, 2539,
	86, 1822,
	159, 1822,
	401, 1822,
	402, 1822,
	403, 1822,
	-2, 1875,
	-1, 2540,
	86, 1822,
	159, 1822,
	401, 1822,
	402, 1822,
	403, 1822,
	-2, 1940,
	-1, 2541,
	86, 1819,
	159, 1819,
	401, 1819,
	402, 1819,
	403, 1819,
	-2, 1962,
	-1, 2753,
	110, 1145,
	154, 1145,
	193, 1145,
	196, 1145,
	285, 1145,
	-2, 1139,
	-1, 2771,
	83, 710,
	159, 710,
	-2, 1323,
	-1, 3191,
	196, 1145,
	309, 1410,
	-2, 1382,
	-1, 3371,
	110, 1145,
	154, 1145,
	193, 1145,
	196, 1145,
	-2, 1263,
	-1, 3373,
	110, 1145,
	154, 1145,
	193, 1145,
	196, 1145,
	-2, 1263,
	-1, 3385,
	83, 710,
	159, 710,
	-2, 1323,
	-1, 3406,
	196, 1145,
	309, 1410,
	-2, 1383,
	-1, 3555,
	110, 1145,
	154, 1145,
	193, 1145,
	196, 1145,
	-2, 1264,
	-1, 3583,
	86, 1225,
	159, 1225,
	-2, 1145,
	-1, 3723,
	86, 1225,
	159, 1225,
	-2, 1145,
	-1, 3880,
	86, 1229,
	159, 1229,
	-2, 1145,
	-1, 3927,
	86, 1230,
	159, 1230,
	-2, 1145,
}

const yyPrivate = 57344

const yyLast = 51905

var yyAct = [...]int{
	763, 740, 3973, 765, 3947, 2801, 217, 3966, 3884, 1952,
	3890, 1679, 3391, 3487, 3891, 3210, 3883, 3783, 3809, 3723,
	3177, 749, 3764, 3840, 3420, 3283, 3611, 3701, 2795, 742,
	3668, 3758, 1298, 3284, 3787, 3722, 3543, 3540, 3542, 3641,
	2713, 793, 1035, 2798, 3692, 1154, 630, 3491, 2596, 37,
	1590, 3765, 3353, 3767, 3482, 3358, 1900, 3552, 1451, 1445,
	648, 1726, 654, 654, 2804, 3186, 2774, 3564, 654, 672,
	681, 1682, 3557, 681, 738, 3522, 3148, 2360, 1675, 3407,
	3374, 3134, 3108, 3281, 1513, 2910, 2911, 2049, 3137, 3343,
	2062, 2909, 2890, 2046, 2824, 3206, 3376, 2085, 3188, 2467,
	2906, 2160, 2631, 1740, 3323, 693, 2011, 3195, 2979, 2503,
	3269, 2118, 2938, 2505, 3248, 2742, 2363, 1912, 678, 3113,
	3119, 3194, 3115, 689, 2324, 1506, 3157, 2754, 3111, 1144,
	202, 2269, 3109, 3083, 3110, 732, 3106, 3026, 737, 2156,
	2143, 1579, 1832, 137, 2575, 65, 2268, 2292, 2952, 2126,
	2127, 2119, 1586, 2557, 2155, 2091, 1594, 2042, 36, 2468,
	2015, 2451, 2012, 2962, 957, 2731, 2726, 1148, 2446, 1411,
	2826, 2806, 2361, 1942, 2766, 213, 8, 1591, 212, 7,
	6, 1876, 1673, 2323, 2313, 2501, 2157, 1092, 1491, 2190,
	741, 1522, 1485, 630, 2304, 2167, 647, 1911, 1553, 731,
	2356, 2664, 1713, 1733, 2125, 1454, 750, 2122, 15, 1170,
	1664, 1455, 1605, 2107, 1601, 2081, 1622, 217, 686, 217,
	1672, 1083, 1084, 1560, 23, 2475, 1028, 739, 654, 1875,
	1434, 994, 1872, 1544, 956, 2447, 663, 887, 1741, 111,
	1490, 1487, 24, 695, 1446, 1430, 27, 17, 1552, 939,
	195, 933, 10, 1367, 203, 696, 1602, 199, 680, 954,
	889, 16, 980, 1343, 1299, 947, 692, 948, 890, 14,
	1231, 1232, 1233, 1230, 2164, 3774, 3686, 676, 666, 1231,
	1232, 1233, 1230, 33, 1231, 1232, 1233, 1230, 1062, 2699,
	2477, 1080, 2996, 650, 690, 2699, 2699, 3388, 3164, 2995,
	1149, 2174, 3515, 3361, 1150, 3276, 928, 2619, 2563, 2560,
	2561, 1845, 1567, 2663, 1563, 677, 659, 1421, 1076, 2558,
	942, 201, 938, 1075, 649, 2267, 1489, 1362, 3748, 909,
	673, 684, 907, 2273, 1076, 1014, 1846, 1076, 675, 3093,
	1041, 1614, 1044, 2277, 1365, 1378, 3076, 1079, 3073, 1081,
	1468, 3078, 674, 3075, 3958, 1043, 655, 1414, 1415, 1416,
	1063, 1839, 1613, 1149, 1358, 3480, 2975, 1565, 2973, 2691,
	2689, 2096, 3753, 3648, 3642, 3483, 3282, 8, 919, 2140,
	7, 1293, 1074, 3769, 2121, 888, 1029, 1231, 1232, 1233,
	1230, 3053, 733, 1231, 1232, 1233, 1230, 1678, 2113, 2401,
	899, 3527, 3523, 3708, 3375, 1229, 1193, 1373, 2613, 2605,
	2161, 2315, 1600, 2693, 3673, 3820, 1368, 1530, 1372, 1371,
	1370, 909, 907, 1045, 3051, 200, 200, 691, 908, 1403,
	200, 906, 629, 1057, 1052, 1047, 1051, 1055, 904, 1386,
	2172, 1848, 2904, 2308, 1609, 3865, 734, 3709, 200, 3675,
	2495, 944, 1228, 937, 2946, 2947, 1039, 200, 61, 191,
	162, 1060, 941, 940, 1040, 1050, 2715, 2059, 1374, 2496,
	200, 61, 191, 162, 1606, 2026, 2027, 1464, 2998, 922,
	1465, 1009, 1007, 929, 1008, 1857, 1858, 733, 192, 2945,
	200, 61, 191, 162, 2025, 183, 136, 196, 1608, 193,
	1452, 1453, 196, 936, 2716, 2728, 1492, 200, 1494, 900,
	2576, 200, 61, 191, 162, 2729, 1058, 1003, 136, 3181,
	196, 200, 946, 1926, 1681, 1061, 3179, 935, 3077, 196,
	3074, 934, 1226, 122, 1038, 1645, 1037, 921, 200, 61,
	191, 162, 196, 927, 3772, 200, 1450, 1048, 1442, 2314,
	1449, 1452, 1453, 2256, 1631, 2987, 200, 61, 191, 162,
	200, 3771, 196, 3770, 2727, 925, 3915, 2760, 1467, 136,
	3858, 1059, 1015, 1385, 2482, 1165, 3756, 2481, 1620, 196,
	2483, 3772, 3853, 196, 3894, 3895, 3285, 200, 61, 191,
	162, 1221, 3504, 196, 1011, 878, 3285, 877, 879, 880,
	3842, 881, 882, 945, 3771, 3852, 3862, 3845, 1617, 2980,
	196, 1049, 1566, 1564, 3842, 3770, 3851, 2758, 1685, 144,
	145, 2694, 146, 147, 3951, 3952, 3645, 2043, 196, 926,
	2033, 1660, 1619, 2981, 1208, 2982, 2600, 1209, 2734, 1159,
	2176, 1665, 3780, 3298, 1669, 2717, 3759, 3760, 3761, 3762,
	3344, 1162, 654, 654, 1173, 1176, 1775, 3532, 1013, 196,
	2845, 1077, 1078, 654, 1158, 1211, 1082, 2761, 1668, 2168,
	3351, 2436, 3130, 1173, 1176, 3120, 3677, 3678, 161, 1654,
	198, 2104, 2303, 681, 681, 945, 654, 3432, 1056, 3867,
	3868, 161, 189, 198, 190, 120, 2173, 3016, 2718, 3128,
	3860, 188, 3863, 3864, 1573, 1572, 943, 1224, 1225, 1478,
	3014, 1223, 2610, 187, 188, 182, 181, 678, 678, 678,
	2399, 67, 2057, 2058, 1053, 3124, 1387, 1054, 1157, 1196,
	3481, 1466, 3503, 2974, 2896, 1012, 2692, 1684, 1683, 902,
	3505, 3893, 1086, 2439, 2440, 932, 1361, 1206, 2438, 1271,
	1440, 3682, 3529, 2498, 1670, 3125, 3126, 709, 708, 715,
	705, 2711, 3135, 1168, 3327, 2444, 2151, 3773, 3685, 712,
	713, 3127, 714, 718, 1218, 646, 699, 903, 1667, 3447,
	3922, 3301, 184, 185, 186, 1151, 723, 3020, 2698, 1150,
	1150, 3209, 1150, 3638, 2162, 1158, 1188, 2162, 2162, 2712,
	2274, 3207, 3208, 1847, 3183, 1219, 1220, 1615, 2997, 3444,
	3146, 1207, 3158, 3802, 1041, 194, 1044, 2994, 2179, 2181,
	2182, 3797, 2195, 2767, 1302, 2892, 2431, 1064, 1046, 1043,
	1076, 683, 682, 1076, 2902, 1076, 132, 2310, 2163, 1076,
	187, 3122, 133, 1076, 3713, 920, 918, 3437, 1076, 3707,
	3084, 3788, 3178, 1175, 1174, 1150, 3804, 3705, 3392, 1303,
	2175, 3810, 2379, 2796, 2797, 2800, 2800, 3399, 2359, 2382,
	2288, 1429, 1175, 1174, 1010, 3136, 676, 676, 676, 1691,
	1694, 1695, 3676, 3672, 3334, 2393, 3097, 1041, 1210, 1044,
	1692, 3212, 2559, 2434, 3336, 1666, 1177, 3866, 1568, 134,
	1452, 1453, 1043, 3448, 1364, 888, 1366, 1452, 1453, 3779,
	3602, 3984, 60, 2411, 677, 677, 677, 2410, 905, 679,
	1152, 1849, 1383, 648, 1153, 1369, 2381, 3528, 1040, 673,
	673, 673, 1341, 2690, 2614, 1346, 1164, 675, 675, 675,
	679, 1181, 1182, 1185, 3494, 1146, 1161, 1163, 1166, 3969,
	3136, 674, 674, 674, 2733, 2740, 957, 1187, 1272, 163,
	163, 62, 3335, 1167, 163, 1179, 2044, 679, 3591, 3597,
	2498, 2380, 1267, 1268, 1269, 1270, 1441, 1502, 700, 702,
	701, 62, 163, 1655, 197, 679, 1656, 3859, 3131, 707,
	3121, 163, 1213, 3679, 1501, 1214, 142, 197, 2037, 143,
	1265, 711, 62, 1186, 163, 3714, 2020, 1427, 726, 58,
	654, 2737, 2738, 1480, 3017, 704, 679, 654, 3706, 2432,
	2433, 630, 630, 1216, 163, 1426, 2736, 2034, 1661, 62,
	3533, 630, 630, 2366, 3184, 1517, 1517, 1425, 654, 1448,
	3811, 163, 1444, 1443, 3123, 163, 3882, 62, 2846, 3693,
	2847, 2848, 3187, 1145, 727, 163, 947, 729, 948, 681,
	1545, 648, 728, 2180, 3072, 2402, 1556, 1556, 653, 653,
	1314, 1315, 163, 3377, 661, 135, 45, 217, 62, 163,
	1262, 2359, 59, 3478, 3211, 1524, 630, 1379, 3727, 3970,
	163, 691, 3839, 3660, 163, 3661, 1488, 2940, 2942, 3288,
	139, 140, 3203, 1193, 141, 1212, 3088, 3207, 3208, 2606,
	2487, 3655, 2397, 1515, 1515, 2957, 2958, 2165, 2032, 1384,
	1519, 163, 2009, 1395, 1693, 2369, 3239, 706, 710, 716,
	1479, 717, 719, 3019, 1401, 720, 721, 722, 1598, 2704,
	724, 725, 1574, 1603, 1217, 1851, 1400, 1399, 1347, 3663,
	1612, 2376, 1398, 1345, 1016, 685, 3337, 2287, 1511, 1512,
	951, 952, 953, 3204, 3660, 3604, 3661, 2177, 2178, 1215,
	2843, 3324, 2365, 1408, 1389, 3028, 3027, 2367, 2708, 1643,
	3662, 2281, 1234, 1431, 1435, 1435, 1435, 2191, 949, 1377,
	1264, 1192, 1861, 1517, 1607, 1517, 1158, 1860, 1621, 1274,
	1859, 1618, 2283, 2282, 1436, 1437, 3598, 3599, 1431, 1431,
	1375, 1376, 1413, 3513, 678, 1410, 3090, 678, 678, 3726,
	3663, 3593, 3967, 3968, 1282, 3592, 3881, 2280, 2865, 2866,
	1653, 2368, 910, 2423, 661, 1577, 911, 1580, 1581, 3565,
	2874, 3985, 1469, 1470, 3849, 1456, 1388, 1422, 1459, 1582,
	1583, 3662, 1229, 3245, 1004, 2498, 1417, 1546, 2370, 3241,
	1680, 1638, 1639, 1517, 1193, 1380, 1381, 1588, 1589, 2941,
	1662, 1390, 1391, 1392, 1393, 1394, 1611, 1396, 1422, 1500,
	1739, 1423, 3980, 1402, 2746, 2749, 2750, 2751, 2747, 2748,
	1044, 3975, 1596, 3163, 1788, 659, 703, 1044, 1525, 2772,
	1531, 1190, 1473, 1474, 1537, 1476, 1477, 1155, 1481, 1482,
	1483, 1593, 2465, 946, 1597, 1557, 2578, 1543, 2084, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1558, 3289, 3340, 1677, 1724, 1725, 1006, 3300, 3964,
	1005, 1727, 1532, 1533, 1534, 1535, 1536, 1191, 1538, 1539,
	1540, 1541, 1542, 1642, 2864, 2170, 1548, 1549, 1550, 1551,
	1158, 2295, 1641, 2375, 3976, 2705, 1850, 2373, 3205, 2773,
	1853, 1852, 1855, 676, 1658, 1696, 676, 676, 1191, 1862,
	1017, 1864, 1865, 1797, 2296, 2297, 1545, 1629, 2466, 1773,
	1632, 1873, 1517, 1878, 1879, 2036, 1881, 1480, 654, 1624,
	3929, 1830, 2261, 654, 2605, 3656, 1517, 1496, 1498, 3657,
	957, 677, 3930, 1901, 677, 677, 3902, 1509, 1510, 3245,
	1652, 3216, 3214, 1650, 1841, 1517, 673, 1651, 1649, 673,
	673, 1480, 1833, 1646, 675, 1671, 672, 675, 675, 2306,
	2466, 2773, 1648, 1630, 1787, 3082, 1633, 1634, 674, 1676,
	1647, 674, 674, 3080, 2466, 1229, 1925, 1067, 1072, 1073,
	2082, 1201, 1663, 1715, 1203, 1932, 1932, 2960, 1480, 2720,
	1480, 1480, 1569, 3930, 654, 654, 3656, 1999, 1873, 2003,
	3766, 3896, 1517, 2006, 2007, 1004, 1722, 1723, 2022, 3903,
	630, 2695, 1204, 2875, 2877, 2878, 2879, 2876, 1770, 1771,
	1880, 1774, 3878, 2339, 630, 2225, 1517, 2595, 2224, 1789,
	3830, 2583, 1555, 1555, 1882, 1004, 3805, 2161, 1929, 3793,
	3350, 2024, 1796, 2352, 1798, 1155, 1799, 1800, 1801, 2396,
	3746, 914, 2266, 654, 1873, 1517, 2260, 2067, 2259, 654,
	654, 654, 689, 689, 3745, 1778, 1779, 1780, 1954, 2077,
	2078, 2079, 2080, 3740, 3689, 1802, 2086, 2305, 1794, 3144,
	3739, 1795, 1836, 217, 3628, 2232, 217, 217, 1006, 217,
	2001, 1005, 2152, 2055, 1197, 3879, 2008, 3738, 1808, 1809,
	1831, 1229, 913, 3689, 2060, 1935, 916, 915, 1409, 2170,
	1674, 1837, 3794, 1231, 1232, 1233, 1230, 1829, 1006, 1730,
	1199, 1005, 3737, 3747, 1193, 2052, 2053, 1503, 2038, 1788,
	1788, 2129, 1202, 1205, 3717, 3716, 3688, 2328, 3453, 1868,
	1788, 1788, 2029, 3992, 2031, 3401, 3689, 2145, 3977, 2069,
	2070, 2071, 3451, 3689, 3388, 2050, 2051, 1431, 1198, 2338,
	1913, 2066, 1915, 1916, 1898, 2045, 1903, 1904, 3367, 1897,
	3689, 1435, 2964, 1069, 1070, 1071, 1922, 2775, 653, 1147,
	1901, 1607, 2608, 1435, 1517, 2159, 2607, 1936, 1937, 1156,
	1918, 1908, 1914, 1342, 1262, 3689, 1686, 1687, 1688, 1689,
	1690, 2139, 1923, 2599, 2346, 678, 1246, 2170, 2170, 3689,
	3145, 2498, 1184, 2095, 2366, 2369, 2098, 2099, 3402, 2101,
	1931, 1933, 3612, 3613, 3614, 3618, 3616, 3617, 3615, 3316,
	2000, 2005, 3312, 2010, 3224, 1200, 2153, 2935, 1731, 2670,
	2662, 3368, 1735, 1736, 1737, 1738, 2220, 2205, 2150, 2135,
	2039, 1772, 1869, 1870, 1871, 1902, 2028, 2089, 2030, 1782,
	1231, 1232, 1233, 1230, 1884, 1885, 1886, 1887, 1231, 1232,
	1233, 1230, 1041, 2621, 1044, 2065, 1917, 1044, 2603, 2124,
	2072, 2073, 2075, 1041, 1626, 1044, 2064, 1043, 1279, 2591,
	2124, 1178, 1924, 2090, 1142, 1927, 1928, 1137, 1043, 2639,
	2131, 2585, 3317, 2092, 2580, 3313, 3049, 3225, 2204, 1877,
	2466, 1834, 1229, 1229, 2201, 2188, 2189, 2054, 3168, 2109,
	2366, 2369, 912, 1893, 2572, 2570, 3011, 1136, 1132, 1133,
	1134, 1135, 1934, 2644, 1463, 2643, 2642, 2640, 1231, 1232,
	1233, 1230, 1906, 2568, 2130, 2138, 1229, 2136, 2370, 2566,
	2327, 2328, 2068, 2365, 2359, 2364, 1418, 2362, 2367, 2262,
	1419, 2141, 2581, 2239, 676, 2238, 2149, 2271, 2272, 2354,
	2275, 1432, 2223, 2278, 2586, 3798, 2147, 2581, 1777, 1776,
	1041, 3986, 1044, 3566, 2203, 2214, 3380, 732, 3955, 1905,
	654, 654, 654, 2154, 2394, 1043, 2023, 2573, 2571, 1877,
	1777, 1776, 677, 3775, 2641, 654, 654, 654, 654, 2213,
	2212, 2169, 2368, 3378, 1921, 1635, 2567, 673, 2325, 3799,
	778, 138, 2567, 2328, 2183, 675, 138, 3567, 2331, 1480,
	3381, 1507, 2261, 2192, 2148, 3687, 1229, 1418, 1229, 674,
	2185, 1419, 1508, 3652, 1715, 1229, 3595, 3159, 892, 893,
	894, 895, 1674, 3594, 2370, 1480, 2197, 3379, 1229, 2365,
	2359, 2364, 1505, 2362, 2367, 3580, 2186, 2187, 3536, 3360,
	917, 3246, 2388, 1834, 892, 893, 894, 895, 1834, 1834,
	3237, 2558, 1229, 1229, 2170, 3231, 660, 3226, 1636, 138,
	3139, 1433, 1814, 2184, 1803, 1804, 1805, 1806, 2899, 2898,
	1810, 1811, 1812, 1813, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1807, 2744, 2700, 2395, 2368, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1246, 3160, 2094, 654,
	1932, 2097, 2618, 2584, 2100, 2489, 1475, 2102, 2470, 2470,
	2022, 2470, 2134, 1486, 2133, 2645, 2646, 2255, 2257, 2258,
	1721, 2132, 1405, 3274, 1528, 1249, 1250, 1251, 1252, 1253,
	1246, 630, 630, 1404, 1523, 1504, 1718, 1720, 1717, 1158,
	1719, 3161, 2348, 1160, 2263, 1517, 654, 2628, 2552, 2093,
	2233, 2234, 1734, 2236, 2198, 1561, 2289, 2093, 1734, 654,
	2243, 2966, 2144, 2307, 2358, 1158, 2542, 648, 1302, 897,
	2357, 1233, 1230, 1556, 1863, 2022, 3850, 1230, 2547, 3607,
	2549, 3606, 2983, 2835, 217, 2343, 2833, 1042, 2812, 2345,
	2654, 2347, 138, 2810, 3586, 897, 2332, 3537, 3538, 2351,
	2683, 3960, 2684, 1303, 1281, 3959, 1792, 138, 2472, 138,
	2476, 3906, 3877, 2484, 2335, 2485, 2474, 1280, 3876, 2341,
	3530, 1793, 2342, 2493, 2588, 1231, 1232, 1233, 1230, 2506,
	3800, 1435, 3348, 2714, 2490, 2491, 3277, 2371, 2372, 2478,
	2377, 2601, 2208, 3742, 3983, 2159, 2743, 2886, 3730, 2500,
	2344, 3720, 1517, 1041, 1517, 1044, 1517, 1231, 1232, 1233,
	1230, 1158, 1231, 1232, 1233, 1230, 3275, 2194, 1043, 2620,
	1561, 2199, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1235,
	3531, 2546, 1231, 1232, 1233, 1230, 1231, 1232, 1233, 1230,
	2441, 2445, 3349, 2562, 3710, 1517, 2648, 1231, 1232, 1233,
	1230, 3643, 3569, 2479, 3979, 3568, 2630, 2885, 1420, 3982,
	3393, 2655, 2211, 3382, 2553, 1428, 1517, 2333, 2334, 3347,
	2218, 3227, 1438, 3129, 2884, 2615, 2882, 2336, 2337, 3007,
	1457, 1458, 2611, 1460, 1461, 3042, 1462, 2494, 1231, 1232,
	1233, 1230, 2235, 1231, 1232, 1233, 1230, 2240, 2241, 2242,
	2978, 2871, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
	2253, 2254, 3030, 2543, 2702, 2703, 2977, 2497, 2706, 2659,
	2660, 2545, 2869, 1515, 1231, 1232, 1233, 1230, 2868, 2647,
	2867, 2597, 2598, 2554, 2883, 1158, 2881, 2859, 2853, 1158,
	2852, 2851, 2657, 2850, 1515, 2636, 1517, 3041, 2696, 1480,
	2656, 2574, 1140, 2486, 2632, 2003, 2632, 2202, 2265, 2112,
	2612, 2870, 2617, 2771, 1231, 1232, 1233, 1230, 2111, 2777,
	2110, 2106, 2626, 1562, 1231, 1232, 1233, 1230, 3354, 2105,
	2061, 2604, 1856, 2602, 2609, 1854, 1627, 2787, 1360, 2687,
	1231, 1232, 1233, 1230, 3359, 3114, 2593, 1158, 3978, 2721,
	3488, 2216, 3953, 2506, 3921, 2809, 2759, 1231, 1232, 1233,
	1230, 1139, 1158, 1158, 1158, 1932, 2622, 2623, 1158, 3920,
	2819, 2820, 2821, 2822, 1158, 2829, 2755, 2830, 2831, 3917,
	2832, 2638, 2834, 3887, 3856, 1231, 1232, 1233, 1230, 2544,
	3680, 3681, 727, 2829, 1883, 729, 2756, 3855, 2551, 1888,
	728, 3669, 3837, 3782, 3541, 2470, 3763, 3754, 3734, 2625,
	1231, 1232, 1233, 1230, 3729, 1954, 2741, 1496, 1498, 2887,
	2215, 3728, 3684, 3671, 3670, 2768, 2778, 2815, 2816, 630,
	2200, 3644, 2818, 3588, 3548, 2003, 1477, 3534, 2825, 1158,
	2022, 2022, 2022, 2022, 2022, 2022, 3516, 1231, 1232, 1233,
	1230, 3514, 1044, 3786, 2790, 3511, 1158, 2022, 1499, 2723,
	2470, 2725, 3508, 3507, 3486, 2893, 1834, 3484, 1834, 2807,
	1938, 1939, 3509, 2807, 2722, 3461, 3458, 2739, 1517, 2803,
	1231, 1232, 1233, 1230, 3455, 2891, 3817, 1834, 1834, 654,
	654, 2762, 8, 3346, 2814, 7, 2770, 2776, 3345, 1231,
	1232, 1233, 1230, 2912, 3342, 3332, 2788, 3325, 1231, 1232,
	1233, 1230, 3309, 3307, 2789, 3234, 2792, 3233, 3228, 1555,
	2912, 3222, 3221, 2805, 3721, 3497, 3140, 3101, 2811, 2063,
	3813, 3100, 3096, 2817, 3094, 2063, 2063, 2063, 3496, 3092,
	2786, 2931, 2665, 2666, 3089, 217, 3087, 2270, 2671, 1674,
	217, 3021, 1231, 1232, 1233, 1230, 3018, 2976, 138, 138,
	138, 1042, 2944, 2849, 2861, 1231, 1232, 1233, 1230, 2587,
	2950, 2590, 1788, 2880, 1788, 2872, 2862, 2993, 1245, 1244,
	1254, 1255, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1246,
	3006, 2860, 2894, 2856, 3441, 2855, 1517, 2900, 2854, 3013,
	2709, 2701, 2913, 2914, 2915, 2916, 2917, 2918, 2697, 2594,
	2961, 833, 832, 2802, 2928, 2284, 2279, 2932, 2276, 2934,
	2988, 1231, 1232, 1233, 1230, 2115, 2108, 2933, 1844, 1843,
	1628, 2999, 2948, 1310, 1263, 2629, 3304, 2951, 2635, 1306,
	1581, 3665, 1305, 2780, 1143, 2649, 2650, 901, 2783, 3045,
	1582, 1583, 3664, 2652, 2653, 3653, 200, 1833, 191, 162,
	3510, 3495, 2992, 1231, 1232, 1233, 1230, 1588, 1589, 2658,
	3373, 3372, 3371, 1909, 1910, 2967, 1231, 1232, 1233, 1230,
	2971, 3339, 2943, 3035, 2990, 3037, 3321, 1596, 3319, 3318,
	1919, 1920, 3315, 1877, 3000, 3314, 3091, 1686, 1834, 2808,
	2969, 2968, 3010, 3095, 3015, 2965, 1593, 3098, 3099, 1597,
	1930, 3308, 2986, 3306, 3290, 1158, 1044, 3280, 3279, 3265,
	2984, 3117, 2989, 2991, 3264, 3169, 3003, 1044, 196, 3002,
	3044, 3133, 3001, 3104, 3079, 3009, 654, 1244, 1254, 1255,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1246, 3149, 1158,
	3043, 3047, 654, 3023, 1158, 1158, 3022, 1231, 1232, 1233,
	1230, 3040, 3029, 2022, 2325, 2681, 3167, 3032, 3031, 3025,
	2959, 3033, 3034, 3038, 3039, 2781, 2782, 1231, 1232, 1233,
	1230, 1348, 2680, 2719, 2569, 2388, 3036, 2565, 3143, 3081,
	2679, 2564, 1231, 1232, 1233, 1230, 2244, 3193, 2237, 3196,
	3152, 3196, 3196, 2231, 2230, 3156, 1158, 2229, 2228, 1231,
	1232, 1233, 1230, 2226, 2222, 2897, 2755, 1231, 1232, 1233,
	1230, 3086, 3085, 2221, 3217, 3103, 2219, 2210, 3213, 2207,
	2206, 3176, 1517, 1517, 2114, 2400, 1827, 1826, 2403, 2404,
	2405, 2406, 2407, 2408, 2409, 3180, 3182, 2412, 2413, 2414,
	2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 3102, 2424,
	2425, 2426, 2427, 2428, 3215, 2429, 2299, 2300, 2301, 3165,
	1825, 3142, 1791, 1790, 1781, 1529, 1527, 3905, 200, 654,
	1300, 2316, 2317, 2318, 2319, 3151, 3117, 3812, 3166, 3162,
	3154, 3155, 1041, 3749, 1044, 1480, 1044, 3736, 2003, 2003,
	3731, 1044, 1576, 3201, 3192, 3622, 3175, 1043, 3191, 3605,
	1515, 1515, 2358, 3601, 3579, 1834, 3218, 3219, 2357, 2678,
	3563, 3471, 3197, 3198, 3469, 3439, 3438, 1044, 3435, 3434,
	3400, 1526, 3397, 3395, 3362, 660, 1587, 1578, 3202, 1592,
	1595, 3171, 1584, 1412, 766, 776, 1231, 1232, 1233, 1230,
	196, 1158, 2888, 2813, 767, 2648, 768, 772, 775, 771,
	769, 770, 2677, 2764, 3278, 3054, 3055, 138, 2763, 3223,
	2757, 3056, 3057, 3058, 3059, 2724, 3060, 3061, 3062, 3063,
	3064, 3065, 3066, 3067, 3068, 3069, 2682, 2579, 2488, 1231,
	1232, 1233, 1230, 2430, 2326, 2970, 2676, 2972, 3242, 3243,
	2675, 2298, 2264, 1716, 3229, 1486, 196, 3236, 3230, 773,
	654, 3235, 3240, 3232, 2074, 2506, 1834, 1867, 1840, 1659,
	3253, 1834, 3254, 1231, 1232, 1233, 1230, 1231, 1232, 1233,
	1230, 1610, 2144, 3829, 2674, 138, 1585, 1359, 1344, 1340,
	3258, 774, 138, 1339, 3935, 2673, 1338, 3261, 3262, 3263,
	1337, 1336, 1523, 1335, 1334, 138, 1333, 1332, 138, 138,
	3267, 1231, 1232, 1233, 1230, 2063, 3273, 3024, 2672, 1331,
	1330, 138, 1231, 1232, 1233, 1230, 1329, 1328, 1327, 1326,
	2086, 3329, 1325, 1324, 3331, 1323, 1322, 3170, 1321, 3291,
	1320, 3046, 3172, 3173, 1319, 1231, 1232, 1233, 1230, 1318,
	3292, 3293, 3297, 3577, 3296, 1317, 3310, 1316, 1313, 1312,
	1245, 1244, 1254, 1255, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1246, 1311, 3302, 1309, 1308, 654, 2003, 3333, 2227,
	1307, 1304, 1297, 1296, 2632, 1294, 1293, 3366, 3584, 1292,
	1291, 1290, 3933, 2669, 1289, 3338, 1288, 1287, 3199, 1286,
	1285, 1284, 3341, 2470, 2022, 3385, 2668, 1245, 1244, 1254,
	1255, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1246, 2340,
	1231, 1232, 1233, 1230, 1283, 1278, 3322, 3328, 3403, 2730,
	3326, 1158, 1277, 1231, 1232, 1233, 1230, 1276, 1275, 1195,
	3193, 3892, 2667, 1141, 1158, 1254, 1255, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1246, 1158, 3827, 3450, 3249, 3250,
	3825, 1517, 3823, 3436, 2330, 2312, 3355, 1183, 3244, 1231,
	1232, 1233, 1230, 3252, 3387, 2745, 2499, 3357, 2117, 1194,
	654, 2921, 2003, 2930, 3256, 2925, 1158, 121, 2923, 3257,
	2926, 1044, 2920, 2924, 3394, 3404, 3396, 2661, 1044, 3255,
	3200, 2929, 3383, 2922, 3426, 2651, 2919, 3473, 3443, 3433,
	3384, 2927, 3390, 2460, 2461, 3474, 217, 2592, 2582, 2825,
	1406, 2841, 2842, 3138, 1231, 1232, 1233, 1230, 64, 1158,
	3465, 3462, 1231, 1232, 1233, 1230, 2857, 2858, 3475, 1515,
	3445, 3442, 63, 1895, 1896, 3452, 3189, 3440, 3190, 3449,
	2912, 3294, 3295, 656, 3005, 2398, 2627, 3446, 3454, 3268,
	3457, 1729, 2895, 1992, 3472, 3460, 3459, 1570, 3512, 2769,
	3463, 3456, 3466, 3464, 3467, 2577, 2616, 3519, 1890, 1891,
	1892, 1158, 3493, 1231, 1232, 1233, 1230, 1623, 1231, 1232,
	1233, 1230, 2837, 2912, 657, 2597, 2598, 2285, 1604, 2838,
	2839, 2840, 2076, 1158, 1517, 1517, 1189, 3112, 658, 3149,
	3105, 2791, 2765, 2350, 3489, 3517, 3518, 3490, 2321, 1899,
	1866, 3556, 3944, 3556, 1777, 1776, 1355, 1356, 2021, 3260,
	1353, 1354, 1351, 1352, 1349, 1350, 1158, 3573, 1158, 3550,
	3551, 3733, 3220, 2442, 2437, 2004, 3479, 3576, 1472, 3578,
	1471, 1222, 2953, 2286, 2146, 1517, 1424, 3526, 1397, 1447,
	3524, 3553, 3912, 3525, 3910, 3870, 3547, 3544, 3847, 3846,
	3844, 3561, 3789, 654, 3750, 1158, 1158, 3535, 3636, 1158,
	1158, 3635, 1515, 1727, 3560, 3549, 3574, 3485, 3546, 3311,
	3287, 3521, 3387, 3286, 3271, 2383, 2353, 3624, 3572, 1625,
	1680, 3270, 1680, 138, 3619, 2963, 138, 138, 3582, 138,
	1901, 1422, 3633, 3609, 3610, 3581, 3589, 3620, 3621, 3426,
	3330, 3639, 3640, 3386, 3433, 3587, 3585, 3937, 3936, 3303,
	3008, 2707, 3389, 1727, 1517, 2314, 3305, 2209, 1363, 3544,
	3544, 1180, 3936, 3544, 3544, 2954, 2955, 3937, 3603, 1042,
	3266, 1155, 138, 1439, 3666, 72, 3629, 1044, 2, 3625,
	1042, 204, 3, 3956, 3659, 3630, 3631, 3320, 3477, 892,
	893, 894, 895, 3957, 1155, 1, 138, 2688, 1838, 1357,
	896, 891, 1493, 2480, 2056, 3646, 1521, 1842, 898, 1761,
	2936, 3650, 2937, 2131, 3654, 3259, 3658, 2939, 2710, 957,
	2166, 2901, 2435, 2302, 3702, 3696, 3132, 1407, 3506, 950,
	1783, 1640, 1515, 1066, 1172, 1637, 1171, 1169, 3651, 1732,
	1158, 780, 2120, 2889, 2863, 3632, 3943, 3972, 3683, 2779,
	3904, 3719, 3575, 3725, 3946, 3690, 1657, 764, 2784, 2785,
	3697, 3838, 3755, 3493, 3694, 3908, 3699, 1257, 3698, 1261,
	3757, 3649, 2171, 1227, 2985, 976, 3711, 1263, 3715, 821,
	3498, 791, 3499, 1158, 1295, 1258, 1260, 1256, 1517, 1259,
	1245, 1244, 1254, 1255, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1246, 1616, 3052, 1680, 3732, 1245, 1244, 1254, 1255,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1246, 3050, 1068,
	790, 3741, 1245, 1244, 1254, 1255, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1246, 3778, 3352, 2735, 3768, 3637, 1834,
	2956, 3704, 1065, 977, 2103, 3752, 3751, 3544, 3647, 1571,
	1158, 1575, 2349, 1834, 3712, 3808, 3468, 3583, 3185, 3470,
	1044, 3570, 3571, 2799, 1599, 3790, 1515, 3803, 3398, 3502,
	3500, 3501, 3743, 3776, 697, 2035, 1757, 3476, 628, 1026,
	3623, 2116, 698, 1754, 3781, 2329, 3784, 1756, 1753, 1755,
	1759, 1760, 3861, 3807, 3792, 1758, 3735, 1158, 930, 3785,
	2311, 931, 923, 2753, 2752, 1517, 1697, 1236, 3832, 1714,
	3835, 3070, 3141, 3071, 3544, 3822, 3824, 3826, 3828, 3806,
	1273, 736, 2196, 2732, 3836, 3815, 3421, 2949, 3153, 71,
	70, 3801, 69, 68, 225, 3821, 782, 224, 3667, 3539,
	3834, 3948, 3048, 762, 761, 760, 759, 758, 757, 3843,
	3841, 2453, 1517, 2454, 2452, 3702, 2450, 2449, 2017, 2016,
	2083, 3544, 3147, 2828, 2823, 3854, 1943, 1941, 1484, 2378,
	2385, 3880, 1940, 3889, 3818, 3819, 3600, 3888, 3871, 2873,
	3492, 1889, 3873, 1515, 2374, 3874, 3875, 1960, 1761, 3831,
	2844, 1957, 1956, 2836, 3596, 3869, 1245, 1244, 1254, 1255,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1246, 3590, 1988,
	3897, 3700, 3898, 3555, 3899, 3901, 3900, 3405, 3911, 3406,
	3913, 3914, 3412, 2320, 1091, 3909, 3907, 1087, 1089, 1090,
	1515, 1158, 3768, 3916, 1088, 2637, 3872, 3238, 2355, 1764,
	1765, 1766, 1767, 1768, 1769, 1762, 1763, 3107, 2294, 2293,
	3725, 2291, 3925, 2290, 1382, 2063, 3777, 3857, 3926, 3928,
	3927, 3520, 3934, 3931, 3942, 3932, 3950, 2504, 2502, 3949,
	1138, 3251, 3247, 2128, 2142, 3938, 3939, 3940, 3941, 3004,
	2473, 2018, 2014, 3961, 2013, 1158, 3954, 2903, 2443, 3674,
	1894, 924, 2309, 41, 118, 3923, 3962, 3807, 3963, 3965,
	105, 179, 56, 178, 55, 3971, 3974, 116, 176, 54,
	200, 61, 191, 162, 100, 99, 115, 174, 53, 209,
	208, 964, 211, 210, 207, 2555, 2556, 206, 192, 3981,
	1559, 205, 3848, 3559, 886, 183, 44, 3950, 3988, 193,
	3949, 3987, 43, 180, 42, 2021, 106, 3974, 3989, 1680,
	57, 40, 3691, 3993, 138, 1757, 39, 38, 136, 34,
	13, 12, 1754, 35, 22, 21, 1756, 1753, 1755, 1759,
	1760, 1644, 20, 122, 1758, 26, 32, 31, 131, 130,
	2448, 2624, 196, 30, 129, 3410, 3299, 128, 127, 3363,
	3364, 3365, 126, 961, 962, 3369, 3370, 125, 124, 123,
	29, 19, 48, 3174, 1004, 1245, 1244, 1254, 1255, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1246, 2455, 2459, 2460,
	2461, 2456, 2464, 2457, 2462, 47, 3422, 2458, 46, 2463,
	2455, 2459, 2460, 2461, 2456, 2464, 2457, 2462, 9, 3413,
	2458, 119, 2463, 114, 112, 28, 113, 2193, 110, 109,
	3408, 108, 107, 103, 101, 3430, 3431, 83, 82, 144,
	145, 3409, 146, 147, 81, 96, 95, 94, 93, 92,
	1282, 1245, 1244, 1254, 1255, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1246, 91, 89, 90, 975, 1006, 80, 79,
	1005, 78, 77, 76, 98, 104, 102, 87, 3414, 97,
	88, 86, 2063, 85, 84, 75, 74, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1764, 1765,
	1766, 1767, 1768, 1769, 1762, 1763, 73, 160, 990, 159,
	158, 161, 189, 198, 190, 120, 157, 965, 3814, 156,
	154, 155, 153, 152, 151, 150, 149, 148, 49, 50,
	51, 52, 170, 169, 188, 182, 181, 171, 173, 175,
	172, 67, 177, 167, 967, 165, 168, 166, 164, 66,
	11, 117, 18, 25, 4, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 709,
	708, 715, 705, 0, 3429, 0, 2364, 0, 0, 0,
	0, 712, 713, 0, 714, 718, 2063, 0, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 3885,
	0, 3418, 184, 185, 186, 0, 0, 0, 0, 989,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3415, 3419, 3417, 3416, 0, 0, 0,
	0, 986, 0, 0, 0, 194, 0, 0, 0, 0,
	0, 0, 0, 960, 727, 0, 0, 729, 0, 0,
	0, 0, 728, 0, 966, 999, 132, 0, 0, 0,
	187, 0, 133, 3424, 3425, 0, 0, 0, 0, 3885,
	0, 0, 0, 3626, 0, 0, 0, 3627, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2021, 2021, 2021, 2021, 2021, 2021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2021, 0, 0,
	0, 3432, 0, 0, 996, 1000, 0, 3885, 0, 134,
	0, 0, 0, 3411, 0, 0, 0, 0, 0, 3423,
	0, 0, 60, 0, 983, 0, 981, 985, 1003, 0,
	0, 0, 982, 979, 978, 0, 984, 969, 970, 968,
	971, 972, 973, 974, 0, 1001, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 998,
	0, 0, 0, 3991, 0, 0, 0, 0, 0, 3608,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 702, 701, 0, 0, 138, 0, 0, 0, 1989,
	138, 707, 0, 0, 1950, 993, 0, 0, 0, 0,
	0, 992, 0, 711, 0, 0, 142, 197, 0, 143,
	726, 138, 0, 0, 163, 0, 988, 704, 0, 58,
	0, 694, 138, 0, 1992, 1959, 0, 0, 0, 0,
	0, 0, 0, 0, 1993, 1994, 0, 0, 0, 0,
	0, 0, 0, 0, 3744, 0, 0, 0, 0, 3428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1966, 0,
	0, 0, 0, 0, 0, 135, 45, 0, 0, 0,
	0, 0, 59, 0, 991, 0, 5, 0, 0, 0,
	963, 958, 0, 959, 0, 0, 0, 0, 0, 0,
	139, 140, 0, 3791, 141, 0, 0, 0, 3795, 3796,
	0, 0, 0, 0, 0, 3427, 0, 0, 0, 706,
	710, 716, 0, 717, 719, 0, 0, 720, 721, 722,
	0, 0, 724, 725, 0, 0, 1982, 0, 0, 3816,
	1231, 1232, 1233, 1230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	0, 138, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 2021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1949, 1951,
	1948, 0, 138, 1945, 0, 0, 0, 0, 1970, 1761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1976,
	0, 0, 0, 0, 0, 0, 0, 1961, 0, 1944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1964,
	1998, 0, 0, 1965, 1967, 1969, 0, 1971, 1972, 1973,
	1977, 1978, 1979, 1981, 1984, 1985, 1986, 0, 3918, 3919,
	0, 0, 0, 0, 1974, 1983, 1975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1953, 0, 703, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1946, 1947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1963, 0, 0, 0, 0, 0, 0, 1962,
	0, 0, 0, 0, 0, 0, 1757, 0, 0, 0,
	0, 0, 0, 1754, 0, 0, 0, 1756, 1753, 1755,
	1759, 1760, 0, 1980, 0, 1758, 0, 0, 0, 0,
	0, 0, 1968, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1996, 1995, 0, 0, 0,
	0, 0, 0, 0, 1118, 1122, 1124, 1126, 1128, 1129,
	1131, 0, 1136, 1132, 1133, 1134, 1135, 0, 1113, 1114,
	1115, 1116, 1093, 1094, 1119, 0, 1096, 0, 1098, 1099,
	1100, 1101, 1097, 1102, 1103, 1104, 1105, 1106, 1109, 1111,
	1107, 1108, 1117, 0, 0, 0, 0, 0, 1955, 0,
	1121, 1123, 1125, 1127, 1130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1991, 0, 0, 1997, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1764,
	1765, 1766, 1767, 1768, 1769, 1762, 1763, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 751, 2021, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 789, 555,
	506, 423, 375, 573, 572, 0, 0, 857, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 743, 0, 0, 779, 833, 832, 766, 776,
	0, 0, 303, 223, 501, 621, 503, 502, 767, 0,
	768, 772, 775, 771, 769, 770, 0, 848, 0, 0,
	2633, 2634, 0, 0, 735, 747, 0, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 745, 0, 0, 0, 138, 799, 0, 746,
	0, 0, 794, 773, 777, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 774, 797, 801, 324, 871,
	795, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 872, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 792,
	0, 618, 138, 457, 0, 0, 855, 0, 0, 0,
	428, 0, 0, 357, 1120, 0, 0, 796, 0, 412,
	393, 868, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 1785, 1784, 1786, 469, 358,
	359, 0, 337, 285, 286, 637, 852, 389, 583, 616,
	617, 508, 0, 867, 847, 849, 850, 854, 858, 859,
	860, 861, 862, 864, 866, 870, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 869, 543, 520,
	546, 461, 523, 522, 0, 138, 557, 800, 558, 559,
	379, 380, 381, 382, 856, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 878, 851, 877, 879, 880, 876, 881,
	882, 863, 756, 0, 807, 874, 873, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 840, 814, 815, 816, 753, 817, 811, 812, 754,
	813, 841, 805, 837, 838, 781, 808, 818, 836, 819,
	839, 842, 843, 883, 884, 825, 809, 251, 885, 822,
	844, 835, 834, 820, 806, 845, 846, 788, 783, 823,
	824, 810, 828, 829, 830, 755, 802, 803, 804, 826,
	827, 784, 785, 786, 787, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 831, 626, 427, 0, 627, 365, 414, 432, 421,
	798, 638, 504, 505, 639, 615, 0, 748, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 751, 0, 0, 0, 330, 1835, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 789, 555, 506,
	423, 375, 573, 572, 0, 0, 857, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 2047, 0,
	0, 743, 0, 0, 779, 833, 832, 766, 776, 0,
	0, 303, 223, 501, 621, 503, 502, 767, 0, 768,
	772, 775, 771, 769, 770, 0, 848, 0, 0, 0,
	0, 0, 0, 735, 747, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 745, 0, 0, 0, 0, 799, 0, 746, 0,
	0, 2048, 773, 777, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 774, 797, 801, 324, 871, 795,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 872, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 792, 0,
	618, 0, 457, 0, 0, 855, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 796, 0, 412, 393,
	868, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 642, 643, 644, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 637, 852, 389, 583, 616, 617,
	508, 0, 867, 847, 849, 850, 854, 858, 859, 860,
	861, 862, 864, 866, 870, 636, 0, 562, 577, 640,
	576, 633, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 869, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 800, 558, 559, 379,
	380, 381, 382, 856, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 645, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 878, 851, 877, 879, 880, 876, 881, 882,
	863, 756, 0, 807, 874, 873, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 634, 631, 440, 635, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	840, 814, 815, 816, 753, 817, 811, 812, 754, 813,
	841, 805, 837, 838, 781, 808, 818, 836, 819, 839,
	842, 843, 883, 884, 825, 809, 251, 885, 822, 844,
	835, 834, 820, 806, 845, 846, 788, 783, 823, 824,
	810, 828, 829, 830, 755, 802, 803, 804, 826, 827,
	784, 785, 786, 787, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 632, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	831, 626, 427, 0, 627, 365, 414, 432, 421, 0,
	638, 504, 505, 639, 615, 0, 748, 200, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 1266, 555, 506, 423, 375,
	573, 572, 0, 0, 857, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 743,
	0, 0, 779, 833, 832, 766, 776, 0, 0, 303,
	223, 501, 621, 503, 502, 767, 0, 768, 772, 775,
	771, 769, 770, 0, 848, 0, 0, 0, 0, 0,
	0, 735, 747, 0, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 799, 0, 746, 0, 0, 794,
	773, 777, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 774, 797, 801, 324, 871, 795, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 872, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 792, 0, 618, 0,
	457, 0, 0, 855, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 796, 0, 412, 393, 868, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 642,
	643, 644, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 637, 852, 389, 583, 616, 617, 508, 0,
	867, 847, 849, 850, 854, 858, 859, 860, 861, 862,
	864, 866, 870, 636, 0, 562, 577, 640, 576, 633,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 869, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 800, 558, 559, 379, 380, 381,
	382, 856, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 645,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	878, 851, 877, 879, 880, 876, 881, 882, 863, 756,
	0, 807, 874, 873, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 634, 631, 440, 635, 0, 287, 514,
	361, 163, 404, 335, 579, 580, 0, 0, 840, 814,
	815, 816, 753, 817, 811, 812, 754, 813, 841, 805,
	837, 838, 781, 808, 818, 836, 819, 839, 842, 843,
	883, 884, 825, 809, 251, 885, 822, 844, 835, 834,
	820, 806, 845, 846, 788, 783, 823, 824, 810, 828,
	829, 830, 755, 802, 803, 804, 826, 827, 784, 785,
	786, 787, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 632, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 831, 626,
	427, 0, 627, 365, 414, 432, 421, 798, 638, 504,
	505, 639, 615, 0, 748, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 330, 3990, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 789, 555, 506, 423, 375, 573,
	572, 0, 0, 857, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 743, 0,
	0, 779, 833, 832, 766, 776, 0, 0, 303, 223,
	501, 621, 503, 502, 767, 0, 768, 772, 775, 771,
	769, 770, 0, 848, 0, 0, 0, 0, 0, 0,
	735, 747, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 799, 0, 746, 0, 0, 794, 773,
	777, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 774, 797, 801, 324, 871, 795, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 872, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 792, 0, 618, 0, 457,
	0, 0, 855, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 796, 0, 412, 393, 868, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 852, 389, 583, 616, 617, 508, 0, 867,
	847, 849, 850, 854, 858, 859, 860, 861, 862, 864,
	866, 870, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 869, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 800, 558, 559, 379, 380, 381, 382,
	856, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 878,
	851, 877, 879, 880, 876, 881, 882, 863, 756, 0,
	807, 874, 873, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 840, 814, 815,
	816, 753, 817, 811, 812, 754, 813, 841, 805, 837,
	838, 781, 808, 818, 836, 819, 839, 842, 843, 883,
	884, 825, 809, 251, 885, 822, 844, 835, 834, 820,
	806, 845, 846, 788, 783, 823, 824, 810, 828, 829,
	830, 755, 802, 803, 804, 826, 827, 784, 785, 786,
	787, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 831, 626, 427,
	0, 627, 365, 414, 432, 421, 798, 638, 504, 505,
	639, 615, 0, 748, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 789, 555, 506, 423, 375, 573, 572,
	0, 0, 857, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 743, 0, 0,
	779, 833, 832, 766, 776, 0, 0, 303, 223, 501,
	621, 503, 502, 767, 0, 768, 772, 775, 771, 769,
	770, 0, 848, 0, 0, 0, 0, 0, 0, 735,
	747, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 745, 0, 0,
	0, 0, 799, 0, 746, 0, 0, 794, 773, 777,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	774, 797, 801, 324, 871, 795, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 872, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 792, 0, 618, 0, 457, 0,
	0, 855, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 796, 0, 412, 393, 868, 3886, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 642, 643, 644,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	637, 852, 389, 583, 616, 617, 508, 0, 867, 847,
	849, 850, 854, 858, 859, 860, 861, 862, 864, 866,
	870, 636, 0, 562, 577, 640, 576, 633, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 869, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 800, 558, 559, 379, 380, 381, 382, 856,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 645, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 878, 851,
	877, 879, 880, 876, 881, 882, 863, 756, 0, 807,
	874, 873, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 634, 631, 440, 635, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 840, 814, 815, 816,
	753, 817, 811, 812, 754, 813, 841, 805, 837, 838,
	781, 808, 818, 836, 819, 839, 842, 843, 883, 884,
	825, 809, 251, 885, 822, 844, 835, 834, 820, 806,
	845, 846, 788, 783, 823, 824, 810, 828, 829, 830,
	755, 802, 803, 804, 826, 827, 784, 785, 786, 787,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	632, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 831, 626, 427, 0,
	627, 365, 414, 432, 421, 798, 638, 504, 505, 639,
	615, 0, 748, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 330, 1835, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 789, 555, 506, 423, 375, 573, 572, 0,
	0, 857, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 743, 0, 0, 779,
	833, 832, 766, 776, 0, 0, 303, 223, 501, 621,
	503, 502, 767, 0, 768, 772, 775, 771, 769, 770,
	0, 848, 0, 0, 0, 0, 0, 0, 735, 747,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 799, 0, 746, 0, 0, 794, 773, 777, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 774,
	797, 801, 324, 871, 795, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 872, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 792, 0, 618, 0, 457, 0, 0,
	855, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 796, 0, 412, 393, 868, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	852, 389, 583, 616, 617, 508, 0, 867, 847, 849,
	850, 854, 858, 859, 860, 861, 862, 864, 866, 870,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 869, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 800, 558, 559, 379, 380, 381, 382, 856, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 878, 851, 877,
	879, 880, 876, 881, 882, 863, 756, 0, 807, 874,
	873, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 840, 814, 815, 816, 753,
	817, 811, 812, 754, 813, 841, 805, 837, 838, 781,
	808, 818, 836, 819, 839, 842, 843, 883, 884, 825,
	809, 251, 885, 822, 844, 835, 834, 820, 806, 845,
	846, 788, 783, 823, 824, 810, 828, 829, 830, 755,
	802, 803, 804, 826, 827, 784, 785, 786, 787, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 831, 626, 427, 0, 627,
	365, 414, 432, 421, 798, 638, 504, 505, 639, 615,
	0, 748, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 789, 555, 506, 423, 375, 573, 572, 0, 0,
	857, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 743, 0, 0, 779, 833,
	832, 766, 776, 0, 0, 303, 223, 501, 621, 503,
	502, 767, 0, 768, 772, 775, 771, 769, 770, 0,
	848, 0, 0, 0, 0, 0, 0, 735, 747, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 745, 1554, 0, 0, 0,
	799, 0, 746, 0, 0, 794, 773, 777, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 774, 797,
	801, 324, 871, 795, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	872, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 792, 0, 618, 0, 457, 0, 0, 855,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	796, 0, 412, 393, 868, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 642, 643, 644, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 637, 852,
	389, 583, 616, 617, 508, 0, 867, 847, 849, 850,
	854, 858, 859, 860, 861, 862, 864, 866, 870, 636,
	0, 562, 577, 640, 576, 633, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	869, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	800, 558, 559, 379, 380, 381, 382, 856, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 645, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 878, 851, 877, 879,
	880, 876, 881, 882, 863, 756, 0, 807, 874, 873,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 634,
	631, 440, 635, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 840, 814, 815, 816, 753, 817,
	811, 812, 754, 813, 841, 805, 837, 838, 781, 808,
	818, 836, 819, 839, 842, 843, 883, 884, 825, 809,
	251, 885, 822, 844, 835, 834, 820, 806, 845, 846,
	788, 783, 823, 824, 810, 828, 829, 830, 755, 802,
	803, 804, 826, 827, 784, 785, 786, 787, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 632, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 831, 626, 427, 0, 627, 365,
	414, 432, 421, 0, 638, 504, 505, 639, 615, 798,
	748, 0, 2217, 0, 0, 0, 0, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 789, 555, 506, 423,
	375, 573, 572, 0, 0, 857, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	743, 0, 0, 779, 833, 832, 766, 776, 0, 0,
	303, 223, 501, 621, 503, 502, 767, 0, 768, 772,
	775, 771, 769, 770, 0, 848, 0, 0, 0, 0,
	0, 0, 735, 747, 0, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 799, 0, 746, 0, 0,
	794, 773, 777, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 774, 797, 801, 324, 871, 795, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 872, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 792, 0, 618,
	0, 457, 0, 0, 855, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 796, 0, 412, 393, 868,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 852, 389, 583, 616, 617, 508,
	0, 867, 847, 849, 850, 854, 858, 859, 860, 861,
	862, 864, 866, 870, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 869, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 800, 558, 559, 379, 380,
	381, 382, 856, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 878, 851, 877, 879, 880, 876, 881, 882, 863,
	756, 0, 807, 874, 873, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 840,
	814, 815, 816, 753, 817, 811, 812, 754, 813, 841,
	805, 837, 838, 781, 808, 818, 836, 819, 839, 842,
	843, 883, 884, 825, 809, 251, 885, 822, 844, 835,
	834, 820, 806, 845, 846, 788, 783, 823, 824, 810,
	828, 829, 830, 755, 802, 803, 804, 826, 827, 784,
	785, 786, 787, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 831,
	626, 427, 0, 627, 365, 414, 432, 421, 798, 638,
	504, 505, 639, 615, 0, 748, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 789, 555, 506, 423, 375,
	573, 572, 0, 0, 857, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 743,
	0, 0, 779, 833, 832, 766, 776, 0, 0, 303,
	223, 501, 621, 503, 502, 767, 0, 768, 772, 775,
	771, 769, 770, 0, 848, 0, 0, 0, 0, 0,
	0, 735, 747, 0, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 745,
	1828, 0, 0, 0, 799, 0, 746, 0, 0, 794,
	773, 777, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 774, 797, 801, 324, 871, 795, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 872, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 792, 0, 618, 0,
	457, 0, 0, 855, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 796, 0, 412, 393, 868, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 642,
	643, 644, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 637, 852, 389, 583, 616, 617, 508, 0,
	867, 847, 849, 850, 854, 858, 859, 860, 861, 862,
	864, 866, 870, 636, 0, 562, 577, 640, 576, 633,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 869, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 800, 558, 559, 379, 380, 381,
	382, 856, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 645,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	878, 851, 877, 879, 880, 876, 881, 882, 863, 756,
	0, 807, 874, 873, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 634, 631, 440, 635, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 840, 814,
	815, 816, 753, 817, 811, 812, 754, 813, 841, 805,
	837, 838, 781, 808, 818, 836, 819, 839, 842, 843,
	883, 884, 825, 809, 251, 885, 822, 844, 835, 834,
	820, 806, 845, 846, 788, 783, 823, 824, 810, 828,
	829, 830, 755, 802, 803, 804, 826, 827, 784, 785,
	786, 787, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 632, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 831, 626,
	427, 0, 627, 365, 414, 432, 421, 798, 638, 504,
	505, 639, 615, 0, 748, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 789, 555, 506, 423, 375, 573,
	572, 0, 0, 857, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 743, 0,
	0, 779, 833, 832, 766, 776, 0, 0, 303, 223,
	501, 621, 503, 502, 767, 0, 768, 772, 775, 771,
	769, 770, 0, 848, 0, 0, 0, 0, 0, 0,
	735, 747, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 799, 0, 746, 0, 0, 794, 773,
	777, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 774, 797, 801, 324, 871, 795, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 872, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 792, 0, 618, 0, 457,
	0, 0, 855, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 796, 0, 412, 393, 868, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 852, 389, 583, 616, 617, 508, 0, 867,
	847, 849, 850, 854, 858, 859, 860, 861, 862, 864,
	866, 870, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 869, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 800, 558, 559, 379, 380, 381, 382,
	856, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 878,
	851, 877, 879, 880, 876, 881, 882, 863, 756, 0,
	807, 874, 873, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 840, 814, 815,
	816, 753, 817, 811, 812, 754, 813, 841, 805, 837,
	838, 781, 808, 818, 836, 819, 839, 842, 843, 883,
	884, 825, 809, 251, 885, 822, 844, 835, 834, 820,
	806, 845, 846, 788, 783, 823, 824, 810, 828, 829,
	830, 755, 802, 803, 804, 826, 827, 784, 785, 786,
	787, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 831, 626, 427,
	0, 627, 365, 414, 432, 421, 798, 638, 504, 505,
	639, 615, 0, 748, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 789, 555, 506, 423, 375, 573, 572,
	0, 0, 857, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 743, 0, 0,
	779, 833, 832, 766, 776, 0, 0, 303, 223, 501,
	621, 503, 502, 2685, 0, 2686, 772, 775, 771, 769,
	770, 0, 848, 0, 0, 0, 0, 0, 0, 735,
	747, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 745, 0, 0,
	0, 0, 799, 0, 746, 0, 0, 794, 773, 777,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	774, 797, 801, 324, 871, 795, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 872, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 792, 0, 618, 0, 457, 0,
	0, 855, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 796, 0, 412, 393, 868, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 642, 643, 644,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	637, 852, 389, 583, 616, 617, 508, 0, 867, 847,
	849, 850, 854, 858, 859, 860, 861, 862, 864, 866,
	870, 636, 0, 562, 577, 640, 576, 633, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 869, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 800, 558, 559, 379, 380, 381, 382, 856,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 645, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 878, 851,
	877, 879, 880, 876, 881, 882, 863, 756, 0, 807,
	874, 873, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 634, 631, 440, 635, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 840, 814, 815, 816,
	753, 817, 811, 812, 754, 813, 841, 805, 837, 838,
	781, 808, 818, 836, 819, 839, 842, 843, 883, 884,
	825, 809, 251, 885, 822, 844, 835, 834, 820, 806,
	845, 846, 788, 783, 823, 824, 810, 828, 829, 830,
	755, 802, 803, 804, 826, 827, 784, 785, 786, 787,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	632, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 831, 626, 427, 0,
	627, 365, 414, 432, 421, 798, 638, 504, 505, 639,
	615, 0, 748, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 1698, 0, 0, 0, 751, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 789, 555, 506, 423, 375, 573, 572, 0,
	0, 857, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 743, 0, 0, 779,
	833, 832, 766, 776, 0, 0, 303, 223, 501, 621,
	503, 502, 767, 0, 768, 772, 775, 771, 769, 770,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 799, 0, 746, 0, 0, 794, 773, 777, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 774,
	797, 801, 324, 871, 795, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 872, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 792, 0, 618, 0, 457, 0, 0,
	855, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 796, 0, 412, 393, 868, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 1699, 1700, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	852, 389, 583, 616, 617, 508, 0, 867, 847, 849,
	850, 854, 858, 859, 860, 861, 862, 864, 866, 870,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 869, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 800, 558, 559, 379, 380, 381, 382, 856, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 878, 851, 877,
	879, 880, 876, 881, 882, 863, 756, 0, 807, 874,
	873, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 840, 814, 815, 816, 753,
	817, 811, 812, 754, 813, 841, 805, 837, 838, 781,
	808, 818, 836, 819, 839, 842, 843, 883, 884, 825,
	809, 251, 885, 822, 844, 835, 834, 820, 806, 845,
	846, 788, 783, 823, 824, 810, 828, 829, 830, 755,
	802, 803, 804, 826, 827, 784, 785, 786, 787, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 831, 626, 427, 0, 627,
	365, 414, 432, 421, 798, 638, 504, 505, 639, 615,
	0, 748, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 789, 555, 506, 423, 375, 573, 572, 0, 0,
	857, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 743, 0, 0, 779, 833,
	832, 766, 776, 0, 0, 303, 223, 501, 621, 503,
	502, 767, 0, 768, 772, 775, 771, 769, 770, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 745, 0, 0, 0, 0,
	799, 0, 746, 0, 0, 794, 773, 777, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 774, 797,
	801, 324, 871, 795, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	872, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 792, 0, 618, 0, 457, 0, 0, 855,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	796, 0, 412, 393, 868, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 642, 643, 644, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 637, 852,
	389, 583, 616, 617, 508, 0, 867, 847, 849, 850,
	854, 858, 859, 860, 861, 862, 864, 866, 870, 636,
	0, 562, 577, 640, 576, 633, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	869, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	800, 558, 559, 379, 380, 381, 382, 856, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 645, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 878, 851, 877, 879,
	880, 876, 881, 882, 863, 756, 0, 807, 874, 873,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 634,
	631, 440, 635, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 840, 814, 815, 816, 753, 817,
	811, 812, 754, 813, 841, 805, 837, 838, 781, 808,
	818, 836, 819, 839, 842, 843, 883, 884, 825, 809,
	251, 885, 822, 844, 835, 834, 820, 806, 845, 846,
	788, 783, 823, 824, 810, 828, 829, 830, 755, 802,
	803, 804, 826, 827, 784, 785, 786, 787, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 632, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 831, 626, 427, 0, 627, 365,
	414, 432, 421, 798, 638, 504, 505, 639, 615, 0,
	748, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	789, 555, 506, 423, 375, 573, 572, 0, 0, 857,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 779, 833, 832,
	766, 776, 0, 0, 303, 223, 501, 621, 503, 502,
	767, 0, 768, 772, 775, 771, 769, 770, 0, 848,
	0, 0, 0, 0, 0, 0, 735, 747, 0, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 799,
	0, 746, 0, 0, 794, 773, 777, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 774, 797, 801,
	324, 871, 795, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 872,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 792, 0, 618, 0, 457, 0, 0, 855, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 796,
	0, 412, 393, 868, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 852, 389,
	583, 616, 617, 508, 0, 867, 847, 849, 850, 854,
	858, 859, 860, 861, 862, 864, 866, 870, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 869,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 800,
	558, 559, 379, 380, 381, 382, 856, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 878, 851, 877, 879, 880,
	876, 881, 882, 863, 756, 0, 807, 874, 873, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 840, 814, 815, 816, 753, 817, 811,
	812, 754, 813, 841, 805, 837, 838, 781, 808, 818,
	836, 819, 839, 842, 843, 883, 884, 825, 809, 251,
	885, 822, 844, 835, 834, 820, 806, 845, 846, 788,
	783, 823, 824, 810, 828, 829, 830, 755, 802, 803,
	804, 826, 827, 784, 785, 786, 787, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 831, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 0, 748,
	200, 61, 191, 162, 0, 0, 0, 0, 0, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 192, 0,
	0, 0, 0, 0, 0, 183, 0, 330, 0, 193,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 136, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 161, 189, 198, 190, 120, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 215, 0, 0, 0,
	428, 0, 0, 357, 188, 182, 181, 473, 0, 412,
	393, 227, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 593, 594, 595, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 452, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 218, 565, 568, 498, 228, 0, 562, 577,
	535, 576, 229, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 134,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 226, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 233, 298, 440, 234,
	0, 287, 514, 361, 163, 404, 335, 579, 580, 58,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 230, 45, 216, 219, 221,
	220, 0, 59, 563, 575, 609, 5, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	139, 231, 504, 505, 232, 615, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 136, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 2366, 2369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 2370, 457,
	0, 0, 0, 2365, 0, 2364, 428, 2362, 2367, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 2368, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	163, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 0, 0, 222, 0, 0,
	766, 776, 0, 0, 303, 223, 501, 621, 503, 502,
	767, 0, 768, 772, 775, 771, 769, 770, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 774, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 200, 61,
	191, 162, 0, 0, 0, 0, 0, 0, 391, 664,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 668, 669, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 665, 667, 308, 480, 405, 679, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 2528, 2531, 2532, 2533,
	2534, 2535, 2536, 0, 2541, 2537, 2538, 2539, 2540, 0,
	2523, 2524, 2525, 2526, 1093, 2507, 2529, 0, 2508, 387,
	2509, 2510, 2511, 2512, 1097, 2513, 2514, 2515, 2516, 2517,
	2520, 2521, 2518, 2519, 2527, 399, 364, 400, 347, 377,
	376, 378, 1121, 1123, 1125, 1127, 1130, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 2522, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 2530, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 2366, 2369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 2370, 457, 0, 0, 0, 2365, 0, 2364,
	428, 2362, 2367, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 2368, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 2387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 2386, 457,
	0, 0, 0, 2392, 2389, 2391, 428, 0, 2390, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 2384,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 2387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 2386, 457, 0, 0, 0, 2392,
	2389, 2391, 428, 0, 2390, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	2087, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 2088, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 1231, 1232,
	1233, 1230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 200, 638,
	504, 505, 639, 615, 0, 0, 0, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 136, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 2137, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 200, 638,
	504, 505, 639, 615, 0, 0, 0, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 136, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 2123, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 1025, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	1032, 1033, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1036, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 1019, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 1006, 455, 297, 1005, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 1023, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 1024,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 1027, 558, 559, 379, 380, 381, 382, 341, 584,
	1022, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 1034, 1020, 1030, 1021, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 1031, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	1018, 414, 432, 421, 200, 638, 504, 505, 639, 615,
	0, 0, 0, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 136, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2019, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 163, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 1032, 1033, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	1006, 455, 297, 1005, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 1034, 2040, 1030,
	2041, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	1031, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 2905, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 2908,
	0, 0, 0, 2907, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	1520, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	1518, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 1514, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 1518, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3945, 0, 222,
	833, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1518, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 2431, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 955, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	1518, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1728, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	2469, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 2471, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 2087, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 2088, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 3116, 3118,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 2492, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 1518, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 651, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 833, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3924, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 3703, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 3833, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3545, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3718, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 3634, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 3150, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2019, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 3356, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 1518, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	2471, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 2827, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 2589, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	2548, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 2322, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 1874, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 2002, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 1518, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 1907, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 1547, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 662, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 955, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 632, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	0, 638, 504, 505, 639, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 641, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 642, 643,
	644, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 637, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 636, 0, 562, 577, 640, 576, 633, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 645, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 634, 631, 440, 635, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 632, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 627, 365, 414, 432, 421, 0, 638, 504, 505,
	639, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 1497, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 641, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 642, 643, 644, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 637, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 636, 0,
	562, 577, 640, 576, 633, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 645, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 634, 631,
	440, 635, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 632, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 627, 365, 414,
	432, 421, 0, 638, 504, 505, 639, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 1495,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 641,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	642, 643, 644, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 637, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 636, 0, 562, 577, 640, 576,
	633, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	645, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 634, 631, 440, 635, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 632, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 627, 365, 414, 432, 421, 0, 638,
	504, 505, 639, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 641, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 730, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 642, 643, 644, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 637,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	636, 0, 562, 577, 640, 576, 633, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 645, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	634, 631, 440, 635, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 632,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 627,
	365, 414, 432, 421, 0, 638, 504, 505, 639, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 641, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 687, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 642, 643, 644, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 637, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 636, 0, 562, 577,
	640, 576, 633, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 688, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 645, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 634, 631, 440, 635,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	1110, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 1989, 451, 513, 632, 0, 1950, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 627, 365, 414, 432, 421,
	1110, 638, 504, 505, 639, 615, 0, 1992, 1959, 0,
	0, 0, 0, 0, 0, 0, 0, 1993, 1994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 1085, 0,
	0, 0, 0, 1958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 1122, 1124, 1126, 1128, 1129,
	1131, 1966, 1136, 1132, 1133, 1134, 1135, 0, 1113, 1114,
	1115, 1116, 1093, 1094, 1119, 0, 1096, 0, 1098, 1099,
	1100, 1101, 1097, 1102, 1103, 1104, 1105, 1106, 1109, 1111,
	1107, 1108, 1117, 0, 0, 0, 0, 0, 0, 0,
	1121, 1123, 1125, 1127, 1130, 0, 1989, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1982,
	0, 0, 0, 0, 0, 3554, 0, 0, 0, 1112,
	0, 1992, 0, 0, 1118, 1122, 1124, 1126, 1128, 1129,
	1131, 0, 1136, 1132, 1133, 1134, 1135, 0, 1113, 1114,
	1115, 1116, 1093, 1094, 1119, 0, 1096, 0, 1098, 1099,
	1100, 1101, 1097, 1102, 1103, 1104, 1105, 1106, 1109, 1111,
	1107, 1108, 1117, 0, 0, 196, 0, 0, 0, 0,
	1121, 1123, 1125, 1127, 1130, 1966, 0, 0, 0, 0,
	0, 1949, 2794, 1948, 0, 0, 2793, 0, 0, 0,
	0, 1970, 709, 708, 715, 705, 0, 0, 0, 0,
	0, 0, 1976, 0, 712, 713, 0, 714, 718, 1112,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 1964, 1998, 0, 0, 1965, 1967, 1969, 0,
	1971, 1972, 1973, 1977, 1978, 1979, 1981, 1984, 1985, 1986,
	0, 0, 0, 1982, 0, 0, 0, 1974, 1983, 1975,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 1953,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	729, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 1990, 0, 1992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1946, 1947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1970, 0, 0, 1987, 3724,
	0, 0, 0, 0, 0, 0, 1976, 0, 0, 1966,
	0, 0, 0, 0, 0, 1963, 0, 0, 0, 0,
	0, 0, 1962, 0, 0, 0, 1964, 1998, 0, 0,
	1965, 1967, 1969, 0, 1971, 1972, 1973, 1977, 1978, 1979,
	1981, 1984, 1985, 1986, 0, 0, 1980, 0, 0, 0,
	0, 1974, 1983, 1975, 0, 1968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1996, 1995,
	0, 0, 0, 0, 1120, 0, 0, 1982, 0, 0,
	0, 0, 0, 700, 702, 701, 0, 1990, 0, 0,
	1989, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	704, 1955, 0, 0, 0, 1992, 0, 0, 0, 0,
	0, 0, 1987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1963,
	0, 0, 0, 0, 0, 0, 1962, 0, 0, 1970,
	0, 0, 0, 1991, 1120, 0, 1997, 0, 0, 0,
	1976, 0, 0, 1989, 0, 0, 0, 0, 0, 1966,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 1968,
	1964, 1998, 0, 0, 1965, 1967, 1969, 0, 1971, 1972,
	1973, 1977, 1978, 1979, 1981, 1984, 1985, 1986, 1992, 0,
	0, 0, 0, 0, 0, 1974, 1983, 1975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 710, 716, 0, 717, 719, 0, 0,
	720, 721, 722, 3695, 0, 724, 725, 1982, 0, 0,
	0, 1990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1987, 3558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 1970,
	1982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1976, 0, 0, 0, 1980, 0, 0, 0, 0, 0,
	0, 0, 0, 1968, 0, 0, 0, 0, 0, 0,
	1964, 1998, 0, 0, 1965, 1967, 1969, 0, 1971, 1972,
	1973, 1977, 1978, 1979, 1981, 1984, 1985, 1986, 0, 0,
	0, 0, 0, 0, 0, 1974, 1983, 1975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1970, 0, 0, 0, 0, 0, 0, 0,
	0, 1990, 0, 1976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1964, 1998, 0, 0, 1965, 1967, 1969,
	0, 1971, 1972, 1973, 1977, 1978, 1979, 1981, 1984, 1985,
	1986, 3562, 0, 0, 0, 0, 1987, 0, 1974, 1983,
	1975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1980, 0, 0, 0, 0, 0,
	0, 0, 0, 1968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1963, 0, 0, 0,
	0, 0, 0, 1962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1980, 0, 0,
	0, 0, 0, 0, 0, 0, 1968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3562,
}

var yyPact = [...]int{
	3937, -1000, -1000, -1000, -328, 13857, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47693, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, 47693,
	-324, 29539, 45815, -1000, -1000, 2653, -1000, 46441, 15755, 47693,
	507, 506, 47693, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	912, -1000, 50197, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 842, 4216, 49571, 10703, -224, -1000, 1922, -39,
	2566, 421, -206, -209, 1065, 1072, 1415, 1415, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 209, 929, 47067, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3934, 238,
	911, 929, 20771, 75, 73, 1922, 508, -115, 191, -1000,
	1425, 457, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10703, 10703, 13857, -361, 13857, 10703,
	47693, 47693, -1000, -1000, -1000, -1000, -324, 46441, 842, 4216,
	10703, 2566, 421, -206, -209, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -115, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 73, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50719, -1000,
	1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2280, 3118, 1616, 2563,
	787, 45815, 47693, -1000, 142, 787, -1000, -1000, -1000, 1922,
	3523, -1000, 47693, 47693, 200, 1926, -1000, 574, 498, 525,
	435, 330, 1613, -1000, -1000, -1000, -1000, -1000, -1000, 683,
	3484, -1000, 47693, 47693, 3144, 47693, -1000, 2314, 729, -1000,
	51039, 3330, 1219, 944, 3157, -1000, -1000, 3114, -1000, 348,
	1218, 391, 749, 418, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 345, -1000, 3384, -1000, -1000, 325, -1000, -1000, 318,
	-1000, -1000, -1000, 71, -1000, -1000, -1000, -1000, -1000, -1000,
	-41, -1000, -1000, 1093, 2140, 10703, 2055, -1000, 3490, 1520,
	-1000, -1000, -1000, 6294, 12590, 12590, 12590, 12590, 47693, -1000,
	-1000, 2931, 10703, 3113, 3112, 3107, 3100, -1000, -1000, -1000,
	-1000, -1000, -1000, 1610, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2023, -1000, -1000, -1000, 13219, -1000, 3099,
	3076, 3075, 3074, 3072, 3071, 3069, 3066, 3065, 3064, 3061,
	3060, 3058, 3057, 2805, 15119, 3056, 2561, 2558, 3055, 3050,
	3049, 2552, 3047, 3034, 3033, 2805, 2805, 3032, 3030, 3024,
	3019, 3015, 3013, 3011, 3010, 3008, 3007, 3004, 3003, 3002,
	3001, 2995, 2994, 2982, 2981, 2979, 2978, 2976, 2975, 2971,
	2968, 2964, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1514, -1000, 2963, 3500,
	2875, -1000, 3362, 3360, 3358, 3354, -263, 2962, 2247, -1000,
	-1000, 101, 3481, 47693, -292, 47693, 384, -121, -122, -123,
	-1000, -79, -1000, -1000, 1040, -1000, 1017, -1000, 838, 838,
	838, 47693, 47693, 193, 1000, 838, 838, 838, 838, 838,
	878, 838, 3394, 909, 904, 903, 891, 838, -75, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1916, 1905, 3221, 999,
	-1000, -1000, -1000, -1000, 1429, 47693, -1000, 2868, 384, -283,
	1701, 1701, 3453, 3453, 3392, 765, 753, 735, 1701, 559,
	-1000, 1834, 1834, 1834, 1834, 1701, 505, 770, 3397, 3397,
	85, 1834, 53, 1701, 1701, 53, 1701, 1701, -1000, 1782,
	234, -281, -1000, -1000, -1000, -1000, 1834, 1834, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3379, 3377, 842, 842, 47693,
	842, 178, 47693, 842, 842, 842, 47693, 848, -316, 22,
	48945, 48319, 2380, 2314, 720, 703, 1448, 1918, -1000, 1784,
	47693, 47693, 1784, 1784, 23905, 23279, -1000, 47693, -1000, 3500,
	2875, 2800, 1948, 2799, 2875, -124, 384, 842, 842, 842,
	842, 842, 291, 842, 842, 842, 842, 842, 47693, 47693,
	45189, 842, 842, 842, 842, 8810, 8810, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13857, 2059, 2211, 190,
	-8, -312, 280, -1000, -1000, 47693, 3286, 303, -1000, -1000,
	-1000, 2827, -1000, 2862, 2862, 2862, 2862, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2862, 2862, 2867,
	2961, -1000, -1000, 2861, 2861, 2861, 2827, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2864, 2864, 2865, 2865, 2864, 47693, -135, -1000,
	-1000, 10703, 47693, 3319, 413, 2956, 787, -1000, -1000, 47693,
	172, 547, 3500, 3308, 3397, 3438, -1000, -1000, 1606, 2245,
	2549, -1000, 330, -1000, 477, 330, -1000, 543, 543, 1809,
	-1000, 1154, -1000, -1000, -1000, -1000, -1000, -1000, 47693, -41,
	444, -1000, -1000, 2532, 2944, -1000, 599, 1188, 1445, -1000,
	398, 744, 38303, 2314, 38303, 47693, -1000, -1000, -1000, -1000,
	-1000, -1000, 63, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 294, -1000, 10703,
	10703, 10703, 10703, 10703, -1000, 773, 11961, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12590, 12590, 12590, 12590, 12590, 12590,
	12590, 12590, 12590, 12590, 12590, 12590, 2928, 1911, 12590, 12590,
	12590, 12590, 26409, 1948, 3235, 1440, 296, 1520, 1520, 1520,
	1520, 10703, -1000, 1947, 2140, 10703, 10703, 10703, 10703, 47693,
	-1000, -1000, 4507, 10703, 10703, 3636, 10703, 3352, 10703, 10703,
	10703, 2798, 5027, 47693, 10703, -1000, 2797, 2796, -1000, -1000,
	2030, 10703, -1000, -1000, 10703, -1000, -1000, 10703, 12590, 10703,
	-1000, 10703, 10703, 10703, -1000, -1000, 3357, 3352, 3352, 3352,
	1848, 10703, 10703, 3352, 3352, 3352, 1826, 3352, 3352, 3352,
	3352, 3352, 3352, 3352, 3352, 3352, 3352, 2794, 2761, 2760,
	10074, 3397, -224, -1000, 8181, 3308, 3397, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -267, 2943, 47693,
	2548, 2547, -339, 167, 424, 47693, 1128, -1000, -1000, 47693,
	2244, 47693, 2241, -2, 1032, 1026, 1022, -1000, 47693, 1967,
	47693, 47693, 3345, -1000, 2942, 47693, 838, 838, 838, -1000,
	43311, 38303, 47693, 47693, 2314, 47693, 47693, 47693, 838, 838,
	838, 838, 47693, -1000, 3285, 38303, 3247, 848, -1000, 47693,
	1429, 3344, 47693, -1000, -1000, -1000, -1000, 3453, 12590, 12590,
	-1000, -1000, 10703, -1000, 44563, 1834, 1701, 1701, -1000, -1000,
	47693, -1000, -1000, -1000, 1834, 47693, 1834, 1834, 3453, 1834,
	-1000, -1000, -1000, 1701, 1701, -1000, -1000, 10703, -1000, -1000,
	1834, 1834, -1000, -1000, 3453, 47693, 62, 3453, 3453, 34,
	-1000, -1000, -1000, 1701, 47693, 47693, 838, 47693, -1000, 47693,
	47693, -1000, -1000, 47693, 47693, 4453, 47693, 43311, 43937, 3374,
	-1000, 38303, 47693, 47693, 1417, -1000, 875, 35799, -1000, 47693,
	1362, -1000, 9, -1000, -12, 22, 1784, 22, 1784, 871,
	-1000, 598, 966, 22027, 536, 38303, 5656, -1000, -1000, 1784,
	1784, 5656, 5656, 1643, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1414, -1000, 236, 3397, -1000, -1000, -1000, -1000, -1000,
	2239, -1000, 47693, 43311, 38303, 2314, 47693, 842, 47693, 47693,
	47693, 47693, 47693, -1000, 2939, 1604, -1000, 3326, 47693, 47693,
	47693, 47693, 1301, -1000, -1000, 18885, 1579, 1301, -1000, 1944,
	-1000, 10703, 13857, -249, 10703, 13857, 13857, 10703, 13857, -1000,
	10703, 278, -1000, -1000, -1000, -1000, 2238, -1000, 2230, -1000,
	-1000, -1000, -1000, -1000, 2545, 2545, -1000, 2229, -1000, -1000,
	-1000, -1000, 2227, -1000, -1000, 2218, -1000, -1000, -1000, -1000,
	-155, 2758, 1093, -1000, 2544, 3156, -225, -1000, 20145, 47693,
	47693, 413, -346, 1904, 1897, 1895, -1000, -225, -1000, 19515,
	47693, 3397, -1000, -231, 3308, 10703, 47693, -1000, 3390, -1000,
	-1000, 330, -1000, -1000, -1000, 543, 416, -1000, -1000, -1000,
	-1000, -1000, -1000, 1570, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 410, -116, -117, 1413, -1000, 47693,
	-1000, -1000, 398, 38303, 40181, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 251, -1000, -1000, 185, -1000, 870, 248, 1805,
	-1000, -1000, 192, 210, 203, 941, 2140, -1000, 1966, 1966,
	1971, -1000, 712, -1000, -1000, -1000, -1000, 2931, -1000, -1000,
	-1000, 3063, 2606, -1000, 1889, 1889, 1535, 1535, 1535, 1535,
	1535, 1855, 1855, -1000, -1000, -1000, 6294, 2928, 12590, 12590,
	12590, 12590, 926, 926, 3522, 3971, -1000, -1000, -1000, -1000,
	10703, 171, 1941, -1000, 10703, 2405, 1635, 2282, 1705, 1569,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2754, 2753, 2135, 3480, 2751, 10703, -1000, -1000, 1804, 1803,
	1779, -1000, 2344, 9445, -1000, -1000, -1000, 2750, 1568, 2747,
	-1000, -1000, -1000, 2738, 1766, 1422, 2737, 2980, 2732, 2731,
	2728, 2727, 1406, 10703, 10703, 10703, 10703, 2722, 1759, 1757,
	10703, 10703, 10703, 10703, 2720, 10703, 10703, 10703, 10703, 10703,
	10703, 10703, 10703, 10703, 10703, 97, 97, 97, 1379, 1377,
	-1000, -1000, 1753, -1000, 2140, -1000, -1000, 3308, -1000, 2927,
	2217, 1373, -1000, -1000, -321, 2466, 47693, 47693, 164, 47693,
	2537, -293, 47693, -1000, -1000, 2535, -1000, -1000, -1000, 1058,
	1009, 1031, 2534, 3321, 3389, 846, 47693, 1224, 2926, 47693,
	47693, 47693, 275, -1000, -1000, 1398, -1000, 248, -54, 513,
	1105, 3142, 3478, -136, 47693, 47693, 47693, 47693, 3343, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42685, -1000, 2919,
	1744, -1000, -1000, 1520, 1520, 2140, 3141, 47693, 47693, 3453,
	3453, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1834, 3453,
	3453, 1480, 1701, 1834, -1000, -1000, 1834, -346, -1000, 1834,
	-1000, -346, 1526, -346, 47693, -1000, -1000, -1000, 3338, 2868,
	1364, -1000, -1000, -1000, 3435, 1583, 830, 830, 1116, 617,
	3434, 17633, -1000, 1747, 1375, 865, 3272, 338, -1000, 1747,
	-152, 799, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 634,
	630, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
	1747, 1747, 1069, 1747, 1747, 1747, 1747, 1747, -1000, 1747,
	2918, 497, -1000, -1000, -1000, -1000, -1000, -1000, 741, 582,
	264, 3373, 386, -1000, 381, 1398, 3372, 409, 47693, 47693,
	3989, 1281, -1000, -1000, -1000, -1000, -1000, 27035, 27035, 21401,
	27035, -1000, 205, 1784, 22, 88, -1000, -1000, 1362, 5656,
	1362, 5656, 2212, -1000, -1000, 863, -1000, -1000, 1105, -1000,
	47693, 47693, -1000, -1000, 2913, 1888, -1000, -1000, 15119, -1000,
	5656, 5656, -1000, -1000, 28913, 47693, -1000, -43, -1000, -18,
	3308, -1000, 1096, -1000, -1000, 1358, 1105, 3154, 47693, 1096,
	1096, 1096, -1000, -1000, 16381, 47693, 47693, -1000, -1000, -1000,
	-1000, 3453, 8810, -1000, 35799, -1000, -1000, 42059, -1000, 41433,
	3453, 1934, -1000, 13857, 2171, 194, -1000, 274, -315, 186,
	2079, 184, 2140, -1000, -1000, 2715, 2711, 1743, -1000, 1737,
	2708, 1719, 1718, 2210, -1000, 44, -1000, 3295, 1157, -1000,
	2912, -1000, 1698, 3217, -1000, 1352, -1000, 1886, 1695, -1000,
	-1000, -1000, 10703, 40807, 10703, 1157, 1683, 3216, 1352, 3308,
	2528, -1000, 1348, -1000, 2254, 1525, 197, -1000, -1000, -1000,
	47693, 842, 2532, 1672, 40181, 1245, -1000, 862, 1508, 1504,
	-1000, 38303, 327, 38303, -1000, 38303, -1000, -1000, 387, -1000,
	47693, 3297, -1000, -1000, -1000, 2466, 1885, -343, 47693, -1000,
	-1000, -1000, -1000, -1000, 1667, -1000, 926, 926, 3522, 3905,
	-1000, 12590, -1000, 12590, 3230, -1000, 1933, -1000, 10703, 2094,
	4739, 10703, 4739, 1624, 25157, 47693, -1000, -1000, 10703, 10703,
	-1000, 3179, -1000, -1000, -1000, -1000, 10703, 10703, 2083, -1000,
	47693, -1000, -1000, -1000, -1000, 25157, -1000, 12590, -1000, -1000,
	-1000, -1000, 10703, 1296, 1296, 3171, 1634, 97, 97, 97,
	3116, 3080, 3067, 1633, 97, 2992, 2969, 2958, 2924, 2920,
	2886, 2843, 2714, 2706, 2689, -1000, 2911, -1000, -1000, 2009,
	11332, 8181, -1000, -1000, 307, 1332, 2207, 2527, 137, -1000,
	1869, -1000, 2520, 47693, 47693, 1122, -1000, 47693, 3474, -1000,
	-1000, -1000, -1000, 1006, 2519, -1000, 443, 2042, 148, 305,
	2707, 1310, -1000, -1000, 47693, -1000, -1000, -1000, 16381, 2868,
	2900, 2868, 96, 1747, 596, 38303, 681, -1000, 47693, 2058,
	1868, 3153, 943, 3282, 47693, 2895, 532, 2893, 2888, 3337,
	492, 50809, 47693, 1282, -1000, 1499, 457, -1000, 47693, -1000,
	2314, -1000, 1701, -1000, -1000, 3453, -1000, -1000, 10703, 10703,
	3453, 1701, 1701, -1000, 1834, -1000, 47693, -1000, -346, 492,
	50809, 3336, 50806, 552, 2538, -1000, 47693, -1000, -1000, -1000,
	922, -1000, 1013, 838, 47693, 1991, 1013, 1986, 2878, -1000,
	-1000, 47693, 47693, 47693, 47693, -1000, -1000, 47693, -1000, 47693,
	47693, 47693, 47693, 47693, 39555, -1000, 47693, 47693, -1000, 47693,
	1984, 47693, 1981, 3311, -1000, 1747, 1747, 974, -1000, -1000,
	619, -1000, 39555, 2202, 2200, 2199, 2197, 2517, 2514, 2512,
	1747, 1747, 2196, 2510, 38929, 2495, 1183, 2189, 2187, 2181,
	2220, 2494, 1199, -1000, 2492, 2195, 2193, 2116, 47693, 2877,
	2404, 495, -1000, -1000, 2042, 96, 1747, 372, 47693, 1852,
	1851, 596, 510, -55, 22653, -1000, -1000, -1000, 47693, 35799,
	35799, 35799, 35799, 35799, 35799, -1000, 3198, 3173, 3195, -1000,
	3180, 3177, 3203, 3193, 3164, 47693, 35799, 2868, -1000, 38929,
	-1000, -1000, -1000, 1948, 1631, 4002, 1021, 10703, 5656, -1000,
	-1000, 3, -36, -1000, -1000, -1000, -1000, 38303, 2489, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3388, 47693, 47693,
	811, 2694, 1308, -1000, -1000, -1000, 50809, 2862, 2862, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2862, 2862,
	2867, -1000, -1000, 2861, 2861, 2861, 2827, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2864, 2864, 2865,
	2865, 2864, -1000, -1000, 3446, -1000, 1295, -1000, -1000, 1494,
	-1000, 3446, 1951, -331, 13857, 1936, 1836, -1000, 10703, 13857,
	10703, -252, 358, -255, -1000, -1000, -1000, 2476, -1000, -1000,
	-1000, 2175, -1000, 2159, -1000, 159, 188, 1980, -225, 8181,
	494, 47693, -225, 47693, 8181, -1000, 47693, 166, -352, -359,
	157, 417, -225, 3388, 44, 10703, 3270, -1000, -1000, 47693,
	2138, -1000, -1000, -1000, 3473, 38303, 2314, 1660, 37677, -1000,
	324, -1000, 250, 606, 2475, -1000, 890, 136, 2470, 2466,
	-1000, -1000, -1000, -1000, 12590, 1520, -1000, -1000, -1000, 2140,
	10703, 2693, -1000, 996, 996, 2237, 2692, 2691, -1000, 2862,
	2862, -1000, 2827, 2861, 2827, 996, 996, 2685, -1000, 2221,
	2674, -1000, 2654, 2573, 10703, -1000, 2675, 3696, 1627, -82,
	-189, 97, 97, -1000, -1000, -1000, -1000, 97, 97, 97,
	97, -1000, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 798, -103, -280, -105, -282, -1000, 2658, 1294,
	-1000, -1000, -1000, -1000, -1000, 3636, 1286, 531, 531, 2466,
	2465, -1000, 859, 2463, 1047, 47693, 2458, -297, -1000, 2453,
	-1000, -1000, 47693, 2451, -1000, 575, 47693, 47693, 2450, 2446,
	1224, 50809, 2657, 3335, 17007, 3332, 2260, -1000, -1000, -1000,
	28287, 580, -1000, -1000, -1000, 684, 344, 2132, 571, -1000,
	47693, 519, 3231, 1843, 2445, 47693, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3282, -1000, 1405, 476, 34547, 14493, -1000,
	412, 47693, -1000, 17007, 17007, 412, 479, 1906, -1000, 787,
	1210, 140, 35799, 47693, -1000, 35173, 2649, -1000, 1105, 3453,
	-1000, 2140, 2140, -346, 3453, 3453, 1701, -1000, -1000, 479,
	-1000, 412, -1000, 1689, 18259, 537, 441, 434, -1000, 692,
	-1000, -1000, 786, 3261, 50809, -1000, 47693, -1000, 47693, -1000,
	47693, 47693, 838, 10703, 3261, 47693, 855, -1000, 1132, 462,
	446, 774, 774, 1263, -1000, 3318, -1000, -1000, 1262, -1000,
	-1000, -1000, -1000, 47693, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25157, 25157, 3371, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2441, 2440, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47693, 1628,
	-1000, 1840, 2130, 2437, 2260, 28287, 1838, 1784, 2436, 2434,
	580, 2058, 1833, 883, 47693, -1000, 1100, 47693, 47693, -1000,
	1260, -1000, 1824, 3136, 3151, 3136, -1000, 3136, -1000, -1000,
	-1000, -1000, -1000, -1000, 3191, -1000, 3176, -1000, -1000, -1000,
	-1000, 1260, -1000, -1000, -1000, -1000, -1000, 1021, -1000, 3365,
	1013, 1013, 1013, 2648, -1000, -1000, -1000, -1000, 1245, 2643,
	-1000, -1000, -1000, 3495, -1000, -1000, -1000, -1000, -1000, -1000,
	16381, 3278, 3441, 3433, 37051, 3441, -1000, -331, 1909, -1000,
	2054, 181, 2022, 47693, -1000, -1000, -1000, 2642, 2641, -235,
	141, 3432, 3429, 1084, -1000, 2638, 1243, -225, -1000, -1000,
	1157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -225, -1000,
	1157, -1000, 159, -1000, -1000, 3266, -1000, -1000, 2314, -1000,
	247, -1000, -1000, -1000, -1000, -1000, -1000, 213, -1000, 47693,
	-1000, 1179, 130, -1000, 2140, -1000, -1000, -1000, -1000, -1000,
	4739, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10703, -1000, -1000, -1000, 2560, -1000, -1000, 10703,
	2637, 2432, 2635, 2431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3500, -1000, 3428, 1626, 2619, 2616, 1623, 2613, 2612, -1000,
	10703, 2610, 3636, 981, 2426, 981, -1000, -1000, 408, 27661,
	47693, 3463, -1000, 47693, 2424, -1000, -1000, 2042, 573, 651,
	-1000, -1000, -1000, -1000, 915, 412, 2605, 1174, -1000, -1000,
	-1000, -1000, 412, -1000, 2423, 229, -1000, -1000, -1000, -1000,
	2417, 2412, 2128, -1000, -1000, 2101, 1363, 257, -1000, -1000,
	-1000, -1000, -1000, -1000, 2243, 47693, 36425, 2259, 1822, -347,
	-1000, 2859, -1000, 1747, 1747, 1747, 47693, 1562, -1000, 1747,
	1747, 2596, -1000, -1000, 2595, 2594, -143, 808, 1792, 1765,
	-1000, 2122, 27035, 35799, 35173, 1229, -1000, 1476, -1000, -1000,
	-1000, -1000, -1000, -1000, 3453, 808, -1000, 542, 2119, 12590,
	2858, 12590, 2857, 554, 2855, 1539, -1000, 47693, -1000, -1000,
	47693, 3984, 2854, -1000, 2853, 3140, 528, 2851, 2850, 47693,
	2518, -1000, 3261, 47693, 768, 3276, -1000, -1000, -1000, 427,
	-1000, -1000, 593, -1000, 47693, -1000, 47693, -1000, 1478, -1000,
	25157, -1000, -1000, 1532, -1000, 2404, 2403, 3636, -1000, -1000,
	229, 2395, 5656, -1000, -1000, -1000, 3231, 2394, 2243, 47693,
	-1000, 47693, 1100, 1100, 3500, 47693, 8181, -1000, -1000, 10703,
	2849, -1000, 10703, -1000, -1000, -1000, -1000, -1000, -1000, 2846,
	3256, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2863, -1000,
	10703, 10703, -1000, -1000, 834, 13857, -256, 355, -1000, -1000,
	-1000, -237, 2386, -1000, -1000, 3426, 2383, 2269, 47693, -1000,
	-1000, 1157, 1157, -235, -1000, -1000, 1105, -1000, -1000, 1144,
	662, -1000, 2585, 2462, -1000, 2449, 97, -1000, 97, -1000,
	281, 10703, -1000, 2382, -1000, -1000, -1000, 2381, -1000, -1000,
	2396, -1000, 2584, -1000, 2374, -1000, -1000, 47693, -1000, -1000,
	1044, 2370, -348, 2365, 2042, 2042, 47693, 50809, -145, -143,
	17007, -145, -1000, -1000, 380, -1000, -1000, 393, -1000, -1000,
	2089, 616, -1000, -1000, 2356, 594, -1000, 1100, -1000, 1821,
	2000, 2323, 32669, 25157, 26409, 2353, -1000, -1000, 34547, 2863,
	2863, 50940, 294, 51357, -1000, 2845, 1076, 1762, -1000, 2114,
	-1000, 2111, -1000, 3453, 1229, 139, -1000, -1000, 1652, -1000,
	1076, 2538, 3425, -1000, 3506, 47693, 3027, 47693, 2839, 1818,
	12590, -1000, 786, 3087, -1000, -1000, 3984, -1000, -1000, 1998,
	12590, -1000, -1000, 2352, 26409, 927, 1806, 1799, 928, 2838,
	-1000, 601, 3493, -1000, -1000, -1000, 969, 2834, -1000, 1979,
	1977, -1000, 47693, -1000, 32669, 32669, 1361, 1361, 32669, 32669,
	2830, 774, -1000, -1000, 12590, -1000, -1000, 1747, -1000, -1000,
	-1000, 1747, 1410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2259, -1000, -1000, 1096, -1000, 3397, -1000, -1000, 2140, 47693,
	2140, 33921, -1000, 3420, 3417, -1000, 2140, 246, -1000, -331,
	47693, 47693, -239, 2110, -1000, 2350, 179, -1000, -1000, 1094,
	-237, -241, 34, 25157, 1796, -1000, -1000, -1000, -1000, -1000,
	2579, -1000, 992, -1000, -1000, -1000, 1093, 2576, 2565, -1000,
	-1000, -1000, -1000, 47693, -1000, 2320, -1000, 2343, 2342, 572,
	-132, -1000, -1000, 389, -1000, -1000, -1000, 585, 2309, -1000,
	-1000, 392, -1000, -1000, -1000, 2243, 2341, -1000, -1000, 117,
	-1000, 1788, 1530, -1000, 2827, 10703, -1000, -1000, -1000, -1000,
	-1000, -1000, 783, -1000, 412, 51274, -1000, 1375, 25783, -1000,
	1144, 783, 497, 31417, 686, 302, -1000, 2103, -1000, -1000,
	3500, -1000, 673, -1000, 551, -1000, 1529, -1000, 1528, 33295,
	2060, 2448, -1000, 51104, 951, -1000, -1000, 3522, -1000, -1000,
	-1000, -1000, -1000, -1000, 2340, 2333, -1000, -1000, -1000, -1000,
	-1000, 2057, 2825, 99, 3370, 2327, -1000, -1000, 2822, 1516,
	1491, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1474, 1467, 32669, -1000, -1000, 3522, 2052, 25157, 1747, -1000,
	-1000, 1458, 1444, -1000, -1000, -1000, -1000, -1000, -310, -1000,
	-1000, -1000, 2818, -1000, -1000, 3413, -239, -243, 2326, 126,
	201, -1000, 2325, -1000, -1000, 1063, -226, 106, 104, 87,
	-1000, -1000, -1000, 10703, -1000, -1000, -1000, 116, -1000, 1756,
	-1000, -1000, 2042, 47693, 600, -1000, -1000, -1000, -1000, 212,
	-1000, -1000, -1000, -1000, -1000, -1000, 2323, 2322, -1000, 32669,
	3318, 2377, 533, 3411, -1000, 51357, -1000, 1747, -1000, 533,
	1433, -1000, 1747, 1747, -1000, 489, -1000, 1754, -1000, 2039,
	-1000, 3397, -1000, 481, -1000, 539, -1000, -1000, -1000, 1430,
	-1000, -1000, -1000, 51104, 545, -1000, 771, 2812, -1000, -1000,
	2454, 10703, 2805, 1747, 2410, -128, 32669, 3139, 3137, 3133,
	2960, 1424, -1000, -1000, 25157, -1000, -1000, 32043, -1000, 47693,
	2269, -1000, -1000, 2321, -1000, 844, 151, 201, -1000, 3409,
	160, 3408, 3407, 1085, 1970, -1000, 158, 147, 124, -1000,
	-1000, -1000, -1000, -1000, 2320, 2316, 2303, 535, -1000, 314,
	-1000, -1000, -1000, 350, -1000, -1000, 3318, -1000, 3404, 552,
	-1000, 25157, -1000, -1000, 31417, 2863, 2863, -1000, -1000, 2027,
	-1000, -1000, -1000, -1000, 2021, -1000, -1000, -1000, 1416, -1000,
	47693, 961, 7552, -1000, 2307, -1000, 47693, -1000, 3119, -1000,
	277, 1395, 350, 1361, 350, 1361, 350, 1361, 350, 1361,
	300, -1000, -1000, -1000, 1330, -1000, -1000, -1000, 2802, 2020,
	141, 165, 3403, -1000, 2269, 3401, 2269, 2269, -1000, 112,
	1063, -1000, -1000, -1000, -1000, -1000, -1000, 2298, -1000, -1000,
	-1000, -1000, 1747, 1747, 2288, 2273, 442, -1000, -1000, -1000,
	30791, 537, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 545,
	51357, -1000, 7552, 1314, -1000, 2140, -1000, 774, -1000, -1000,
	3070, 2972, 3472, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47693, 3351, 24531, 174, -1000, -1000, -1000,
	2271, -1000, 2269, -1000, -1000, 1741, -1000, -278, 2014, 2010,
	-1000, -1000, 47693, -1000, 47693, 542, -1000, 51357, 1253, -1000,
	7552, -1000, -1000, 3492, -1000, 3486, 918, 918, 350, 350,
	350, 350, -1000, -1000, 47693, -1000, 1205, -1000, -1000, -1000,
	1470, -1000, -1000, -1000, -1000, 2267, -1000, -1000, 2123, -1000,
	-1000, -1000, 1196, 2538, -1000, -1000, -1000, -1000, -1000, 2113,
	605, -1000, 1082, -1000, 1734, -1000, 30165, 47693, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47693, 6923, -1000, 1465, -1000,
	-1000, 2140, 47693, -1000,
}

var yyPgo = [...]int{
	0, 180, 3521, 254, 178, 4214, 130, 252, 269, 261,
	247, 4213, 4212, 4211, 4210, 3302, 3288, 4209, 4208, 4207,
	4206, 4205, 4203, 4202, 4200, 4199, 4198, 4197, 4193, 4192,
	4191, 4190, 4189, 4188, 4187, 4186, 4185, 4184, 4183, 4182,
	4181, 4180, 4179, 4176, 4170, 4169, 4167, 242, 4166, 4146,
	4145, 4144, 4143, 4141, 4140, 4139, 4137, 4136, 4135, 4134,
	4133, 4132, 4131, 4129, 4128, 4126, 4125, 4124, 4123, 4109,
	4108, 4107, 4106, 4105, 4104, 4098, 4097, 4094, 4093, 4092,
	4091, 4089, 239, 4088, 4086, 246, 4085, 3247, 4084, 4083,
	4081, 4078, 4068, 4065, 4042, 4041, 278, 4040, 4039, 4038,
	4037, 4032, 4028, 4027, 4024, 4023, 4019, 4018, 4017, 4016,
	283, 4015, 4012, 4011, 4005, 224, 4004, 208, 4003, 175,
	158, 4001, 4000, 3999, 3997, 3996, 3991, 3990, 3986, 3984,
	3983, 3982, 3976, 3974, 237, 216, 71, 3973, 47, 3972,
	3971, 223, 3970, 155, 3967, 153, 3966, 3965, 3964, 3963,
	3962, 3960, 3959, 3958, 3957, 3956, 3955, 3954, 3949, 3948,
	3947, 3944, 3943, 3942, 3941, 3940, 3934, 3933, 3932, 52,
	3931, 249, 3930, 75, 3929, 184, 3928, 81, 3927, 49,
	143, 250, 1900, 257, 248, 198, 183, 3924, 3922, 293,
	3921, 162, 225, 160, 106, 48, 3919, 140, 3914, 263,
	45, 59, 244, 150, 56, 169, 129, 3913, 207, 100,
	114, 3912, 3911, 148, 3910, 233, 185, 3908, 109, 3907,
	3901, 3897, 3896, 3894, 199, 196, 3893, 3891, 147, 3889,
	3888, 167, 136, 3887, 82, 134, 172, 128, 3878, 1006,
	124, 90, 3877, 132, 102, 3875, 113, 3874, 3869, 3868,
	3867, 187, 3864, 3863, 137, 79, 3862, 3859, 3857, 57,
	3853, 80, 3851, 84, 3849, 61, 3848, 3834, 3833, 3832,
	3831, 3830, 3827, 3824, 3821, 3820, 3819, 3816, 54, 3815,
	3814, 7, 10, 14, 3813, 24, 3812, 173, 3810, 3809,
	168, 3808, 192, 3807, 3806, 98, 94, 3804, 95, 170,
	3803, 9, 27, 76, 3802, 3800, 215, 317, 110, 163,
	3799, 268, 3798, 3797, 3796, 161, 3794, 3793, 3791, 656,
	3788, 3787, 3786, 3785, 3784, 3783, 64, 3781, 1, 213,
	39, 3780, 131, 146, 3779, 37, 30, 3778, 42, 117,
	197, 133, 104, 3777, 3776, 3774, 885, 200, 99, 78,
	0, 97, 218, 159, 3773, 3772, 3770, 258, 3769, 236,
	230, 235, 1256, 262, 205, 3767, 3766, 77, 3763, 165,
	29, 53, 138, 74, 21, 227, 3762, 446, 8, 189,
	3761, 202, 3760, 214, 16, 256, 151, 3753, 3751, 32,
	264, 3749, 3747, 3746, 127, 3744, 3743, 345, 72, 3742,
	3741, 3740, 3738, 38, 3736, 36, 17, 3732, 105, 3725,
	255, 3722, 397, 139, 182, 181, 154, 220, 229, 86,
	85, 3721, 1802, 157, 101, 15, 3720, 226, 3719, 386,
	125, 3718, 93, 3715, 243, 266, 210, 3714, 186, 11,
	44, 34, 28, 43, 12, 313, 201, 3711, 3710, 22,
	51, 3709, 58, 3708, 20, 3707, 3704, 40, 3703, 65,
	5, 3698, 3697, 19, 18, 3695, 35, 206, 174, 126,
	96, 67, 3694, 3692, 50, 141, 3691, 152, 177, 156,
	3689, 83, 3688, 3685, 3684, 3683, 294, 3682, 251, 3681,
	3680, 3678, 3676, 3675, 3660, 3659, 3658, 3643, 212, 3642,
	111, 41, 3624, 3621, 3619, 3615, 87, 142, 3614, 3613,
	3612, 3611, 31, 144, 3610, 13, 3605, 25, 23, 33,
	3602, 108, 3601, 3, 190, 3597, 3596, 4, 3594, 3590,
	2, 3587, 3586, 121, 3585, 107, 26, 171, 116, 3584,
	3583, 92, 204, 149, 3582, 3581, 103, 238, 203, 3579,
	145, 234, 259, 3577, 209, 3576, 3575, 3574, 3573, 3571,
	3570, 1188, 3569, 3567, 241, 66, 91, 3566, 232, 122,
	3563, 3562, 89, 166, 119, 120, 55, 88, 3561, 115,
	195, 3560, 194, 3558, 253, 3557, 3555, 112, 3552, 3550,
	3548, 3547, 191, 3546, 3544, 188, 240, 3543, 3542, 260,
	3541, 3540, 3539, 3538, 3537, 3535, 3533, 3523, 3518, 3515,
	245, 211, 3513,
}

//line mysql_sql.y:12593
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 605, 608, 608, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 125,
	125, 341, 341, 342, 342, 127, 337, 337, 336, 336,
	128, 129, 130, 584, 584, 131, 132, 161, 583, 583,
	163, 163, 163, 163, 163, 457, 126, 126, 126, 126,
	126, 167, 167, 167, 167, 167, 124, 590, 590, 590,
	591, 591, 121, 150, 149, 152, 152, 151, 151, 148,
	148, 144, 147, 147, 146, 146, 145, 140, 142, 142,
	141, 143, 143, 122, 110, 123, 532, 532, 531, 531,
	530, 530, 482, 482, 483, 483, 328, 328, 328, 529,
	529, 529, 528, 528, 527, 527, 526, 526, 524, 524,
	525, 523, 522, 522, 522, 520, 520, 520, 516, 516,
	518, 517, 517, 519, 511, 511, 514, 514, 512, 512,
	512, 512, 515, 510, 510, 510, 509, 509, 109, 109,
	109, 424, 424, 108, 108, 438, 438, 438, 438, 438,
	436, 436, 436, 436, 436, 436, 435, 435, 434, 434,
	439, 439, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 97, 97, 97, 97, 97, 97, 97,
	104, 102, 102, 102, 103, 596, 596, 595, 595, 597,
	597, 597, 597, 598, 598, 100, 100, 100, 101, 433,
	433, 433, 98, 99, 99, 423, 423, 428, 428, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 432, 432, 432, 430, 430, 429, 429, 431,
	431, 91, 91, 91, 94, 93, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 92, 92, 92, 92, 92,
	92, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	420, 420, 419, 105, 105, 106, 593, 593, 592, 594,
	594, 594, 594, 107, 113, 113, 113, 113, 113, 113,
	113, 113, 112, 112, 115, 115, 114, 116, 96, 96,
	96, 96, 96, 96, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	557, 557, 557, 557, 559, 559, 355, 356, 609, 358,
	354, 354, 354, 553, 553, 554, 555, 556, 556, 556,
	111, 14, 214, 214, 456, 456, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 84, 89, 89,
	90, 291, 291, 292, 286, 286, 293, 293, 166, 294,
	294, 294, 299, 299, 300, 300, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 273, 273,
	273, 268, 268, 268, 268, 269, 269, 270, 270, 271,
	271, 271, 271, 272, 272, 347, 347, 295, 295, 295,
	297, 297, 296, 290, 288, 288, 288, 288, 288, 288,
	288, 289, 289, 289, 289, 298, 298, 82, 88, 88,
	88, 88, 571, 571, 83, 582, 582, 486, 486, 369,
	369, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 492, 493, 365,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 165, 53, 53, 53, 409, 409, 52,
	610, 610, 340, 340, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 505, 505, 612, 612, 612, 74, 75,
	485, 485, 485, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 156, 59, 157, 157, 362, 362,
	362, 364, 364, 360, 611, 611, 452, 452, 363, 363,
	48, 48, 48, 48, 77, 361, 361, 339, 359, 359,
	359, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 417, 417, 414, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 186, 186, 240, 240,
	565, 565, 561, 561, 562, 562, 562, 563, 563, 564,
	564, 117, 499, 499, 499, 499, 499, 499, 8, 8,
	209, 209, 498, 498, 498, 498, 498, 498, 421, 421,
	421, 542, 542, 542, 543, 208, 208, 203, 203, 500,
	500, 386, 544, 544, 508, 508, 507, 507, 506, 506,
	206, 206, 207, 207, 189, 189, 135, 135, 513, 513,
	513, 513, 521, 521, 481, 481, 278, 278, 330, 330,
	331, 331, 179, 179, 180, 180, 180, 180, 180, 180,
	599, 599, 600, 601, 602, 602, 603, 603, 603, 604,
	604, 604, 604, 604, 550, 550, 552, 552, 551, 205,
	205, 201, 201, 202, 202, 202, 200, 200, 199, 198,
	198, 197, 195, 195, 195, 196, 196, 196, 213, 213,
	182, 182, 182, 181, 181, 181, 181, 181, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	183, 183, 558, 558, 558, 487, 487, 487, 495, 495,
	308, 308, 309, 309, 491, 491, 307, 307, 184, 184,
	185, 185, 185, 185, 306, 306, 305, 194, 194, 193,
	192, 192, 192, 187, 187, 187, 187, 187, 188, 317,
	317, 316, 316, 315, 315, 315, 315, 318, 120, 133,
	133, 134, 212, 212, 314, 313, 313, 313, 313, 211,
	211, 210, 210, 204, 204, 191, 191, 191, 191, 312,
	190, 310, 589, 589, 588, 588, 587, 585, 585, 585,
	586, 586, 586, 586, 534, 534, 534, 534, 534, 348,
	348, 348, 353, 353, 351, 351, 351, 351, 351, 357,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 223, 224, 40, 225, 225, 226, 226,
	227, 227, 228, 229, 230, 230, 230, 230, 38, 215,
	215, 216, 216, 217, 217, 218, 219, 219, 219, 222,
	220, 221, 221, 607, 607, 606, 37, 37, 30, 170,
	170, 171, 171, 171, 173, 173, 274, 274, 274, 172,
	172, 174, 174, 174, 566, 568, 568, 570, 569, 569,
	569, 572, 572, 572, 572, 572, 573, 573, 573, 573,
	574, 574, 31, 153, 153, 177, 177, 158, 577, 577,
	577, 576, 576, 578, 578, 579, 579, 334, 334, 335,
	335, 168, 169, 169, 160, 155, 176, 176, 176, 176,
	176, 178, 178, 242, 242, 154, 159, 162, 164, 567,
	575, 575, 575, 418, 418, 415, 416, 416, 413, 412,
	412, 412, 581, 581, 580, 580, 580, 349, 349, 32,
	408, 408, 410, 411, 411, 411, 402, 402, 402, 402,
	36, 406, 406, 407, 407, 407, 407, 407, 407, 407,
	403, 403, 405, 405, 401, 401, 401, 401, 401, 401,
	401, 35, 175, 175, 400, 400, 397, 397, 395, 395,
	396, 396, 394, 394, 394, 398, 398, 43, 78, 44,
	45, 46, 42, 399, 399, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 137, 136, 136, 136, 136,
	136, 139, 139, 333, 333, 332, 332, 138, 275, 275,
	41, 253, 253, 473, 473, 468, 468, 468, 468, 468,
	489, 489, 489, 469, 469, 469, 470, 470, 470, 472,
	472, 472, 471, 471, 471, 471, 471, 488, 488, 490,
	490, 490, 440, 440, 441, 441, 441, 444, 444, 460,
	460, 461, 461, 459, 459, 466, 466, 465, 465, 464,
	464, 463, 463, 462, 462, 462, 462, 455, 455, 454,
	454, 442, 442, 442, 442, 442, 443, 443, 443, 453,
	453, 458, 458, 304, 304, 303, 303, 261, 261, 262,
	262, 302, 302, 259, 259, 260, 260, 260, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 540, 540, 541, 264, 264, 276,
	276, 276, 276, 276, 276, 263, 263, 265, 265, 241,
	241, 239, 239, 231, 231, 231, 231, 231, 232, 232,
	233, 233, 234, 234, 234, 238, 238, 237, 237, 237,
	237, 235, 235, 236, 236, 236, 236, 236, 236, 426,
	426, 537, 537, 538, 538, 533, 533, 533, 536, 536,
	536, 536, 536, 536, 536, 539, 539, 539, 535, 535,
	243, 327, 327, 327, 350, 350, 350, 350, 352, 326,
	326, 326, 258, 258, 257, 257, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 425, 425,
	366, 366, 367, 367, 285, 284, 284, 284, 284, 284,
	282, 283, 281, 281, 281, 281, 281, 280, 280, 279,
	279, 279, 404, 404, 277, 277, 267, 267, 267, 266,
	266, 266, 467, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 324, 324, 324, 325, 325, 325, 325, 325,
	325, 325, 325, 376, 376, 382, 382, 549, 549, 548,
	244, 244, 244, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 254, 254, 254, 449, 449, 449, 449, 450,
	450, 450, 450, 451, 451, 451, 447, 447, 448, 448,
	387, 388, 388, 496, 496, 497, 497, 445, 445, 446,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 504, 504, 504, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 560, 560, 560, 545, 545, 545, 546, 546, 546,
	546, 546, 546, 546, 546, 546, 546, 546, 546, 547,
	547, 547, 547, 547, 547, 547, 547, 547, 547, 547,
	547, 547, 547, 547, 547, 547, 322, 322, 322, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 389, 389, 390,
	390, 501, 501, 501, 501, 501, 501, 502, 502, 503,
	503, 503, 503, 494, 494, 494, 494, 494, 494, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
	494, 494, 494, 374, 319, 319, 319, 391, 383, 383,
	384, 384, 385, 385, 377, 377, 377, 377, 377, 377,
	378, 378, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 379, 379, 381, 381, 393, 393,
	393, 392, 392, 392, 392, 392, 392, 392, 256, 256,
	256, 256, 371, 371, 371, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 246, 246, 246,
	246, 250, 250, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 251, 251, 251,
	251, 251, 249, 249, 249, 249, 249, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 118, 119, 119, 248,
	329, 329, 474, 474, 477, 477, 475, 475, 476, 478,
	478, 478, 479, 479, 479, 480, 480, 480, 484, 484,
	338, 338, 338, 346, 346, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 4, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	3, 1, 3, 3, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 4, 0, 2, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 1, 4, 4, 4, 3, 4, 3, 2,
	2, 2, 2, 2, 3, 2, 3, 2, 4, 1,
	3, 4, 0, 2, 1, 1, 2, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 10, 2, 2, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 8, 0, 2, 2, 3,
	3, 0, 2, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 4, 1, 2, 3, 5, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -605, -608, -2, -5, 629, -1, -4, -119, -91,
	-7, -14, -121, -122, -8, -117, -9, -10, -12, -95,
	-112, -114, -116, -115, -47, -11, -111, -85, -86, -97,
	-105, -108, -109, -110, -123, -118, -120, -179, -124, -125,
	-126, -167, -129, -131, -132, 619, -92, -93, -94, -33,
	-32, -31, -30, -153, -158, -161, -163, -127, 552, 625,
	455, 14, 504, -15, -16, -550, -17, 264, -354, -355,
	-356, -358, -609, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -156,
	-157, -77, -57, -78, -58, -165, -128, -79, -80, -81,
	-83, -82, -88, -84, -89, -155, -160, -13, -166, -90,
	238, -87, 76, -98, -99, -100, -101, -102, -103, -104,
	-106, -107, 379, 385, 442, 618, 61, -180, -182, 643,
	644, 647, 539, 542, 162, 163, 165, 166, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 234, 16, 547, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -154, -25, -159, -23, -162, -164,
	-130, 259, 258, 38, 325, 326, 327, 383, 257, 235,
	237, 15, 31, 42, 358, -181, 85, 540, 236, -183,
	13, 649, -6, -3, -2, -140, -144, -148, -151, -152,
	-149, -150, -4, -119, 120, 249, 620, -350, 375, 621,
	623, 622, 88, 96, -343, -345, 455, 264, 379, 385,
	618, 644, 647, 539, 542, 554, 555, 556, 557, 558,
	559, 560, 561, 563, 564, 565, 566, 567, 568, 569,
	579, 580, 570, 571, 572, 573, 574, 575, 576, 577,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 507, 604, 605, 606, 607, 535,
	562, 598, 599, 600, 601, 356, 357, 544, 276, 300,
	410, 306, 313, 162, 181, 175, 204, 195, 540, 170,
	280, 318, 281, 95, 165, 490, 110, 467, 439, 168,
	295, 297, 299, 536, 537, 369, 302, 534, 301, 303,
	305, 538, 282, 359, 191, 186, 294, 278, 184, 283,
	40, 284, 209, 285, 286, 549, 463, 355, 469, 310,
	52, 437, 185, 464, 298, 466, 213, 217, 481, 482,
	179, 180, 471, 484, 208, 211, 212, 256, 352, 353,
	43, 546, 268, 485, 215, 639, 207, 202, 493, 314,
	312, 206, 178, 201, 279, 65, 219, 218, 220, 433,
	434, 435, 436, 287, 288, 373, 480, 198, 187, 360,
	171, 23, 488, 263, 468, 386, 289, 307, 315, 214,
	216, 270, 275, 330, 548, 441, 274, 311, 486, 183,
	267, 296, 262, 489, 640, 172, 388, 290, 166, 304,
	483, 642, 492, 64, 401, 177, 169, 636, 253, 163,
	272, 277, 641, 291, 292, 293, 533, 317, 316, 308,
	541, 199, 269, 205, 189, 176, 200, 164, 271, 491,
	402, 616, 358, 420, 197, 194, 273, 246, 487, 470,
	167, 424, 403, 192, 319, 611, 612, 613, 374, 351,
	320, 321, 190, 260, 461, 462, 324, 430, 342, 404,
	440, 411, 405, 226, 227, 328, 473, 475, 210, 614,
	331, 332, 333, 465, 334, 335, 336, 337, 378, 56,
	58, 97, 100, 99, 645, 646, 63, 29, 364, 367,
	399, 406, 344, 617, 545, 341, 345, 346, 368, 25,
	422, 390, 426, 425, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 532, 383, 396, 494, 45, 47,
	393, 27, 370, 421, 443, 340, 423, 454, 46, 452,
	453, 474, 26, 372, 371, 62, 44, 429, 431, 432,
	322, 338, 381, 626, 495, 376, 392, 395, 377, 343,
	366, 397, 67, 66, 389, 627, 384, 382, 339, 550,
	551, 347, 578, 361, 438, 529, 528, 527, 526, 525,
	524, 523, 522, 325, 326, 327, 407, 408, 409, 419,
	412, 413, 414, 415, 416, 417, 418, 457, 458, 628,
	476, 478, 479, 477, 241, 648, 362, 363, 244, 630,
	631, 98, 632, 634, 633, 28, 635, 638, -431, -429,
	-350, 540, 618, 385, 539, 542, 379, 358, 644, 647,
	383, 264, 325, 326, 327, 455, 356, -225, -350, 648,
	-189, 248, 39, -239, -350, -189, -87, -16, -15, -181,
	-182, -239, 243, -359, 24, 437, -96, 438, 238, 239,
	85, 77, -350, -9, -110, -8, -117, -85, -179, 442,
	-357, -350, 325, 325, -357, 243, -352, 274, 418, -350,
	-486, 249, -435, -408, 275, -434, -410, -437, -411, 32,
	234, 236, 235, 552, 271, 16, 383, 245, 14, 13,
	384, 257, 25, 26, 28, 15, 385, 387, 29, 388,
	391, 392, 393, 42, 396, 397, 264, 88, 96, 91,
	282, -224, -350, -385, -377, 117, -380, -372, -373, -375,
	-328, -524, -370, 85, 144, 145, 152, 118, 650, -374,
	-467, 36, 120, 558, 562, 598, 505, -320, -321, -322,
	-323, -324, -325, -350, -525, -523, 91, 101, 103, 107,
	108, 106, 104, 156, 188, 105, 92, 157, -182, 88,
	-545, 568, -344, 591, 604, 605, 606, 607, 590, 61,
	-494, -503, 242, -501, 155, 193, 260, 189, 14, 150,
	430, 190, 599, 600, 601, 565, 587, 507, 569, 579,
	594, 560, 561, 563, 555, 556, 557, 559, 570, 572,
	586, -504, 582, 592, 593, 578, 602, 603, 595, 596,
	597, 634, 90, 89, 585, 584, 571, 566, 567, 573,
	554, 564, 574, 575, 583, 588, 589, 367, 110, 368,
	369, 497, 359, 80, 370, 249, 437, 70, 371, 372,
	373, 374, 375, 504, 376, 71, 377, 366, 264, 420,
	378, 192, 210, 509, 508, 510, 501, 498, 496, 499,
	500, 502, 503, 576, 577, 581, -133, -134, 609, -599,
	-311, -600, 6, 7, 8, 9, -601, 157, -590, 439,
	548, 91, 318, 356, 17, 497, 637, 538, 637, 538,
	167, 164, -422, 167, 116, 172, 171, -422, 637, 169,
	636, 328, 270, -399, -170, 356, 420, 334, 97, 274,
	-402, -400, 536, -488, 322, 318, 294, 244, 113, -171,
	254, 253, 111, 497, 242, 394, 313, 56, 58, -561,
	-562, 231, 232, 233, -552, 530, -551, -350, 637, 639,
	369, 99, 100, 636, 27, 243, 380, 270, 475, 473,
	474, 476, 477, 478, 479, -65, -505, -485, 470, 469,
	-363, 462, 468, 460, 472, 463, 357, 336, 552, 335,
	234, 630, 537, 531, -338, 404, 440, 494, 495, 381,
	441, 481, 483, 464, 110, 196, 193, 244, 246, 243,
	636, 356, 497, 420, 97, 334, 243, -561, 639, 164,
	481, 483, 439, 274, 418, 41, -428, 430, -427, -429,
	482, 493, 89, 90, 480, -338, 110, 461, 461, -599,
	-311, -180, -182, -120, -550, 538, 637, 244, 356, 420,
	274, 245, 243, 533, 536, 246, 497, 242, 325, 380,
	270, 334, 97, 169, 636, -487, -558, 32, -495, 228,
	229, 230, 33, 34, -1, 124, 649, -377, -377, -6,
	652, -6, -377, -350, -350, 159, -246, -250, -247, -249,
	-248, -252, -251, 193, 194, 155, 197, 203, 199, 200,
	201, 202, 204, 205, 206, 207, 208, 211, 212, 209,
	31, 210, 260, 189, 190, 191, 192, 213, 175, 195,
	545, 221, 176, 222, 177, 223, 178, 224, 179, 180,
	225, 181, 184, 185, 186, 187, 183, 158, -214, 91,
	32, 85, 158, 91, -206, 266, -189, -239, -231, 158,
	650, -206, -599, -199, -200, 11, -239, -326, -350, 439,
	127, -96, 77, -96, 438, 77, -96, 438, 238, -553,
	-554, -555, -557, 238, 438, 437, 239, -115, 158, 282,
	17, -357, -357, 83, -239, -410, 274, -435, -408, 36,
	82, 159, 247, 159, 82, 85, 381, 356, 420, 382,
	497, 243, 394, 246, 274, 395, 356, 420, 243, 246,
	497, 274, 356, 243, 246, 420, 274, 395, 356, 460,
	461, 246, 27, 386, 389, 390, 461, -509, 493, 159,
	116, 113, 114, 115, -377, 134, -392, 127, 128, 129,
	130, 131, 132, 133, 141, 140, 151, 144, 145, 146,
	147, 148, 149, 150, 142, 143, 137, 117, 135, 139,
	136, 119, 154, -182, -377, -385, 61, -375, -375, -375,
	-375, -350, -467, -382, -377, 85, 85, 85, 85, 158,
	104, 91, -377, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, -502, 85, 85, -389, -390,
	85, 85, -370, -326, 85, 91, 91, 85, 85, 85,
	91, 85, 85, 85, -390, -390, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, -200, 159, -199, 85, -199, -200, -183, -182, 32,
	33, 32, 33, 32, 33, 32, 33, -602, 627, 85,
	101, 645, 226, 17, -350, 636, -350, -584, 32, 541,
	541, 541, 541, 486, 547, 170, 171, 172, -397, 249,
	-397, -397, -223, -350, -225, 380, 246, 533, 246, -171,
	-397, -397, -397, -397, -397, 245, -397, 24, 243, 243,
	243, 243, -397, 504, 127, 127, 59, -563, 174, 159,
	-552, -205, 85, -584, 640, 641, 642, -362, 135, 139,
	-362, -307, 18, -307, 24, 272, 272, 272, -362, 312,
	-610, -611, 17, 137, -360, -611, -360, -360, -362, -612,
	245, 471, 43, 273, 272, -201, -202, 22, -201, 465,
	461, -452, 466, 467, -364, -611, -363, -362, -362, -363,
	-362, -362, -362, 32, 243, 246, 497, 334, 631, -610,
	-610, 31, 31, -486, -486, -239, -486, -486, 531, -339,
	-350, -486, -486, -486, -291, -292, -239, -564, 248, 642,
	-596, -595, 484, -598, 486, 164, -429, 164, -429, 88,
	-410, 274, 274, 159, 127, 24, -430, 127, 138, -429,
	-429, -430, -430, -263, 41, -349, 155, -350, 91, -263,
	41, -593, -592, -239, -200, -183, -182, 86, 86, 86,
	541, -584, -486, -486, -486, -486, -486, -488, -486, -486,
	-486, -486, -486, -357, -215, -350, -225, 249, -486, -486,
	-486, -486, -184, -185, 146, -377, -350, -184, -3, -142,
	-141, 121, 122, 124, 621, 375, 620, 624, 618, -429,
	41, -480, 402, 401, -474, -476, 85, -475, 85, -475,
	-475, -475, -475, -475, 85, 85, -477, 85, -477, -477,
	-474, -478, 85, -478, -479, 85, -479, -478, -350, -456,
	547, -383, -385, -350, 39, -498, 61, -179, 85, 31,
	85, -206, -350, 190, 169, 635, -499, 61, -179, 85,
	31, -200, -135, 39, -202, 21, 158, 101, 91, -115,
	-96, 77, -115, -96, -96, 86, 159, -556, 107, 108,
	-559, 208, 199, -350, -113, 91, -7, -8, -9, -10,
	-47, -85, -82, -179, 235, 539, 542, -526, -524, 85,
	32, 429, 82, 17, -436, 243, 497, 380, 270, 246,
	356, -434, -417, -414, -412, -349, -410, -413, -412, -439,
	-326, 461, -136, 444, 443, 324, -377, -377, -377, -377,
	-377, 106, 117, 351, 107, 108, -372, -393, 32, 320,
	321, -373, -373, -373, -373, -373, -373, -373, -373, -373,
	-373, -373, -373, -381, -391, -467, 85, 137, 135, 139,
	136, 119, -375, -375, -373, -373, -265, -349, 155, 86,
	159, -377, -549, -548, 121, -377, -377, -377, -377, -350,
	-546, -547, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 371, 366, 372, 370, 359, 378, 373,
	374, 192, 528, 529, 522, 523, 524, 525, 526, 527,
	-383, -383, -377, -546, -383, -319, 33, 32, -385, -385,
	-385, 86, -377, -560, 349, 348, 350, -203, -350, -383,
	86, 86, 86, 101, -385, -385, -383, -373, -383, -383,
	-383, -383, -547, -319, -319, -319, -319, 146, -385, -385,
	-319, -319, -319, -319, 146, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, 86, 86, 86, 146, -385,
	-201, -134, -507, -506, -377, 41, -135, -202, -603, 628,
	85, -326, -591, 91, 91, 650, 169, 636, 17, 497,
	-350, 17, 243, -350, 101, -350, 101, 487, 488, 168,
	171, 170, -350, 117, -350, -350, 35, 85, -215, -397,
	-397, -397, -568, -350, 92, -418, -415, -412, -350, -350,
	-408, -350, -339, -239, -397, -397, -397, -397, -239, -274,
	53, 54, 55, -412, -172, 56, 57, -564, -551, 35,
	-204, -350, -307, -375, -375, -377, -412, 274, -610, -362,
	-362, -340, -339, -364, -359, -364, -364, -307, -360, -362,
	-362, -377, -364, -360, -307, -350, 461, -307, -307, -452,
	-362, -361, -350, -361, -397, -339, -340, -340, -239, -239,
	-286, -293, -287, -294, 266, 240, 364, 365, 237, 235,
	11, 236, -301, 313, -398, 505, -269, -270, 77, 42,
	-272, 264, 406, 399, 276, 280, 95, 281, 439, 282,
	245, 284, 285, 286, 301, 303, 256, 287, 288, 289,
	430, 290, 163, 302, 291, 292, 293, 382, -264, 6,
	337, 547, 41, 51, 52, 453, 452, 550, 277, -350,
	-568, -566, 31, -350, 31, -418, -350, -350, 159, 247,
	-192, -194, -191, -187, -188, -193, -310, -312, -190, 85,
	-239, -182, -350, -429, 159, 485, 487, 488, -596, -430,
	-596, -430, 247, 32, 429, -433, 429, 32, -408, -427,
	481, 483, -423, 91, 430, -413, -432, 82, 155, -506,
	-430, -430, -432, -432, 154, 159, -594, 486, 487, 231,
	-201, 101, -241, -239, -568, -417, -408, -350, -486, -241,
	-241, -241, -352, -352, 85, 158, 36, -350, -350, -350,
	-350, -306, 159, -305, 17, -351, -350, 35, 91, 158,
	-306, -143, -141, 123, -377, -6, 620, -377, -6, -6,
	-377, -6, -377, -484, 403, 101, 101, -329, 91, -329,
	101, 101, 101, 553, 86, 91, -421, 82, -500, -386,
	-544, 609, -208, 86, -203, -542, -543, -203, -207, -350,
	-498, -231, 127, 127, 127, -500, -208, 86, -542, -201,
	610, -135, -198, -197, -377, -350, 24, -115, -96, -554,
	158, 356, 159, -204, -436, -416, -413, -438, 146, -350,
	-424, 159, 547, 653, 89, 247, -581, -580, 421, 86,
	159, -510, 248, 504, 91, 650, 437, 226, 227, 106,
	351, 107, 108, -467, -385, -381, -375, -375, -373, -373,
	-379, 261, -379, 116, -377, 651, -376, -548, 123, -377,
	35, 159, 35, 159, 83, 158, 86, 86, 17, 17,
	86, -377, 86, 86, 86, 86, 17, 17, -377, 86,
	158, 86, 86, 86, 86, 83, 86, 159, 86, 86,
	86, 86, 159, -385, -385, -377, -385, 86, 86, 86,
	-377, -377, -377, -385, 86, -377, -377, -377, -377, -377,
	-377, -377, -377, -377, -377, -446, 456, -446, -446, 159,
	159, 159, 86, -135, 85, 101, 159, 646, -333, -332,
	91, -350, -350, 169, 636, -350, 91, 636, -350, 91,
	169, 172, 172, 171, 91, 36, 24, 311, 24, -224,
	-226, -227, -228, -229, -230, 137, 160, 161, 85, -239,
	-239, -239, -570, 407, -582, 159, 41, -580, 497, -168,
	324, -401, 83, -175, 17, 547, -239, -239, -239, -239,
	-253, 35, 17, -186, -240, -350, 85, 86, 159, -409,
	83, -350, -340, -307, -307, -364, -307, -307, 159, 23,
	-362, -364, -364, -231, -360, -231, 158, -231, -339, -473,
	35, -205, 159, 21, 266, -238, -347, -235, -237, 251,
	-367, -236, 254, -538, 252, 250, 111, 255, 309, 112,
	245, -347, -347, 251, -273, 247, 35, -347, -289, 245,
	354, 309, 252, 21, 266, -288, 245, 112, -350, 251,
	255, 252, 250, -346, 127, -338, 154, 247, 43, 382,
	-346, 551, 266, -346, -346, -346, -346, -346, -346, -346,
	283, 283, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, 164, -346, -346, -346, -346, -346, -346,
	85, 329, 278, 279, 311, -571, 407, 31, 362, 362,
	363, -582, 31, -176, 356, -292, -290, -361, 31, -313,
	-314, -315, -316, -318, -317, 68, 72, 74, 78, 69,
	70, 71, 75, 80, 73, 31, 159, -348, -353, 35,
	-350, 91, -348, -182, -194, -192, -348, 85, -430, -595,
	-597, 489, 486, 492, -432, -432, 101, 247, 85, 127,
	-432, -432, 41, -349, -592, 493, 487, -135, 159, 82,
	-241, -216, -217, -218, -219, -246, -326, 194, 197, 199,
	200, 201, 202, 204, 205, 206, 207, 208, 211, 212,
	209, 210, 260, 189, 190, 191, 192, 213, 175, 195,
	545, 176, 177, 178, 179, 180, 181, 184, 185, 186,
	187, 183, -350, -225, -307, -185, -194, -350, 91, -350,
	146, -307, 124, -6, 122, -147, -146, -145, 125, 618,
	624, 124, 124, 124, 86, 86, 86, 159, 86, 86,
	86, 159, 86, 159, 101, -513, 466, 40, 159, 85,
	86, 159, 61, 159, 127, 86, 159, -377, -350, 91,
	-377, 86, 61, -135, 91, 159, -195, 37, 38, 158,
	439, -350, -524, 86, -438, 159, 247, 158, 158, -414,
	385, -349, -416, 21, 547, -326, 39, -333, 127, 650,
	-350, 86, -379, -379, 116, -375, -372, 86, 124, -377,
	122, -244, -246, 401, 402, -377, -244, -245, -251, 155,
	193, 260, 192, 191, 189, 401, 402, -263, -350, -377,
	-377, 86, -377, -377, 17, -350, -263, -373, -377, -200,
	-200, 86, 86, -445, -446, -445, -445, 86, 86, 86,
	86, -445, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 85, 101, 103, 101, 103, -506, -604, 63,
	626, 62, 429, 106, 314, 159, 101, 91, 651, 159,
	127, 91, -350, -350, 17, 243, -350, 17, 172, 91,
	-583, 318, 356, -457, 101, 318, 356, 497, 393, 86,
	159, -326, -216, -205, 85, -205, -573, 468, 409, 419,
	-346, -369, -368, 358, 42, -492, 430, 415, 416, -415,
	274, -339, -579, 98, 127, 82, 341, 345, 346, 342,
	343, 344, -395, -396, -394, -398, -566, 85, 85, -179,
	35, 135, -175, 85, 85, 35, -468, 331, -246, -239,
	-186, -350, 17, 159, -565, 158, -1, -350, -408, -362,
	-307, -377, -377, -307, -362, -362, -364, -350, -231, -468,
	-246, 35, -287, 240, 236, -442, 311, 312, -443, -458,
	314, -460, 85, -243, -326, -236, -537, -538, -397, -350,
	112, -537, 112, 85, -243, -326, -326, -290, -326, -350,
	-350, -350, -350, -297, -296, -326, -299, 32, -300, -350,
	-350, -350, -350, 112, -350, 112, -268, 41, 48, 49,
	50, -346, -346, 196, -271, 41, 429, 431, 432, -299,
	101, 101, 101, 101, 91, 91, 91, -346, -346, 101,
	91, -353, 91, -539, 171, 45, 46, 101, 101, 101,
	101, 41, 91, -276, 41, 294, 298, 295, 296, 297,
	91, 101, 41, 101, 41, 101, 41, -350, 85, -540,
	-541, 91, 330, -457, -573, -346, 362, -429, 127, 127,
	-369, -578, 324, -178, 497, 32, -209, 240, 236, -566,
	-420, -419, -326, -191, -191, -191, -191, -191, -191, 68,
	79, 68, 68, 68, 73, 68, 73, 68, -315, 68,
	79, -420, -193, -205, -353, 86, -589, -588, -587, -585,
	76, 248, 77, -383, -432, 486, 490, 491, -416, -365,
	91, -423, -213, 24, -239, -239, -490, 304, 305, 86,
	159, -246, -309, 19, 158, -309, 120, -6, -143, -145,
	-377, -6, -377, 620, 375, 621, 91, 101, 101, -521,
	450, 445, 447, 112, -386, -508, -507, 61, -179, -203,
	-500, -543, -506, -350, 651, 651, 651, 651, 61, -179,
	-500, -213, -513, -197, -196, 44, -350, 101, 17, -413,
	-408, 146, 146, -350, 386, -424, 91, 408, 91, 243,
	651, 91, -333, -372, -377, 86, -254, 180, 179, -254,
	35, 86, 86, -475, -475, -474, -477, -474, -254, -254,
	86, 86, 24, 86, 86, 86, -377, 86, 86, 159,
	-496, 506, -497, 580, -445, -445, -445, -445, -445, -445,
	-445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
	-388, -387, 266, 451, 633, 633, 451, 633, 633, 86,
	159, -546, 159, -341, 319, -341, -332, 91, 247, 91,
	169, -350, 91, 636, 91, -350, 91, 311, -350, -350,
	91, 91, -228, -246, 86, 35, -232, -233, -234, -243,
	-235, -237, 35, -574, 95, -569, 91, -350, 92, -575,
	95, 410, 157, 360, 41, 411, 412, 427, 355, 101,
	101, 417, -567, -350, -177, 243, 356, -577, 52, 127,
	91, -239, -394, -338, 154, 285, 334, -304, -303, -350,
	91, -232, -179, -239, -232, -232, -179, -469, 333, 21,
	101, 145, -206, 83, 158, -194, -240, -350, 146, 86,
	-307, -231, -307, -307, -362, -469, -179, -454, 315, 85,
	-452, 85, -452, 112, 342, -461, -459, 266, -295, 45,
	47, -246, -535, -350, -533, -535, -350, -533, -533, -397,
	-377, -295, -243, 247, 31, 236, -298, 339, 340, 345,
	-425, 310, 117, -425, 159, -195, 159, -350, -263, -263,
	31, 91, 91, -241, 86, 159, 127, 101, 91, -574,
	-569, 127, -430, 91, 91, -575, -579, 127, -242, 243,
	-339, 159, -209, -209, -307, 159, 127, -211, -210, 82,
	83, -212, 82, -210, -210, 68, 68, -307, -587, -586,
	24, -538, -538, -538, 86, 86, 15, -218, 41, -308,
	20, 21, 146, -308, 124, 122, 124, 124, -350, 86,
	86, -481, 611, -517, -519, 445, 21, 21, 15, 248,
	86, -500, -500, -521, 45, 46, -408, -424, 430, -239,
	159, 651, -244, -377, 86, -377, 86, 91, 86, 91,
	-200, 21, 86, 159, 86, 86, 86, 159, 86, 86,
	-377, 86, -546, -342, 190, 91, -342, 356, -351, -350,
	17, -350, 91, -457, 311, 311, 243, 241, -179, 86,
	159, -179, 91, -572, 421, 91, 91, 101, 41, 101,
	157, 413, -493, -169, 95, -241, 32, -209, -576, 95,
	127, 650, 85, -346, -346, -346, -350, 86, 159, -346,
	-346, 86, 86, 86, -261, 547, -470, 265, 101, 145,
	101, 145, 101, -348, -194, -350, -307, -565, 158, -307,
	-470, -444, 316, 101, -373, 85, -373, 85, -453, 313,
	85, 86, 159, -350, -326, -258, -257, -255, 106, 117,
	41, 399, -256, 95, 154, 299, 302, 301, 277, 300,
	-285, -366, 82, 405, 339, 340, -398, 611, 535, 250,
	111, 112, 387, -367, 85, 85, 83, 319, 85, 85,
	-535, 86, -295, -326, 41, -298, 41, 352, 310, -296,
	-350, 154, -263, 86, -541, 91, -546, -572, 91, -432,
	-577, 91, -169, -241, -566, -200, -419, -506, -377, 85,
	-377, 85, 68, 11, 19, -370, -377, -385, 249, -6,
	621, 375, -278, 612, 91, 21, 91, -515, 91, -420,
	-481, -138, -275, -338, 282, 86, 86, 86, -445, -445,
	-448, -447, -451, 451, 311, 459, -385, 91, 91, 86,
	86, 91, -350, 169, 91, 650, 91, -457, -457, -350,
	-220, -246, -173, 547, -261, -234, -173, 21, 547, 359,
	41, 101, 41, 414, 91, -177, 127, 107, 108, -334,
	-335, 91, -403, -405, -326, 85, -263, -265, 91, -303,
	-370, -370, -259, -179, 35, -260, -301, -398, 547, -137,
	-136, -259, 547, 85, -471, 163, 101, 145, 101, 101,
	-307, -307, -471, -460, 21, 86, -439, 86, -439, 85,
	127, -373, -459, -462, 61, -255, 106, -373, 91, -265,
	-266, 41, 298, 294, 127, 127, -267, 41, 278, 279,
	-277, 85, 309, 15, 196, 85, 112, 112, -239, -403,
	-403, -536, 341, 342, 343, 347, 345, 346, 344, -536,
	-403, -403, 85, -426, -425, -373, -346, -346, 154, -576,
	-201, -204, -534, -350, 250, 21, 21, -491, 547, -350,
	-350, -330, 613, 101, 91, 447, -278, -482, 614, -511,
	-452, -263, 127, 86, -450, 119, 413, 417, -371, -374,
	101, 103, 188, 157, 86, 86, -350, -337, -336, 91,
	91, 91, 311, 546, -174, 60, 493, 91, 92, 408,
	91, 92, 359, -169, 91, 651, 159, 127, 86, 159,
	-474, -377, -440, 266, -179, 159, -301, -338, -138, -440,
	-262, -302, -350, 91, -489, 171, 332, 547, 101, 145,
	101, -200, -472, 171, 332, -443, 86, 86, 86, -439,
	101, 86, -466, -463, 85, -301, 268, 137, 91, 91,
	101, 85, -501, 31, 91, -404, 85, 86, 86, 86,
	86, -403, 101, -263, -346, 86, 86, 159, 638, 85,
	21, -330, -483, 615, 91, -520, 450, -514, -512, 445,
	446, 447, 448, 91, -449, -450, 417, -371, -374, 609,
	457, 457, 457, 651, 159, 127, -457, -222, -350, 309,
	430, -335, 91, -406, -405, -195, 86, -441, 318, 21,
	-301, -346, -441, 86, 159, -346, -346, 332, 101, 145,
	101, -201, 332, -455, 317, 86, -466, -301, -465, -464,
	316, 269, 85, 86, -377, -389, -346, 86, -280, -279,
	543, -403, -406, 83, -406, 83, -406, 83, -406, 83,
	86, -263, -350, 250, -331, -350, -515, 91, -522, 248,
	-518, -519, 449, -512, 21, 447, 21, 21, -139, 159,
	116, 458, 458, 458, -336, 91, 91, -221, 35, 452,
	386, -407, 256, 352, 353, 95, 547, 339, 340, -195,
	21, -442, -263, -302, -370, -370, 101, 101, 86, 159,
	-350, 265, 85, -384, -378, -377, 265, 86, -350, -284,
	-282, -283, 82, 464, 307, 308, 86, -536, -536, -536,
	-536, -285, 86, 159, -529, 85, 101, -517, -516, -518,
	21, -515, 21, -515, -515, 454, -449, 91, -346, -346,
	91, 91, 338, -326, 85, -454, -464, -463, -384, 86,
	159, -425, -283, 82, -282, 82, 16, 15, -406, -406,
	-406, -406, -350, -532, 31, 86, -528, -527, -327, -523,
	-350, 450, 451, 91, -515, 127, -607, -606, 632, 101,
	101, -350, -439, -444, 86, -378, -281, 304, 305, 31,
	171, -281, -531, -530, -328, 86, 159, 158, 91, 91,
	86, -460, 106, 41, 306, 159, 127, -527, -350, -530,
	41, -377, 158, -350,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 0, 0,
	0, 0, 0, 699, 700, 0, 663, 0, 0, 0,
	0, 0, 0, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	0, 336, 332, 253, 254, 255, 256, 257, 258, 259,
	343, 344, 517, 0, 0, 0, 0, 782, -2, 97,
	0, 0, 0, 0, 325, 0, 316, 316, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, -2, 712, 0, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 400, 401, 402, 396, 397, 399, 398, -2, 0,
	0, 712, 0, 0, 0, 790, 0, 0, 0, 833,
	855, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1374, 1375, 1376, 1377, 2165, 2135, -2, 1901,
	1878, 2059, 2060, 1957, 1969, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
	2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241,
	2242, 2243, 2244, 2245, 2246, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, -2, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
	2148, 2149, 2150, -2, -2, -2, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 0, 309,
	307, 1848, 1878, 1901, 1957, 1969, 1970, 2007, 2059, 2060,
	2092, 2135, 2151, 2152, 2153, 2165, 0, 0, 976, 0,
	760, 0, 0, 765, 1323, 760, 337, 701, 702, 790,
	816, 661, 0, 374, 0, 1892, 378, 2142, 0, 0,
	0, 0, 658, 368, 369, 370, 371, 372, 373, 0,
	0, 949, 0, 0, 364, 0, 331, 1959, 2164, 1378,
	0, 0, 0, 0, 0, 196, 1100, 198, 1102, 202,
	210, 0, 0, 0, 215, 216, 219, 220, 221, 222,
	223, 0, 227, 0, 229, 232, 0, 234, 235, 0,
	238, 239, 240, 0, 250, 251, 252, 1103, 1104, 1105,
	-2, 125, 974, 1806, 1692, 0, 1699, 1712, 1723, 1455,
	1456, 1457, 1458, 0, 0, 0, 0, 0, 0, 1466,
	1467, 0, 1495, 2201, 2242, 2243, 0, 1475, 1476, 1477,
	1478, 1479, 1480, 136, 148, 149, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 0, 1753, 1754, 1755, 1663, 1442, 1374,
	0, 2210, 0, 2232, 2237, 2238, 2239, 2240, 2231, 0,
	0, 1647, 0, 1637, 0, 0, -2, -2, 0, 0,
	2032, -2, 2244, 2245, 2246, 2207, 2228, 2236, 2211, 2212,
	2235, 2203, 2204, 2205, 2198, 2199, 2200, 2202, 2214, 2216,
	2227, 0, 2223, 2233, 2234, 2140, 0, 0, 0, 0,
	0, 2182, 150, 151, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1658, -2, 1660, -2, 1662, -2, 1665, -2, -2,
	-2, -2, 1670, 1671, -2, 1673, -2, -2, -2, -2,
	-2, -2, -2, 1649, 1650, 1651, 1652, 1641, 1642, 1643,
	1644, 1645, 1646, -2, -2, -2, 816, 899, 0, 816,
	0, 791, 838, 841, 844, 847, 794, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 327, 315, 317, 0, 321, 0, 314, 1136, 1136,
	1136, 0, 0, 0, 0, 1136, 1136, 1136, 1136, 1136,
	0, 1136, 0, 0, 0, 0, 0, 1136, 0, 1009,
	1107, 1108, 1109, 1134, 1135, 1208, 0, 0, 0, 717,
	713, 714, 715, 716, 804, 0, 806, 809, 0, 0,
	638, 638, 866, 866, 584, 0, 0, 0, 638, 0,
	598, 590, 0, 0, 0, 638, 0, 0, 811, 811,
	0, 641, 648, 638, 638, -2, 638, 638, 635, 638,
	0, 0, 1148, 604, 605, 606, 590, 590, 609, 610,
	611, 621, 622, 649, 1830, 0, 0, 517, 517, 0,
	517, 517, 0, 517, 517, 517, 0, 719, 1917, 2002,
	1899, 1975, 1858, 1959, 2164, 0, 282, 2032, 287, 0,
	1900, 1920, 0, 0, 1938, 0, -2, 0, 353, 816,
	0, 0, 790, 0, 0, 0, 0, 517, 517, 517,
	517, 517, 1207, 517, 517, 517, 517, 517, 0, 0,
	0, 517, 517, 517, 517, 0, 0, 856, 857, 852,
	853, 854, 858, 859, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 104, 103, 0, 1807, 1825, 1758, 1759,
	1760, 1812, 1762, 1816, 1816, 1816, 1816, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1816, 1816, 0,
	0, 1805, 1782, 1814, 1814, 1814, 1812, 1809, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1819, 1819, 1822, 1822, 1819, 0, 414, 412,
	413, 1688, 0, 0, 0, 0, 760, 764, 1321, 0,
	0, 0, 816, -2, 0, 0, 662, 375, 1379, 0,
	0, 379, 0, 380, 0, 0, 382, 0, 0, 0,
	403, 0, 406, 390, 391, 392, 393, 386, 0, 176,
	0, 366, 367, 0, 0, 333, 0, 0, 0, 518,
	0, 0, 0, 0, 0, 0, 207, 203, 211, 214,
	224, 231, 0, 243, 245, 248, 204, 212, 217, 218,
	225, 246, 205, 208, 209, 213, 247, 249, 206, 226,
	230, 244, 228, 233, 236, 237, 242, 0, 177, 0,
	0, 0, 0, 0, 1698, 0, 0, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1692, 0, 0, 1461, 1462, 1463,
	1464, 0, 1468, 0, 1496, 0, 0, 0, 0, 0,
	1752, 1756, 0, 1688, 1688, 0, 1688, 1684, 0, 0,
	0, 0, 0, 0, 1688, 1620, 0, 0, 1622, 1638,
	0, 0, 1624, 1625, 0, 1628, 1629, 1688, 0, 1688,
	1633, 1688, 1688, 1688, 1616, 1617, 0, 1684, 1684, 1684,
	1684, 0, 0, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
	1684, 1684, 1684, 1684, 1684, 1684, 1684, 0, 0, 0,
	0, 811, 0, 817, 0, -2, 0, 835, 837, 839,
	840, 842, 843, 845, 846, 848, 849, 796, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 71, 73, 0,
	0, 0, 0, 0, 0, 319, 0, 324, 0, 0,
	0, 0, 0, 973, 0, 0, 1136, 1136, 1136, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 1136,
	1136, 1136, 0, 1154, 0, 0, 0, 719, 718, 0,
	805, 0, 0, 70, 577, 578, 579, 866, 0, 0,
	581, 582, 0, 583, 0, 590, 638, 638, 596, 597,
	592, 591, 644, 645, 641, 0, 641, 641, 866, 0,
	615, 616, 617, 638, 638, 623, 812, 0, 624, 625,
	641, 0, 646, 647, 866, 0, 0, 866, 866, 0,
	633, 634, 636, 638, 0, 0, 1136, 0, 654, 592,
	592, 1831, 1832, 0, 0, 1145, 0, 0, 0, 0,
	657, 0, 0, 0, 430, 431, 0, 0, 720, 0,
	261, 265, 0, 268, 0, 2002, 0, 2002, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 305, 306, 0,
	0, 0, 0, 296, 299, 1315, 1316, 1097, 1098, 300,
	301, 345, 346, 0, 811, 834, 836, 830, 831, 832,
	0, 72, 0, 0, 0, 0, 0, 517, 0, 0,
	0, 0, 0, 695, 0, 989, 697, 0, 0, 0,
	0, 0, 874, 868, 870, 944, 136, 874, 8, 121,
	118, 0, 19, 0, 0, 19, 19, 0, 19, 310,
	0, 1828, 1826, 1827, 1761, 1813, 0, 1787, 0, 1788,
	1789, 1790, 1801, 1802, 0, 0, 1783, 0, 1784, 1785,
	1786, 1777, 0, 1778, 1779, 0, 1780, 1781, 308, 411,
	0, 0, 1689, 977, 0, 738, 752, 733, 0, 741,
	0, 0, 1323, 0, 0, 0, 721, 752, 723, 0,
	741, 811, 788, 0, 766, 0, 0, 376, 0, 387,
	381, 0, 388, 383, 384, 0, 0, 405, 407, 408,
	409, 394, 395, 659, 362, 363, 354, 355, 356, 357,
	358, 359, 360, 361, 0, 0, 0, 365, 146, 0,
	334, 335, 0, 0, 0, 190, 191, 192, 193, 194,
	195, 197, 181, 684, 686, 1089, 1101, 0, 1092, 0,
	200, 241, 173, 0, 0, 0, 1693, 1694, 1695, 1696,
	1697, 1702, 0, 1704, 1706, 1708, 1710, 0, 1728, -2,
	-2, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1713, 1726, 1727, 0, 0, 0, 0,
	0, 0, 1724, 1724, 1719, 0, 1481, 1317, 1318, 1459,
	0, 0, 1493, 1497, 0, 0, 0, 0, 0, 137,
	1683, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	0, 0, 1692, 0, 0, 0, 1685, 1686, 0, 0,
	0, 1575, 0, 0, 1581, 1582, 1583, 0, 747, 0,
	1648, 1621, 1639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 900, 0, 756, 758, 759, 785, 766, 792, 0,
	0, 0, 96, 101, 0, 1175, 0, 0, 0, 0,
	0, 0, 0, 74, 1149, 75, 1151, 328, 329, 0,
	0, 323, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 1025, 1026, 515, 1083, 0, 0, 0,
	1099, 1124, 1132, 0, 0, 0, 0, 0, 1181, 1011,
	1016, 1017, 1018, 1012, 1013, 1019, 1020, 0, 807, 0,
	0, 913, 580, 639, 640, 867, 587, 1959, 592, 866,
	866, 599, 593, 600, 643, 601, 602, 603, 641, 866,
	866, 813, 638, 641, 626, 642, 641, 1323, 630, 0,
	637, 1323, 655, 1323, 0, 653, 607, 608, 1183, 809,
	428, 429, 434, 436, 0, 485, 485, 485, 468, 485,
	0, 0, 456, 1833, 0, 0, 0, 0, 465, 1833,
	0, 0, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 0,
	0, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
	1833, 1833, 0, 1833, 1833, 1833, 1833, 1833, 1300, 1833,
	0, 484, 1146, 475, 476, 477, 478, 483, 0, 0,
	512, 0, 0, 1024, 0, 515, 0, 1066, 0, 0,
	879, 0, 880, 881, 882, 877, 915, 939, 939, 0,
	939, 919, 1323, 0, 0, 0, 273, 274, 262, 0,
	263, 0, 0, 276, 277, 0, 279, 280, 281, 288,
	1899, 1975, 283, 285, 0, 0, 289, 302, 303, 304,
	0, 0, 294, 295, 0, 0, 348, 349, 351, 0,
	766, 1150, 681, 1319, 682, 683, 687, 0, 0, 690,
	691, 692, 693, 694, 991, 0, 0, 1075, 1076, 1077,
	1078, 866, 0, 875, 0, 871, 945, 0, 947, 0,
	866, 0, 119, 19, 0, 112, 109, 0, 0, 0,
	0, 0, 1808, 1757, 1829, 0, 0, 0, 1810, 0,
	0, 0, 0, 0, 102, 768, 728, 0, 732, 749,
	0, 753, 0, 0, 745, 737, 742, 0, 0, 762,
	729, 1322, 0, 0, 0, 722, 0, 0, 727, 766,
	0, 789, 818, 819, 822, 1380, 0, 389, 385, 404,
	0, 517, 0, 0, 0, 184, 1086, 0, 185, 189,
	179, 0, 0, 0, 1091, 0, 1088, 1093, 0, 199,
	0, 0, 174, 175, 1166, 1175, 0, 0, 0, 1703,
	1705, 1707, 1709, 1711, 0, 1714, 1724, 1724, 1720, 0,
	1715, 0, 1717, 0, 1693, 1465, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1565, 1566, 0, 0,
	1570, 0, 1572, 1573, 1574, 1576, 0, 0, 0, 1580,
	0, 1619, 1640, 1623, 1626, 0, 1630, 0, 1632, 1634,
	1635, 1636, 0, 816, 816, 0, 0, 1537, 1537, 1537,
	0, 0, 0, 0, 1537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 1483, 1484, 0,
	0, 0, 901, 786, 0, 0, 0, 0, 0, 1173,
	0, 86, 0, 0, 0, 0, 91, 0, 0, 76,
	330, 318, 320, 0, 0, 1137, 0, 0, 0, 0,
	0, 979, 980, 982, 0, 985, 986, 987, 991, 809,
	0, 809, 1036, 1833, 519, 0, 0, 1085, 0, 1055,
	0, 0, 0, -2, 0, 0, 1132, 0, 0, 0,
	1185, 0, 0, 0, 706, 710, 23, 810, 0, 585,
	0, 586, 638, 594, 595, 866, 618, 619, 0, 0,
	866, 638, 638, 629, 641, 650, 0, 651, 1323, 1185,
	0, 0, 1145, 1251, 1219, 446, 0, 1335, 1336, 486,
	0, 1342, 1351, 1136, 1412, 0, 1351, 0, 0, 1353,
	1354, 0, 0, 0, 0, 469, 470, 0, 455, 0,
	0, 0, 0, 0, 0, 454, 0, 0, 496, 0,
	0, 0, 0, 0, 1834, 1833, 1833, 0, 463, 464,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	1833, 1833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 0,
	0, 0, 1307, 1308, 0, 1036, 1833, 0, 0, 0,
	0, 519, 1053, 1071, 0, 432, 433, 493, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 809, 940, 0,
	942, 943, 917, -2, 0, 879, 922, 1688, 0, 266,
	267, 0, 0, 272, 290, 292, 264, 0, 0, 0,
	291, 293, 297, 298, 347, 350, 352, 828, 0, 0,
	1209, 0, 992, 993, 995, 996, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1883, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 990, 698, 862, 869, 876, 946, 948, 137,
	872, 862, 0, 122, 19, 121, 113, 114, 0, 19,
	0, 0, 0, 0, 1818, 1817, 1803, 0, 1804, 1815,
	1820, 0, 1823, 0, 415, 772, 0, 0, 752, 754,
	0, 0, 752, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 752, 828, 768, 0, 825, 823, 824, 0,
	0, 660, 147, 410, 0, 0, 0, 0, 0, 685,
	0, 1090, 181, 0, 0, 201, 0, 0, 0, 1175,
	1170, 1687, 1716, 1718, 0, 1725, 1721, 1460, 1469, 1494,
	0, 0, 1500, 1512, 1512, 0, 0, 0, 1503, 1816,
	1816, 1506, 1812, 1814, 1812, 1512, 1512, 0, 138, 0,
	0, 1571, 0, 0, 0, 748, 0, 0, 0, 1533,
	1535, 1537, 1537, 1544, 1538, 1545, 1546, 1537, 1537, 1537,
	1537, 1551, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
	1537, 1537, 1531, 0, 0, 1746, 1747, 757, 0, 0,
	799, 800, 801, 802, 803, 0, 0, 61, 61, 1175,
	0, 95, 87, 0, 0, 0, 0, 0, 322, 0,
	77, 78, 0, 0, 85, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 1328, 0, 1040, 1037, 1038, 1039,
	0, 1080, 520, 521, 522, 523, 0, 0, 0, 1084,
	0, 0, 1048, 0, 0, 0, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, -2, 1140, 0, 0, 0, 1328, 1159,
	0, 0, 1164, 1328, 1328, 0, 1193, 0, 1182, 760,
	0, -2, 0, 0, 708, 0, 0, 914, 588, 866,
	612, 814, 815, 1323, 866, 866, 638, 656, 652, 1193,
	1184, 0, 435, 485, 0, 1239, 0, 0, 1245, 0,
	1252, 439, 0, 487, 0, 1341, 1368, 1352, 1368, 1413,
	1368, 1368, 1136, 0, 487, 0, 0, 457, 0, 0,
	0, 0, 0, 453, 490, 822, 440, 442, 443, 444,
	494, 495, 497, 0, 499, 500, 459, 471, 472, 473,
	474, 0, 0, 0, 466, 479, 480, 481, 482, 441,
	1268, 1269, 1270, 1273, 1274, 1275, 1276, 0, 0, 1279,
	1280, 1281, 1282, 1283, 1365, 1366, 1367, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1309, 1310, 1311, 1312, 1313, 1314,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 0, 0,
	1304, 0, 0, 0, 1040, 0, 0, 0, 0, 0,
	1080, 1055, 0, 1073, 0, 1067, 1068, 0, 0, 730,
	866, 340, 0, 909, 902, 0, 886, 0, 888, 906,
	889, 907, 908, 893, 0, 895, 0, 891, 892, 897,
	890, 866, 878, 916, 941, 918, 921, 923, 924, 930,
	0, 0, 0, 0, 260, 269, 270, 271, 278, 0,
	539, 284, 784, 0, 1320, 688, 689, 1210, 1211, 696,
	0, 997, 860, 0, 0, 860, 117, 120, 0, 115,
	0, 0, 0, 0, 107, 105, 1811, 0, 0, 774,
	161, 0, 0, 0, 750, 0, 755, 752, 736, 746,
	735, 743, 744, 763, 1324, 1325, 1326, 1327, 752, 726,
	725, 787, 772, 820, 821, 0, 1381, 377, 0, 1087,
	181, 186, 187, 188, 182, 180, 1094, 0, 1096, 0,
	1168, 0, 0, 1722, 1499, 1470, 1501, 1513, 1514, 1502,
	0, 1472, 1473, 1504, 1505, 1507, 1508, 1509, 1510, 1511,
	1474, 1567, 0, 1569, 1577, 1578, 0, 1627, 1631, 0,
	0, 0, 0, 0, 1542, 1543, 1547, 1548, 1549, 1550,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	816, 1532, 0, 0, 0, 0, 0, 0, 0, 797,
	0, 0, 0, 63, 0, 63, 1174, 1176, 0, 944,
	0, 0, 92, 0, 0, 79, 80, 0, 0, 0,
	972, 975, 981, 983, 0, 0, 0, 1329, 1330, 1332,
	1333, 1334, 0, 1008, 0, 0, 1028, 1029, 1030, 1042,
	0, 0, 0, 525, 526, 0, 0, 0, 538, 534,
	535, 536, 516, 1079, 1062, 0, 0, 1051, 0, 0,
	1061, 0, 1141, 1833, 1833, 1833, 0, 0, 1253, 1833,
	1833, 0, 1161, 1163, 0, 0, 1257, 1196, 0, 0,
	1187, 0, 939, 0, 0, 866, 707, 710, 711, 808,
	589, 627, 631, 628, 866, 1196, 427, 1217, 0, 0,
	0, 0, 0, 1249, 0, 0, 1221, 0, 458, 488,
	0, -2, 0, 1369, 0, 1355, 1369, 0, 0, 1368,
	0, 447, 487, 0, 0, 0, 501, 505, 506, 0,
	503, 1408, 0, 504, 0, 492, 0, 498, 1271, 1272,
	0, 1277, 1278, 0, 1302, 0, 0, 0, 438, 507,
	0, 0, 0, 508, 509, 514, 1048, 0, 1062, 0,
	1072, 0, 1069, 1070, 816, 0, 0, 883, 910, 0,
	0, 884, 0, 885, 887, 894, 896, 339, 925, 0,
	0, 927, 928, 929, 920, 286, 829, 994, 0, 850,
	0, 0, 873, 851, 0, 19, 0, 0, 110, 1821,
	1824, 776, 0, 773, 162, 0, 0, 0, 0, 740,
	751, 734, 724, 774, 826, 827, 183, 178, 1095, 1178,
	0, 1169, 0, 0, 1579, 0, 1537, 1534, 1537, 1536,
	1528, 0, 1485, 0, 1487, 1488, 1489, 0, 1491, 1492,
	0, 795, 0, 59, 0, 62, 60, 0, 94, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 1257,
	0, 1014, 1041, 1027, 0, 1081, 1082, 0, 527, 528,
	0, 531, 537, 1043, 0, 0, 1045, 1046, 1047, 0,
	0, 1059, 0, 0, 0, 0, 1133, 1147, 0, 0,
	0, -2, 0, -2, 1158, 0, 1202, 0, 1194, 0,
	1186, 0, 1189, 866, 866, -2, 704, 709, 0, 632,
	1202, 1219, 0, 1240, 0, 0, 0, 0, 0, 0,
	0, 1220, 0, 1233, 489, 1370, -2, 1384, 1386, 0,
	1146, 1389, 1390, 0, 0, 0, 0, 0, 0, 1434,
	1398, 0, 0, 1402, 1403, 1404, 0, 0, 1407, 0,
	1740, 1741, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 1349, 448, 449, 0, 451, 452, 1833, 1409, 491,
	445, 1833, 461, 1301, 1305, 1306, 1303, 513, 510, 511,
	1051, 1054, 1065, 1074, 731, 811, 341, 342, 911, 0,
	903, 934, 931, 0, 0, 998, 861, 864, 111, 116,
	0, 0, 778, 0, 775, 0, 769, 771, 172, 739,
	776, 132, 164, 0, 0, 1471, 1568, 1618, 1540, 1541,
	0, 1529, 0, 1523, 1524, 1525, 1530, 0, 0, 798,
	793, 64, 90, 0, 93, 68, 81, 0, 0, 0,
	0, 1000, 1007, 1021, 1152, 1331, 1006, 0, 0, 524,
	529, 0, 532, 533, 1063, 1062, 0, 1049, 1050, 0,
	1057, 0, 0, 1120, 1812, 0, 1142, 1143, 1144, 1254,
	1255, 1256, 1212, 1160, 0, -2, 1265, 0, 0, 1156,
	1178, 1212, 0, 0, 1190, 0, 1197, 0, 1195, 1188,
	816, 705, 1199, 437, 1251, 1241, 0, 1243, 0, 0,
	0, 0, 1222, -2, 0, 1385, 1387, 1388, 1391, 1392,
	1393, 1439, 1440, 1441, 0, 0, 1396, 1436, 1437, 1438,
	1397, 0, 0, 0, 0, 0, 1738, 1739, 1432, 0,
	0, 1356, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1357,
	0, 0, 0, 1348, 1350, 450, 0, 0, 1833, 1064,
	338, 0, 0, 935, 937, 932, 933, 863, 0, 106,
	108, 123, 0, 777, 163, 0, 778, 134, 0, 155,
	0, 1179, 0, 1539, 1526, 0, 0, 0, 0, 0,
	1742, 1743, 1744, 0, 1486, 1490, 89, 0, 66, 0,
	82, 83, 0, 0, 0, 1022, 1023, 1031, 1032, 0,
	1034, 1035, 530, 1044, 1052, 1056, 1059, 0, 1111, 0,
	822, 0, 1214, 0, 1162, 1145, 1267, 1833, 1165, 1214,
	0, 1259, 1833, 1833, 1180, 0, 1192, 0, 1204, 0,
	1198, 811, 426, 0, 1201, 1237, 1242, 1244, 1246, 0,
	1250, 1248, 1223, -2, 0, 1231, 0, 0, 1394, 1395,
	0, 0, 1637, 1833, 0, 1427, 0, 1111, 1111, 1111,
	1111, 0, 502, 460, 0, 912, 926, 0, 865, 0,
	0, 767, 124, 0, 133, 152, 0, 165, 166, 0,
	0, 0, 0, 1171, 0, 1515, 0, 0, 0, 1519,
	1520, 1521, 1522, 65, 68, 0, 0, 0, 999, 0,
	1033, 1058, 1060, 1110, 1121, 1122, 822, 1155, 0, 1251,
	1266, 0, 1157, 1258, 0, 0, 0, 1191, 1203, 0,
	1206, 703, 1200, 1218, 0, 1247, 1224, 1232, 0, 1227,
	0, 0, 0, 1435, 0, 1401, 0, 1406, 1415, 1428,
	0, 0, 1337, 0, 1339, 0, 1343, 0, 1345, 0,
	0, 462, 936, 938, 0, 780, 770, 135, 139, 0,
	161, 158, 0, 167, 0, 0, 0, 0, 1167, 0,
	0, 1516, 1517, 1518, 67, 69, 84, 0, 1001, 1002,
	1015, 1112, 1833, 1833, 0, 0, 0, 1118, 1119, 1123,
	0, 1239, 1271, 1260, 1261, 1262, 1205, 1238, 1226, 0,
	-2, 1234, 0, 0, 1690, 1700, 1701, 1399, 1405, 1414,
	1416, 1417, 0, 1429, 1430, 1431, 1433, 1111, 1111, 1111,
	1111, 1347, 779, 0, 126, 0, 0, 156, 157, 159,
	0, 168, 0, 170, 171, 0, 1527, 1003, 0, 0,
	1115, 1116, 0, 1215, 0, 1217, 1228, -2, 0, 1236,
	0, 1400, 1418, 0, 1419, 0, 0, 0, 1338, 1340,
	1344, 1346, 781, 1177, 0, 140, 0, 142, 144, 145,
	1371, 153, 154, 160, 169, 0, 988, 1004, 0, 1113,
	1114, 1117, 0, 1219, 1235, 1691, 1420, 1422, 1423, 0,
	0, 1421, 127, 128, 0, 141, 0, 0, 1172, 1005,
	1216, 1213, 1424, 1426, 1425, 0, 0, 143, 1372, 129,
	130, 131, 0, 1373,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 652, 649,
	128, 127, 129, 3, 653, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 650, 140, 651, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:837
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:844
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:850
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:949
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:960
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:972
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:991
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1005
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1088
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1098
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1110
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1120
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1130
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1166
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1221
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1248
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1258
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1268
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1288
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1294
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1301
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1309
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1315
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1334
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1342
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1368
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1376
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1422
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1432
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1441
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1451
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1461
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1480
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1501
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1515
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1532
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1542
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1549
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1557
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1573
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1591
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1600
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1621
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1630
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1641
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1651
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1661
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1671
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1695
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1750
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1762
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1769
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1806
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1824
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1844
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1863
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1948
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1962
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1994
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2000
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2018
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2055
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2081
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2315
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2322
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2338
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2356
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2399
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2432
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2493
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2604
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2633
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2650
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2670
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2680
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2762
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2820
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2836
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2869
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2875
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2885
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2891
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2895
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2907
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2919
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2925
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2948
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2964
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2970
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3007
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3023
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3137
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3141
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3147
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3153
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3158
		{
			yyVAL.str = "true"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3159
		{
			yyVAL.str = "false"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3160
		{
			yyVAL.str = yyDollar[1].str
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3180
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3187
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3195
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3199
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3224
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3247
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3257
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3264
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3281
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3285
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3291
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3302
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3306
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3312
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3316
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3340
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3350
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3360
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3376
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3398
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3408
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3420
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3428
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3438
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3456
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3466
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3476
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3506
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3545
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3576
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3580
		{
			yyVAL.str = string("COLUMN")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3585
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3591
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3597
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3605
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3609
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3615
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3630
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3636
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3642
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3648
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3654
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3668
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3676
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3682
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3694
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3700
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3712
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3767
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3782
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3829
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3837
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3841
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3885
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3889
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3908
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3915
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3927
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3934
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3941
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3947
		{
			yyVAL.item = nil
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3952
		{
			yyVAL.item = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4035
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4074
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4080
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4085
		{
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4089
		{
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4140
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4146
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4167
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4210
		{
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4212
		{
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4240
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4244
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4260
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4344
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4356
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4376
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4385
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4389
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4395
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4410
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4414
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4455
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4460
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4468
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4474
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4479
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4485
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4531
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4547
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4551
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4557
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4570
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4623
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4637
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4645
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4651
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4661
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4666
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4673
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4713
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4717
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4723
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4729
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4738
		{
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4740
		{
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4743
		{
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4752
		{
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4756
		{
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4761
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4770
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4783
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4791
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4798
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4805
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4825
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4833
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4843
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4847
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4853
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4860
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4866
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4874
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4881
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4888
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4907
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4911
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4915
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4920
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4924
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4928
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4934
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4943
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4953
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4957
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4963
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4967
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4973
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4978
		{
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4989
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4993
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5009
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5015
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5025
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5029
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5038
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5051
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5062
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5073
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5095
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5118
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5135
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5139
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5152
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5156
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5161
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5165
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5172
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5177
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5219
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5225
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5235
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5254
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5287
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5309
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5316
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5325
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5329
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5335
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5347
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5356
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5379
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5385
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5391
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5395
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5406
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5419
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5436
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5466
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5500
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5537
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5545
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5569
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5585
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5593
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5611
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5636
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5640
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5649
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5670
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5679
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5687
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5691
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5696
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5700
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5710
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5716
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5720
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5724
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5728
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5733
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5741
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5747
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5755
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5765
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5775
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5779
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5785
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5794
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5803
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5812
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5820
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5831
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5841
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5845
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5851
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5855
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5865
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5869
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5873
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5877
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5883
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5889
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5899
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5903
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5909
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5919
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5925
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5931
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5935
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5939
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5943
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5953
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5959
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5963
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5969
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5973
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5979
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5983
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5993
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6006
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6012
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6018
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6032
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6043
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6050
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6054
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6060
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6070
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6074
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6087
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6091
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6095
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6104
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6108
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6112
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6116
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = ""
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6129
		{
			yyVAL.str = yyDollar[2].str
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6135
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6139
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6148
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6152
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6156
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6166
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 972:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6208
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6221
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6227
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 975:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6233
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6246
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6251
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6258
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6265
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6269
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6275
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6281
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6286
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6290
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6294
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6298
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6305
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6338
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6343
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6350
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6357
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6361
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6367
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6373
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6377
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6381
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6387
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6393
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6399
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6403
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6409
		{
			yyVAL.str = ""
		}
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6416
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1006:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6422
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6437
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6454
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6471
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6475
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6481
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6485
		{
			yyVAL.str = "DEFINER = "
		}
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6489
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6494
		{
			yyVAL.str = ""
		}
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6498
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6512
		{
			yyVAL.str = ""
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6520
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6526
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6531
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6537
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6550
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6555
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6560
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6566
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6573
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6580
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6587
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6594
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6602
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6608
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6615
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6622
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6630
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6636
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6645
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6662
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6678
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6697
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6703
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6712
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6730
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6736
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6743
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6751
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6757
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6765
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6771
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6779
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6785
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6794
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6798
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6803
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6807
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6814
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6819
		{
			yyVAL.str = ""
		}
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6823
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1064:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6829
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6842
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6853
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6857
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6863
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6869
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6875
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6882
		{
			yyVAL.str = ""
		}
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6886
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6895
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6901
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6909
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6917
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6925
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6933
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6938
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6950
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6961
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7070
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7074
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7080
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7093
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7097
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7103
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7116
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7120
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7124
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7129
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7133
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7139
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7146
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7152
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7161
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7168
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7179
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7183
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7189
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7198
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7202
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7206
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7211
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7215
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7219
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7223
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7229
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7264
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7290
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7296
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7308
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7314
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7320
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7326
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7332
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7340
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7344
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7350
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7364
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7378
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7382
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7386
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7390
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7394
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7398
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7402
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7408
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7427
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7438
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7442
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7447
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7451
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7457
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7461
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7467
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7476
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7485
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7491
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7495
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7501
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7512
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7518
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7536
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7554
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7572
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7588
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7592
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7601
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7613
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7622
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7634
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7644
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7654
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7665
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7675
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7686
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7694
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7705
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7712
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7722
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7735
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7743
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7752
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7761
		{
			yyVAL.str = ""
		}
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7765
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7771
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7775
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7780
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7784
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7791
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7803
		{
			yyVAL.str = ""
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7807
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1180:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7813
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7834
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7848
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7866
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7873
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7880
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7887
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7894
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7898
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7902
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7906
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7910
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7917
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7924
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7928
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7935
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7942
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7946
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7952
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7962
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7969
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7976
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7983
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7990
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7994
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7999
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8003
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8007
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8016
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8033
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8041
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8053
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8065
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8069
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8075
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8079
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8085
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8098
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8116
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8122
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8126
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8132
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8141
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8152
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8156
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8165
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8171
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8176
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8184
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8188
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8198
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8202
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8213
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8221
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8229
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8237
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8248
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8257
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8267
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8277
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8281
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8286
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8290
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8296
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8300
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8306
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8315
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8329
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8335
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8345
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8354
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8364
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8368
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8374
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8378
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8382
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8388
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8396
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8412
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8417
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8421
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8425
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8429
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8433
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8437
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8441
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8445
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8449
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8453
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8457
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8461
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8465
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8471
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8481
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8485
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8489
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8493
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8499
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8505
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8511
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8517
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8523
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8529
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8533
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8537
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8541
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8546
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8557
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8561
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8567
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8578
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8582
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8588
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8592
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8596
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8600
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8604
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8608
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8626
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8635
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8641
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8653
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8660
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8669
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8677
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8685
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8692
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8696
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8706
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8710
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8716
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8720
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8726
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8739
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8752
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8791
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8831
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8845
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8851
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8864
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8877
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8890
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8903
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8918
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8928
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8934
		{
			yyVAL.str = ""
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8938
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8948
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8954
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8960
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8981
		{
			yyVAL.str = ""
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8985
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8991
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8997
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9001
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9006
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9014
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9018
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9022
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9026
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9032
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9038
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9042
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9047
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9058
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9064
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9068
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9074
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9078
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9082
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9086
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9094
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9099
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9103
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9107
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9111
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9115
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9119
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9123
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9127
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9131
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9135
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9157
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9165
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9169
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9175
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9179
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9184
		{
			yyVAL.str = ""
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9188
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9194
		{
			yyVAL.str = ""
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9198
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1414:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9204
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9221
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9228
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9235
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9242
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9249
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9258
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9264
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9270
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9274
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9278
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9282
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9286
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9291
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9298
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9302
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9306
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9315
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9320
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9324
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9340
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9408
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9416
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9420
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9428
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9432
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9436
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9478
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9482
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9486
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9491
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9499
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9503
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9507
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9511
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9515
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9525
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9529
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9541
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9549
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9555
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9564
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9573
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9604
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9633
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9643
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9652
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9666
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9671
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9675
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9681
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9685
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9691
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9700
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9712
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9729
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9746
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9759
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9772
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9784
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9828
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9845
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9860
		{
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9867
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9871
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9875
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9881
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9885
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9889
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9893
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9899
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9903
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9907
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9913
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9921
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9935
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9942
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9947
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9951
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9956
		{
			yyVAL.str = ","
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9960
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9965
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9969
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9974
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9981
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10007
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10019
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10031
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10042
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10053
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10064
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10074
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10106
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10117
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10128
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10139
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10161
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10172
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10183
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10194
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10205
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10216
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10227
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10238
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10256
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10265
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10274
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10283
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10303
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10312
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10322
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10331
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10340
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10349
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10358
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10370
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10394
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10429
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10465
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10478
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10512
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10520
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10528
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10541
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10550
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10561
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10572
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10581
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10593
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10603
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10613
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10622
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10633
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10642
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10652
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10670
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10680
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10684
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10694
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10713
		{
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10715
		{
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10777
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10792
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10798
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10802
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10808
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10812
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10819
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10827
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10836
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10840
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10844
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10859
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10863
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10867
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10871
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10875
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10879
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10883
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10887
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10891
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10895
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10903
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10907
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10911
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10923
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10927
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10931
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10935
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10939
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10949
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10966
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10970
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10974
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10992
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10996
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11000
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11004
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11010
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11014
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11018
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11022
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11028
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11041
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11046
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11052
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11056
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11069
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11074
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11078
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11082
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11086
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11090
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11097
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11101
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11105
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11109
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11116
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11127
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11132
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11150
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11162
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11200
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11213
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11239
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11252
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11291
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11304
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11319
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11346
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11388
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11424
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11489
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11509
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11529
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11549
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11565
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11578
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11591
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11604
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11629
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11641
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11665
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11677
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11689
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11763
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11804
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11812
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11821
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11831
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11854
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11859
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11865
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11872
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11876
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11881
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11885
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11891
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11897
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11904
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11911
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11920
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11927
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11934
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11943
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11947
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11951
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11957
		{
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11959
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11969
		{
			yyVAL.str = ""
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11973
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
